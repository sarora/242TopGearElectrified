<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BEPUphysics</name>
    </assembly>
    <members>
        <member name="T:BEPUphysics.Vehicle.WheelShape">
            <summary>
            Superclass for the shape of the tires of a vehicle.
            Responsible for figuring out where the wheel touches the ground and
            managing graphical properties.
            </summary>
        </member>
        <member name="F:BEPUphysics.Vehicle.WheelShape.detector">
            <summary>
            Collects collision pairs from the environment.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelShape.UpdateWorldTransform">
            <summary>
            Updates the wheel's world transform for graphics.
            Called automatically by the owning wheel at the end of each frame.
            If the engine is updating asynchronously, you can call this inside of a space read buffer lock
            and update the wheel transforms safely.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelShape.UpdateSpin(System.Single)">
            <summary>
            Updates the spin velocity and spin angle for the shape.
            </summary>
            <param name="dt">Simulation timestep.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelShape.FindSupport(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,BEPUphysics.Entities.Entity@)">
            <summary>
            Finds a supporting entity, the contact location, and the contact normal.
            </summary>
            <param name="location">Contact point between the wheel and the support.</param>
            <param name="normal">Contact normal between the wheel and the support.</param>
            <param name="suspensionLength">Length of the suspension at the contact.</param>
            <param name="entity">Supporting object.</param>
            <returns>Whether or not any support was found.</returns>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelShape.Initialize">
            <summary>
            Initializes the detector entity and any other necessary logic.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelShape.UpdateDetectorPosition">
            <summary>
            Updates the position of the detector before each step.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.Radius">
            <summary>
            Gets or sets the graphical radius of the wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.AirborneWheelAcceleration">
            <summary>
            Gets or sets the rate at which the wheel's spinning velocity increases when accelerating and airborne.
            This is a purely graphical effect.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.AirborneWheelDeceleration">
            <summary>
            Gets or sets the rate at which the wheel's spinning velocity decreases when the wheel is airborne and its motor is idle.
            This is a purely graphical effect.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.BrakeFreezeWheelDeceleration">
            <summary>
            Gets or sets the rate at which the wheel's spinning velocity decreases when braking.
            This is a purely graphical effect.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.CollisionRules">
            <summary>
            Gets or sets the collision rules used to filter wheel supports.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.Detector">
            <summary>
            Gets the detector entity used by the wheelshape to collect collision pairs.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.FreezeWheelsWhileBraking">
            <summary>
            Gets or sets whether or not to halt the wheel spin while the WheelBrake is active.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.LocalGraphicTransform">
            <summary>
            Gets or sets the local graphic transform of the wheel shape.
            This transform is applied first when creating the shape's worldTransform.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.SpinAngle">
            <summary>
            Gets or sets the current spin angle of this wheel.
            This changes each frame based on the relative velocity between the
            support and the wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.SpinVelocity">
            <summary>
            Gets or sets the graphical spin velocity of the wheel based on the relative velocity 
            between the support and the wheel.  Whenever the wheel is in contact with
            the ground, the spin velocity will be each frame.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.SteeringAngle">
            <summary>
            Gets or sets the current steering angle of this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.Wheel">
            <summary>
            Gets the wheel object associated with this shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelShape.WorldTransform">
            <summary>
            Gets the world matrix of the wheel for positioning a graphic.
            </summary>
        </member>
        <member name="T:BEPUphysics.Toolbox">
            <summary>
            Helper class with many algorithms for intersection testing and 3D math.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.BigEpsilon">
            <summary>
            Large tolerance value.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.Epsilon">
            <summary>
            Tolerance value.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.NoVector">
            <summary>
            Represents an invalid Vector3.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.BackVector">
            <summary>
            Reference for a vector with dimensions (0,0,1).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.DownVector">
            <summary>
            Reference for a vector with dimensions (0,-1,0).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.ForwardVector">
            <summary>
            Reference for a vector with dimensions (0,0,-1).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.IdentityOrientation">
            <summary>
            Refers to the identity quaternion.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.LeftVector">
            <summary>
            Reference for a vector with dimensions (-1,0,0).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.RightVector">
            <summary>
            Reference for a vector with dimensions (1,0,0).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.UpVector">
            <summary>
            Reference for a vector with dimensions (0,1,0).
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.ZeroMatrix">
            <summary>
            Matrix containing zeroes for every element.
            </summary>
        </member>
        <member name="F:BEPUphysics.Toolbox.ZeroVector">
            <summary>
            Reference for a vector with dimensions (0,0,0).
            </summary>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindRayTriangleIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines the intersection between a ray and a triangle.
            </summary>
            <param name="rayOrigin">Origin point of the ray.</param>
            <param name="rayDirection">Direction of the ray from its origin.</param>
            <param name="maximumLength">Maximum length to travel in units of the direction's length.</param>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
            <param name="hitLocation">Location of ray intersection.</param>
            <param name="t">Distance from origin along direction to intersection.</param>
            <returns>Whether or not the ray and triangle intersect.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetRayPlaneIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Finds the intersection between the plane and the ray.
            </summary>
            <param name="origin">Location of the start of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum length to test in units of the direction's length.</param>
            <param name="planePosition">Position of a point on the plane.</param>
            <param name="planeNormal">Normal of the plane to be intersected.</param>
            <param name="hitLocation">Intersection point.</param>
            <param name="t">Distance, in units of the direction's length, to the hit location.</param>
            <returns>Whether or not the ray intersects the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetSegmentPlaneIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane defined by three points.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second enpoint of segment.</param>
            <param name="d">First vertex of a triangle which lies on the plane.</param>
            <param name="e">Second vertex of a triangle which lies on the plane.</param>
            <param name="f">Third vertex of a triangle which lies on the plane.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetSegmentPlaneIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second enpoint of segment.</param>
            <param name="p">Plane for comparison.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetSegmentPlaneIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second enpoint of segment.</param>
            <param name="p">Plane for comparison.</param>
            <param name="t">Interval along segment to intersection.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTriangleToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p.
            </summary>
            <param name="a">First vertex of triangle.</param>
            <param name="b">Second vertex of triangle.</param>
            <param name="c">Third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTriangleToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p and provides the subsimplex whose voronoi region contains the point.
            </summary>
            <param name="a">First vertex of triangle.</param>
            <param name="b">Second vertex of triangle.</param>
            <param name="c">Third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTriangleToPoint(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Single},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p and provides the subsimplex whose voronoi region contains the point.
            </summary>
            <param name="q">Simplex containing triangle for testing.</param>
            <param name="i">Index of first vertex of triangle.</param>
            <param name="j">Index of second vertex of triangle.</param>
            <param name="k">Index of third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1, c = 2.</param>
            <param name="baryCoords">Barycentric coordinates of the point on the triangle.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.IsPointInsideTriangle(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if supplied point is within the triangle as defined by the provided vertices.
            </summary>
            <param name="vA">A vertex of the triangle.</param>
            <param name="vB">A vertex of the triangle.</param>
            <param name="vC">A vertex of the triangle.</param>
            <param name="p">The point for comparison against the triangle.</param>
            <returns>Whether or not the point is within the triangle.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.IsPointInsideTriangle(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Determines if supplied point is within the triangle as defined by the provided vertices.
            </summary>
            <param name="vA">A vertex of the triangle.</param>
            <param name="vB">A vertex of the triangle.</param>
            <param name="vC">A vertex of the triangle.</param>
            <param name="p">The point for comparison against the triangle.</param>
            <param name="margin">Extra area on the edges of the triangle to include.  Can be negative.</param>
            <returns>Whether or not the point is within the triangle.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnSegmentToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnSegmentToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnSegmentToPoint(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Single},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="q">List of points in the containing simplex.</param>
            <param name="i">Index of first endpoint of segment.</param>
            <param name="j">Index of second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1.</param>
            <param name="baryCoords">Barycentric coordinates of the point.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetDistanceFromPointToLine(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines the shortest distance from the point to the line.
            </summary>
            <param name="p">Point to check against the line.</param>
            <param name="a">First point on the line for comparison.</param>
            <param name="b">Second point on the line for comparison.</param>
            <returns>Shortest distance from the point to the line.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetSquaredDistanceFromPointToLine(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines the shortest squared distance from the point to the line.
            </summary>
            <param name="p">Point to check against the line.</param>
            <param name="a">First point on the line.</param>
            <param name="b">Second point on the line.</param>
            <returns>Shortest squared distance from the point to the line.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreSegmentsParallel(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines if the given directions are parallel.
            </summary>
            <param name="dirA">First line direction.</param>
            <param name="dirB">Second line direction.</param>
            <returns>Whether or not the given directions are parallel.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointsBetweenSegments(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointsBetweenSegments(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,System.Single@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="s">Distance along the line to the point for first segment.</param>
            <param name="t">Distance along the line to the point for second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetDistanceBetweenLines(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines the minimum distance between two lines.
            </summary>
            <param name="p1">First point of the first line for comparison.</param>
            <param name="p2">Second point of the first line for comparison.</param>
            <param name="p3">First point of the second line for comparison.</param>
            <param name="p4">Second point of the second line for comparison.</param>
            <returns>Minimum distance between two lines.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetIntersectionParallelSegments(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the intersection of two parallel segments represented by two points.
            </summary>
            <param name="p1">First endpoint of first segment.</param>
            <param name="q1">Second endpoint of first segment.</param>
            <param name="p2">First endpoint of second segment.</param>
            <param name="q2">Second endpoint of second segment.</param>
            <param name="a">First endpoint of intersection area.</param>
            <param name="b">Last endpoint of intersection area.</param>
            <returns>Whether or not the segments are parallel.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetLineLineIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the shortest line segment between two lines.
            </summary>
            <param name="p1">First point of the first line for comparison.</param>
            <param name="p2">Second point of the first line for comparison.</param>
            <param name="p3">First point of the second line for comparison.</param>
            <param name="p4">Second point of the second line for comparison.</param>
            <param name="pa">First point of the shortest line.</param>
            <param name="pb">Second point of the shortest line.</param>
            <returns>Whether or not an intersection could be identified.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetLineLineIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the intersection point between two coplanar segments.
            Note: Does not explicitly test coplanarity; functionality for non-coplanar parameters is undefined.
            </summary>
            <param name="p1">First point of the first line for comparison.</param>
            <param name="p2">Second point of the first line for comparison.</param>
            <param name="p3">First point of the second line for comparison.</param>
            <param name="p4">Second point of the second line for comparison.</param>
            <param name="intersection">Point of intersection.</param>
            <returns>Intersection between the two coplanar lines.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetSquaredDistanceLinePoint(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Finds the squared distance from a point to a line.
            </summary>
            <param name="a">First point on the line.</param>
            <param name="b">Second point on the line.</param>
            <param name="p">Point for comparison.</param>
            <returns>Squared distance from the point to the line.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.IsPointCollinear(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines if the given point is collinear with the line.
            </summary>
            <param name="point">Point for comparison.</param>
            <param name="a">First endpoint of the line.</param>
            <param name="b">Second endpoint of the line.</param>
            <returns>Whether or not the point is collinear with the line.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.CompareVectorLengths(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Acts as a comparator condition based on length for two vectors.
            </summary>
            <param name="v1">First vector for comparison.</param>
            <param name="v2">Second vector for comparison.</param>
            <returns>Comparator int.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.ArePointsOnOppositeSidesOfPlane(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if vectors o and p are on opposite sides of the plane defined by a, b, and c.
            </summary>
            <param name="o">First point for comparison.</param>
            <param name="p">Second point for comparison.</param>
            <param name="a">First vertex of the plane.</param>
            <param name="b">Second vertex of plane.</param>
            <param name="c">Third vertex of plane.</param>
            <returns>Whether or not vectors o and p reside on opposite sides of the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetDistancePointToPlane(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines the distance between a point and a plane..
            </summary>
            <param name="point">Point to project onto plane.</param>
            <param name="normal">Normal of the plane.</param>
            <param name="pointOnPlane">Point located on the plane.</param>
            <returns>Distance from the point to the plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetPointProjectedOnPlane(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines the location of the point when projected onto the plane defined by the normal and a point on the plane.
            </summary>
            <param name="point">Point to project onto plane.</param>
            <param name="normal">Normal of the plane.</param>
            <param name="pointOnPlane">Point located on the plane.</param>
            <returns>Projected location of point onto plane.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.IsPointWithinFaceExtrusion(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.List{Microsoft.Xna.Framework.Plane},Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines if a point is within a set of planes defined by the edges of a triangle.
            </summary>
            <param name="point">Point for comparison.</param>
            <param name="planes">Edge planes.</param>
            <param name="centroid">A point known to be inside of the planes.</param>
            <returns>Whether or not the point is within the edge planes.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.IsPointWithinFaceExtrusion(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.List{Microsoft.Xna.Framework.Plane},Microsoft.Xna.Framework.Vector3,System.Collections.Generic.List{Microsoft.Xna.Framework.Plane}@)">
            <summary>
            Determines if a point lies within the bounds of a set of planes representing edge planes.
            If it is outside, a set of possible separating planes will be provided.
            </summary>
            <param name="point">Location to test for inclusion.</param>
            <param name="planes">Representation of edge planes on a face.</param>
            <param name="centroid">A point determined to be within all planes.</param>
            <param name="separatingPlanes">Possible planes that the point may come from wtihin the object (as with a line segment).</param>
            <returns>Whether or not the point is within the extrusion.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTetrahedronToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="a">First vertex of the tetrahedron.</param>
            <param name="b">Second vertex of the tetrahedron.</param>
            <param name="c">Third vertex of the tetrahedron.</param>
            <param name="d">Fourth vertex of the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTetrahedronToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="a">First vertex of the tetrahedron.</param>
            <param name="b">Second vertex of the tetrahedron.</param>
            <param name="c">Third vertex of the tetrahedron.</param>
            <param name="d">Fourth vertex of the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTetrahedronToPoint(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Single},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="tetrahedron">List of 4 points composing the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1, c = 2, d = 3.</param>
            <param name="baryCoords">Barycentric coordinates of p on the tetrahedron.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreObjectsColliding(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if objA and objB are colliding, taking into account the collision pair margin.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="separatingAxis">Witness to nonpenetration.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreObjectsColliding(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single)">
            <summary>
            Determines if objA and objB are colliding, taking into account the collision pair margin.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreSweptObjectsColliding(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines if objA and objB are colliding using a swept collision test.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="sweepA">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="sweepB">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="hitLocation">Hit location between the objects.</param>
            <param name="hitNormal">Normal of impact between the two objects.</param>
            <param name="toi">Time of impact between the two objects along their velocities.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreSweptObjectsColliding(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines if objA and objB are colliding using a swept collision test.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="positionToUseA">Position to use for the first object in lieu of its current position.</param>
            <param name="positionToUseB">Position to use for the second object in lieu of its current position.</param>
            <param name="orientationToUseA">Orientation to use for the first object in lieu of its current orientation.</param>
            <param name="orientationToUseB">Orientation to use for the second object in lieu of its current orientation.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="sweepA">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="sweepB">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="hitLocation">Hit location between the objects.</param>
            <param name="hitNormal">Normal of impact between the two objects.</param>
            <param name="toi">Time of impact between the two objects along their velocities.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreSweptObjectsColliding(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines if objA and objB are colliding using a swept collision test.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="sweepA">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="sweepB">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="toi">Time of impact between the two objects along their velocities.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreSweptObjectsColliding(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines if objA and objB are colliding using a swept collision test.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="positionToUseA">Position to use for the first object in lieu of its current position.</param>
            <param name="positionToUseB">Position to use for the second object in lieu of its current position.</param>
            <param name="orientationToUseA">Orientation to use for the first object in lieu of its current orientation.</param>
            <param name="orientationToUseB">Orientation to use for the second object in lieu of its current orientation.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="sweepA">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="sweepB">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="toi">Time of impact between the two objects along their velocities.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointsBetweenObjects(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest points between two entities.
            </summary>
            <param name="objA">First entity for testing.</param>
            <param name="objB">Second entity for testing.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="closestA">Closest point on objA.</param>
            <param name="closestB">Closest point on objB.</param>
            <returns>Separation vector between the two objects.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetClosestPointsBetweenObjects(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the closest points between two entities.
            </summary>
            <param name="objA">First entity for testing.</param>
            <param name="objB">Second entity for testing.</param>
            <param name="positionA">Location to consider as the geometric center of the first object.</param>
            <param name="positionB">Location to consider as the geometric center of the second object.</param>
            <param name="orientationA">Orientation to use in lieu of the first object's rotation.</param>
            <param name="orientationB">Orientation to use in lieu of the second object's rotation.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="closestA">Closest point on objA.</param>
            <param name="closestB">Closest point on objB.</param>
            <returns>Separation vector between the two objects.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetDistanceBetweenObjects(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single)">
            <summary>
            Determines the minimum distance between the two objects.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="marginA">Extra space around the first object.</param>
            <param name="marginB">Extra space around the second object.</param>
            <returns>Distance between objects.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetDistanceBetweenObjects(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the minimum distance between the two objects.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="marginA">Extra space around the first object.</param>
            <param name="marginB">Extra space around the second object.</param>
            <param name="separatingDirection">Direction of shortest separation between the objects.</param>
            <returns>Distance between objects.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetDistanceBetweenObjects(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the minimum distance between the two objects.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="positionA">Location to consider as the center of the first object.</param>
            <param name="positionB">Location to consider as the center of the second object.</param>
            <param name="orientationA">Orientation to use in lieu of the first object's rotation.</param>
            <param name="orientationB">Orientation to use in lieu of the second object's rotation.</param>
            <param name="marginA">Extra space around the first object.</param>
            <param name="marginB">Extra space around the second object.</param>
            <param name="separatingDirection">Direction of shortest separation between the objects.</param>
            <returns>Distance between objects.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreObjectsColliding(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if objA and objB are colliding, taking into account the collision pair margin.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="backVelocityA">Backwards velocity of the object used to create a swept volume.</param>
            <param name="backVelocityB">Backwards velocity of the object used to create a swept volume.</param>
            <param name="separatingAxis">Witness to nonpenetration.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreObjectsCollidingReference(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single)">
            <summary>
            Determines if objA and objB are colliding.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindPointClosestToSimplex(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the point on the simplex closest to the provided point.
            Set of points must be between 1 and 4 points.
            </summary>
            <param name="q">Set of 1-4 points defining a simplex.</param>
            <param name="p">Point to compare against the simplex.</param>
            <param name="closestPoint">Closest point on the hull of the set to the origin.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindPointOfMinimumNorm(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the point closest to the origin from the convex hull of the set of points q.
            Set of points must be between 1 and 4 points.
            </summary>
            <param name="q">Set of 1-4 points.</param>
            <param name="closestPoint">Closest point on the hull of the set to the origin.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindPointOfMinimumNorm(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the point closest to the origin from the convex hull of the set of points q.
            Set of points must be between 1 and 4 points.
            </summary>
            <param name="q">Set of 1-4 points.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on the hull of the set to the origin.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindPointOfMinimumNorm(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Single},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the point closest to the origin from the convex hull of the set of points q.
            Set of points must be between 1 and 4 points.
            </summary>
            <param name="q">Set of 1-4 points.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, referencing the input list indices.</param>
            <param name="baryCoords">Barycentric coordinates of the point on the subsimplex closest to the origin.</param>
            <param name="closestPoint">Closest point on the hull of the set to the origin.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreObjectsCollidingCA(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)">
            <summary>
            Determines if the objects are colliding during the next frame.
            </summary>
            <param name="objA">First object to check.</param>
            <param name="objB">Second object to check.</param>
            <param name="dt">Time in seconds of physical logic to integrate over.</param>
            <param name="nextPositionA">The next non-penetrating center of mass position for object A.</param>
            <param name="nextPositionB">The next non-penetrating center of mass position for object B.</param>
            <param name="nextOrientationA">The next non-penetrating orientation state for object A.</param>
            <param name="nextOrientationB">The next non-penetrating orientation state for object B.</param>
            <param name="timeOfImpact">Time of impact, if any, between the objects.</param>
            <returns>Whether or not the core shapes of the objects have collided during the frame.
            If false, it does not mean that the margin-expanded shapes are not colliding, just that the cores are not.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreSweptObjectsCollidingCA(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if the objects are colliding during the next frame.
            </summary>
            <param name="objA">First object to check.</param>
            <param name="objB">Second object to check.</param>
            <param name="dt">Time in seconds of physical logic to integrate over.</param>
            <param name="nextPositionA">The next non-penetrating center of mass position for object A.</param>
            <param name="nextPositionB">The next non-penetrating center of mass position for object B.</param>
            <param name="nextOrientationA">The next non-penetrating orientation state for object A.</param>
            <param name="nextOrientationB">The next non-penetrating orientation state for object B.</param>
            <param name="timeOfImpact">Time of impact, if any, between the objects.</param>
            <param name="location">Location where the objects touch.</param>
            <param name="normal">Normal at the contact surface.</param>
            <returns>Whether or not the core shapes of the objects have collided during the frame.
            If false, it does not mean that the margin-expanded shapes are not colliding, just that the cores are not.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreSweptObjectsCollidingCA(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if the objects are colliding during movement between the provided states.
            </summary>
            <param name="objA">First object to check.</param>
            <param name="objB">Second object to check.</param>
            <param name="originalPositionA">Initial center of mass position for entity A.</param>
            <param name="originalPositionB">Initial center of mass position for entity B.</param>
            <param name="originalOrientationA">Initial orientation for entity A.</param>
            <param name="originalOrientationB">Initial orientation for entity B.</param>
            <param name="finalPositionA">Final center of mass position for entity A.</param>
            <param name="finalPositionB">Final center of mass position for entity B.</param>
            <param name="finalOrientationA">Final orientation for entity A.</param>
            <param name="finalOrientationB">Final orientation for entity B.</param>
            <param name="nextPositionA">The next non-penetrating center of mass position for object A.</param>
            <param name="nextPositionB">The next non-penetrating center of mass position for object B.</param>
            <param name="nextOrientationA">The next non-penetrating orientation state for object A.</param>
            <param name="nextOrientationB">The next non-penetrating orientation state for object B.</param>
            <param name="timeOfImpact">Time of impact, if any, between the objects.</param>
            <param name="location">Location where the objects touch.</param>
            <param name="normal">Normal at the contact surface.</param>
            <returns>Whether or not the core shapes of the objects have collided during the frame.
            If false, it does not mean that the margin-expanded shapes are not colliding, just that the cores are not.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreSweptObjectsCollidingCA(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)">
            <summary>
            Determines if the objects are colliding during movement between the provided states.
            </summary>
            <param name="objA">First object to check.</param>
            <param name="objB">Second object to check.</param>
            <param name="originalPositionA">Initial center of mass position for entity A.</param>
            <param name="originalPositionB">Initial center of mass position for entity B.</param>
            <param name="originalOrientationA">Initial orientation for entity A.</param>
            <param name="originalOrientationB">Initial orientation for entity B.</param>
            <param name="finalPositionA">Final center of mass position for entity A.</param>
            <param name="finalPositionB">Final center of mass position for entity B.</param>
            <param name="finalOrientationA">Final orientation for entity A.</param>
            <param name="finalOrientationB">Final orientation for entity B.</param>
            <param name="nextPositionA">The next non-penetrating center of mass position for object A.</param>
            <param name="nextPositionB">The next non-penetrating center of mass position for object B.</param>
            <param name="nextOrientationA">The next non-penetrating orientation state for object A.</param>
            <param name="nextOrientationB">The next non-penetrating orientation state for object B.</param>
            <param name="timeOfImpact">Time of impact, if any, between the objects.</param>
            <returns>Whether or not the core shapes of the objects have collided during the frame.
            If false, it does not mean that the margin-expanded shapes are not colliding, just that the cores are not.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreSweptObjectsCollidingCA(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines if the objects are colliding during movement between the provided states.
            </summary>
            <param name="objA">First object to check.</param>
            <param name="objB">Second object to check.</param>
            <param name="originalPositionA">Initial center of mass position for entity A.</param>
            <param name="originalPositionB">Initial center of mass position for entity B.</param>
            <param name="originalOrientationA">Initial orientation for entity A.</param>
            <param name="originalOrientationB">Initial orientation for entity B.</param>
            <param name="finalPositionA">Final center of mass position for entity A.</param>
            <param name="finalPositionB">Final center of mass position for entity B.</param>
            <param name="nextPositionA">The next non-penetrating center of mass position for object A.</param>
            <param name="nextPositionB">The next non-penetrating center of mass position for object B.</param>
            <param name="timeOfImpact">Time of impact, if any, between the objects.</param>
            <returns>Whether or not the core shapes of the objects have collided during the frame.
            If false, it does not mean that the margin-expanded shapes are not colliding, just that the cores are not.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreObjectsCollidingMPR(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the status of a collision between two entities.
            </summary>
            <param name="a">First entity involved in the collision.</param>
            <param name="b">Second entity involved in the collision.</param>
            <param name="distance">If the objects are not colliding, represents a conservative estimate of the distance between the two bodies' core, non-margin expanded shapes.</param>
            <param name="normal">If the objects are not colliding, represents a separating direction between the two bodies.</param>
            <returns>Whether or not the bodies' margin-expanded shapes are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreObjectsCollidingMPR(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the status of a collision between two entities.
            </summary>
            <param name="a">First entity involved in the collision.</param>
            <param name="b">Second entity involved in the collision.</param>
            <param name="positionA">Location to consider as the center of the first object.</param>
            <param name="positionB">Location to consider as the center of the second object.</param>
            <param name="orientationA">Orientation to use in lieu of the first object's rotation.</param>
            <param name="orientationB">Orientation to use in lieu of the second object's rotation.</param>
            <param name="distance">If the objects are not colliding, represents a conservative estimate of the distance between the two bodies' core, non-margin expanded shapes.</param>
            <param name="normal">If the objects are not colliding, represents a separating direction between the two bodies.</param>
            <returns>Whether or not the bodies' margin-expanded shapes are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindExtremePointWithOffset(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines the extremal point of the minkowski difference of a and b along the given axis.
            </summary>
            <param name="a">First collidable for comparison.</param>
            <param name="b">Second collidable for comparison.</param>
            <param name="axis">Axis to find extremes along.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="offsetA">Offset to be applied to the first entity.</param>
            <param name="offsetB">Offset to be applied to the second entity.</param>
            <returns>The most extreme point on the Minkowski difference along the axis.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindMinkowskiDifferenceExtremePoint(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Determines the extremal point of the minkowski difference of a and b along the given axis.
            </summary>
            <param name="a">First collidable for comparison.</param>
            <param name="b">Second collidable for comparison.</param>
            <param name="axis">Axis to find extremes along.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <returns>The most extreme point on the Minkowski difference along the axis.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindMinkowskiDifferenceExtremePoint(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines the extremal point of the minkowski difference of a and b along the given axis.
            </summary>
            <param name="a">First collidable for comparison.</param>
            <param name="b">Second collidable for comparison.</param>
            <param name="axis">Axis to find extremes along.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="extremePoint">The most extreme point on the Minkowski difference along the axis.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindMinkowskiDifferenceExtremePoint(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single)">
            <summary>
            Determines the extremal point of the minkowski difference of a and b along the given axis.
            </summary>
            <param name="a">First collidable for comparison.</param>
            <param name="b">Second collidable for comparison.</param>
            <param name="axis">Axis to find extremes along.</param>
            <param name="positionA">Location to consider as the center of the first object.</param>
            <param name="positionB">Location to consider as the center of the second object.</param>
            <param name="orientationA">Orientation to use in lieu of the first object's rotation.</param>
            <param name="orientationB">Orientation to use in lieu of the second object's rotation.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <returns>The most extreme point on the Minkowski difference along the axis.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.FindMinkowskiDifferenceExtremePoint(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single)">
            <summary>
            Determines the extremal point of the minkowski difference of a and b along the given axis.
            </summary>
            <param name="a">First entity being analyzed.</param>
            <param name="b">Second entity being analyzed.</param>
            <param name="sweepA">Line segment to add to the first object.</param>
            <param name="sweepB">Line segment to add to the second object.</param>
            <param name="axis">Axis to find extremes along.</param>
            <param name="positionA">Location to consider as the center of the first object.</param>
            <param name="positionB">Location to consider as the center of the second object.</param>
            <param name="orientationA">Orientation to use in lieu of the first object's rotation.</param>
            <param name="orientationB">Orientation to use in lieu of the second object's rotation.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <returns>The most extreme point on the Minkowski difference along the axis.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetBarycenter(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single},Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Applies barycentric coordinates to a set of points.
            </summary>
            <param name="q">Set of points to apply coordinates to.</param>
            <param name="baryCoords">Barycentric coordinates to apply to the set.</param>
            <param name="barycenter">Barycenter of the set defined by the coordinates.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,BEPUphysics.Entities.Entity,System.Boolean,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines whether or not a ray intersects an entity.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum length, in units of the direction's length, to test for hits.</param>
            <param name="target">Entity to check for intersection.</param>
            <param name="withMargin">Whether or not to include the collision margin of the body.</param>
            <param name="hitLocation">First point along the ray hitting the target entity.</param>
            <param name="hitNormal">Normal of the tangent plane of the object defined at the hit location.</param>
            <param name="t">Distance along the ray, in units of the direction's length, to the hit location.</param>
            <returns>Whether or not the ray intersects the entity.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,BEPUphysics.Entities.Entity,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines whether or not a the ray intersects the entity with a supplied collision margin.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum length, in units of the direction's length, to test for hits.</param>
            <param name="target">Entity to check for intersection.</param>
            <param name="margin">Margin around the body to include in the ray test.</param>
            <param name="hitLocation">First point along the ray hitting the target entity.</param>
            <param name="hitNormal">Normal of the tangent plane of the object defined at the hit location.</param>
            <param name="t">Distance along the ray, in units of the direction's length, to the hit location.</param>
            <returns>Whether or not the ray intersects the entity.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.RayCastGJK(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,BEPUphysics.Entities.Entity,System.Boolean,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines whether or not a finite ray intersects an entity.
            Uses a GJK-based algorithm for all entities.
            It is recommended that the normal rayCast method be used unless a problem is encountered.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="length">Maximum length of the ray in units of the magnitude of the direction.</param>
            <param name="target">Entity to check for intersection.</param>
            <param name="withMargin">Whether or not to include the collision margin of the body.</param>
            <param name="hitLocation">First point along the ray hitting the target entity.</param>
            <param name="hitNormal">Normal of the tangent plane of the object defined at the hit location.</param>
            <param name="t">Distance along the ray, in units of the direction's length, to the hit location.</param>
            <returns>Whether or not the ray intersects the entity.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.RayCastGJK(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,BEPUphysics.Entities.Entity,System.Boolean,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines whether or not a finite ray intersects an entity.
            Uses the GJK algorithm for all entities.
            It is recommended that the normal rayCast method be used unless a problem is encountered.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.  Magnitude is important; if the ray 'falls short' it will not be reported as a hit.</param>
            <param name="target">Entity to check for intersection.</param>
            <param name="withMargin">Whether or not to include the collision margin of the body.</param>
            <param name="hitLocation">First point along the ray hitting the target entity.</param>
            <param name="hitNormal">Normal of the tangent plane of the object defined at the hit location.</param>
            <param name="t">Distance along the ray, in units of the direction's length, to the hit location.</param>
            <returns>Whether or not the ray intersects the entity.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.RayCastGJKInfinite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,BEPUphysics.Entities.Entity,System.Boolean,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines whether or not an infinite ray intersects an entity.
            Uses a GJK-based algorithm for all entities.
            It is recommended that the normal rayCast method be used unless a problem is encountered.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.  Magnitude does not matter; considered to be infinite.</param>
            <param name="target">Entity to check for intersection.</param>
            <param name="withMargin">Whether or not to include the margin of the object.</param>
            <param name="hitLocation">First point along the ray hitting the target entity.</param>
            <param name="hitNormal">Normal of the tangent plane of the object defined at the hit location.</param>
            <param name="t">Distance along the ray, in units of the direction's length, to the hit location.</param>
            <returns>Whether or not the ray intersects the entity.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value between a minimum and maximum.
            </summary>
            <param name="n">Value to clamp.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximum value allowed.</param>
            <returns>Clamped value.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreVectorsEqual(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Compares the vectors for equality.
            </summary>
            <param name="a">First vector for testing.</param>
            <param name="b">Second vector for testing.</param>
            <returns>Whether or not the two vectors are equal.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.AreVectorsSimilar(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines if two vectors have similar components.
            </summary>
            <param name="a">First vector for comparison.</param>
            <param name="b">Second vector for comparison.</param>
            <returns>Whether or not the vectors are similar.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.ContainsSimilarAxis(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines if a list contains a Vector3 representing an axis (both negative and positive), allowing for a small amount of error.
            </summary>
            <param name="list">List to check.</param>
            <param name="toCheck">Axis to check.</param>
            <returns>Whether or not the list contains the provided axis.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetAngleFromQuaternion(Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Computes the angle change represented by a normalized quaternion.
            </summary>
            <param name="q">Quaternion to be converted.</param>
            <returns>Angle around the axis represented by the quaternion.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetAxisAngleFromQuaternion(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Computes the axis angle representation of a normalized quaternion.
            </summary>
            <param name="q">Quaternion to be converted.</param>
            <param name="axis">Axis represented by the quaternion.</param>
            <param name="angle">Angle around the axis represented by the quaternion.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetCollidedEntities(BEPUphysics.Entities.Entity,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Collects all of the entities currently colliding with the entity.
            </summary>
            <param name="e">Entity being collided with.</param>
            <param name="collidedEntities">List to be filled with all entities collided with the given entity.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetConvexHull(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Trims out all points within the given list which are not on the outer convex hull of the group.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="indices">List of indices composing the triangulated surface of the convex hull.</param>
            <param name="hullVertices">List of points on the convex hull.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetCrossProductMatrix(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the cross product matrix for the given vector.
            </summary>
            <param name="v">Vector to be used in finding the cross product matrix.</param>
            <returns>Cross product matrix form of the vector.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetExtremePointOfSet(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Int32@)">
            <summary>
            Finds the vector that is furthest along the given direction within the list.
            </summary>
            <param name="direction">Direction to find the furthest point along.</param>
            <param name="pointIndices">Indices from the point set to test.</param>
            <param name="points">List of all points to be indexed from.</param>
            <returns>The point furthest along the direction in the list of points.</returns>
            <param name="maxIndex">Index of the maximum point in the list.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetExtremePointsOfSet(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Int32@,System.Int32@)">
            <summary>
            Finds the two points which are most extreme along the given direction within the list.
            </summary>
            <param name="direction">Direction to find the furthest points along.</param>
            <param name="points">List of points to test against.</param>
            <param name="minimum">Index of the point furthest back along the direction in the point list.</param>
            <param name="maximum">Index of the point furthest forward along the direction in the point list.</param>
            <returns>The point furthest along the direction in the list of points.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetHighestRankCompoundBody(BEPUphysics.Entities.Entity)">
            <summary>
            Finds most senior compound body associated with the given body.
            </summary>
            <param name="p">Body to analyze.</param>
            <returns>Most senior compound body associated with the given body.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetMatrixFromVector(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Converts a vector into a matrix.
            </summary>
            <param name="v">Vector to be matrix-fied.</param>
            <returns>Matrix form of the vector.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetOuterProduct(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Computes the outer product of the given vectors.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>Outer product result.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetQuaternionBetweenNormalizedVectors(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Computes the quaternion rotation between two normalized vectors.
            </summary>
            <param name="v1">First unit-length vector.</param>
            <param name="v2">Second unit-length vector.</param>
            <param name="q">Quaternion representing the rotation from v1 to v2.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetTransposedVector(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Finds the transposed matrix of a vector.
            </summary>
            <param name="v">Vector to be transposed.</param>
            <returns>Transposed vector in matrix form.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetVelocityOfPoint(Microsoft.Xna.Framework.Vector3,BEPUphysics.Entities.Entity)">
            <summary>
            Finds the velocity of a point as if it were connected to the given entity.
            </summary>
            <param name="p">Location of point.</param>
            <param name="obj">Collidable for connection.</param>
            <returns>Acceleration of the point.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.PruneDirectionalDuplicates(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Compares elements in the lists, removing any duplicates from the lists.
            Two vectors will be considered duplicate if they are parallel, even if facing opposite directions.
            </summary>
            <param name="a">First set of vectors for comparison.</param>
            <param name="b">Second set of vectors for comparison.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.DifferentiatePosition(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds the change in the position.
            </summary>
            <param name="position">Position of the object.</param>
            <param name="invMass">Inverse mass of the object.</param>
            <param name="linearMomentum">Linear momentum of the object.</param>
             <returns>Change in position.</returns>
        </member>
        <member name="M:BEPUphysics.Toolbox.DifferentiateQuaternion(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Finds the change in the rotation state quaternion provided the local inertia tensor and angular velocity.
            </summary>
            <param name="orientation">Orienatation of the object.</param>
            <param name="localInertiaTensorInverse">Local-space inertia tensor of the object being updated.</param>
            <param name="angularMomentum">Angular momentum of the object.</param>
             <param name="orientationChange">Change in quaternion.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.UpdateOrientationRK4(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Updates the quaternion using RK4 integration.
            </summary>
            <param name="q">Quaternion to update.</param>
            <param name="localInertiaTensorInverse">Local-space inertia tensor of the object being updated.</param>
            <param name="angularMomentum">Angular momentum of the object.</param>
            <param name="dt">Time since last frame, in seconds.</param>
            <param name="newOrientation">New orientation quaternion.</param>
        </member>
        <member name="M:BEPUphysics.Toolbox.GetSphereVolumeSplitByPlane(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single@)">
            <summary>
            Calculates the volume of the sphere 'below' the given plane.
            </summary>
            <param name="spherePosition">Center of mass of the sphere.</param>
            <param name="sphereVolume">Precalculated total volume of the sphere (4/3 * pi * radius ^ 3).</param>
            <param name="radius">Radius of the sphere.</param>
            <param name="p">A point on the plane.</param>
            <param name="norm">Normal of the plane.</param>
            <param name="volume">Volume of the sphere which is opposite the normal direction.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.BallSocketJoint">
            <summary>
            Connects two entities with a spherical joint.  Acts like an unrestricted shoulder joint.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.Joint">
            <summary>
            Superclass of position-based constraints.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.Constraint">
            <summary>
            Abstract superclass of constraints involving two bodies.
            </summary>
        </member>
        <member name="T:BEPUphysics.SolverUpdateable">
            <summary>
            Superclass of objects types which require solving by the velocity solver.
            These are updated within the internal iterative solver when owned by a space.
            </summary>
        </member>
        <member name="F:BEPUphysics.SolverUpdateable.involvedEntities">
            <summary>
            List of all entities affected by this updateable.
            </summary>
        </member>
        <member name="F:BEPUphysics.SolverUpdateable.isActiveInSolver">
            <summary>
            Whether or not the space's solver should update this object.
            </summary>
        </member>
        <member name="F:BEPUphysics.SolverUpdateable.space">
            <summary>
            Space containing the updateable.
            </summary>
        </member>
        <member name="F:BEPUphysics.SolverUpdateable.numberOfInvolvedEntities">
            <summary>
            Number of entities used in the solver updateable.
            Note that this is set automatically by the sortInvolvedEntities method
            if it is called.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.OnAdditionToSpace(BEPUphysics.Space)">
            <summary>
            Sets up any necessary internal information when the updateable is added to the space.
            Called automatically.
            </summary>
            <param name="newSpace">New owning space of the updateable.</param>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.OnRemovalFromSpace">
            <summary>
            Sets up any necessary internal information when the updateable is removed from the space.
            Called automatically.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.EnterLock">
            <summary>
            Acquires exclusive access to all entities involved in the solver updateable.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.ExitLock">
            <summary>
            Releases exclusive access to the updateable's entities.
            This should be called within a 'finally' block following a 'try' block containing the locked operations.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.TryEnterLock">
            <summary>
            Attempts to acquire exclusive access to all entities involved in the solver updateable.
            </summary>
            <returns>Whether or not the lock was entered successfully.</returns>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.AddToBatches">
            <summary>
            Determines the first batch that this solver item can be inserted into without causing an entity conflict.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.RemoveFromBatch">
            <summary>
            Removes this object from its current batch.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.ApplyImpulse(System.Single)">
            <summary>
            Updates the updateable.
            Called automatically when needed by the owning Space.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.CollectInvolvedEntities(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Adds entities associated with the solver item to the involved entities list.
            This allows the non-batched multithreading system to lock properly.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.PreStep(System.Single)">
            <summary>
            Computes information required during the later update.
            Called once before the iteration loop.
            </summary>
            <param name="dt">Time since previous frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.UpdateSolverActivity">
            <summary>
            Sets the activity state of the constraint based on the activity state of its connections.
            Called automatically by the space owning a constaint.  If a constraint is a sub-constraint that hasn't been directly added to the space,
            this may need to be called alongside the preStep from within the parent constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.OnInvolvedEntitiesChanged">
            <summary>
            Handle any bookkeeping needed when the entities involved in this SolverUpdateable change.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.CollectInvolvedEntities">
            <summary>
            Collects the entities involved in a solver updateable and sets up the internal listings.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverUpdateable.SortInvolvedEntities">
            <summary>
            Sorts the involved entities according to their hashcode to allow non-batched multithreading to avoid deadlocks.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverUpdateable.IsActive">
            <summary>
            Gets or sets whether or not this solver updateable is active.
            
            When set to false, this solver updateable will be idle and its 
            isActiveInSolver field will always be false.
            
            When set to true, the solver updateable will run normally and update if
            the type's activity conditions allow it.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverUpdateable.IsActiveInSolver">
            <summary>
            Gets whether or not the space's solver should try to solve this object.
            Depends on conditions specific to each solver updateable type and whether or not
            it has completed its computations early.  Recomputed each frame.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverUpdateable.SolverGroup">
            <summary>
            Gets the solver group that manages this solver updateable, if any.
            Null if not owned by a solver group.
            </summary>
        </member>
        <member name="P:BEPUphysics.SolverUpdateable.Space">
            <summary>
            Space containing the updateable.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Constraint.WorldEntity">
            <summary>
            Entity that constraints connect to when they are given a null connection.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Constraint.connectionA">
            <summary>
            First connection to the constraint.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Constraint.connectionB">
            <summary>
            Second connection to the constraint.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Constraint.numIterationsAtZeroImpulse">
            <summary>
            Number of frames so far at effectively zero corrective impulse.
            Set to zero during every preStep(float dt) call and incremented by checkForEarlyOutIterations(Vector3 impulse).
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Constraint.CollectInvolvedEntities(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Adds entities associated with the solver item to the involved entities list.
            Ensure that sortInvolvedEntities() is called at the end of the function.
            This allows the non-batched multithreading system to lock properly.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Constraint.UpdateSolverActivity">
            <summary>
            Sets the activity state of the constraint based on the activity state of its connections.
            Called automatically by the space owning a constaint.  If a constraint is a sub-constraint that hasn't been directly added to the space,
            this may need to be called alongside the preStep from within the parent constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Constraint.CheckForEarlyOutIterations(System.Single)">
            <summary>
            Manages the early-out functionality of the solver; if too many consecutive impulses are tiny, it stops trying to solve.
            Called from applyImpulse(float dt).
            </summary>
            <param name="incrementalImpulse">This frame's calculated impulse.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.Constraint.ConnectionA">
            <summary>
            Gets or sets the first connection to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Constraint.ConnectionB">
            <summary>
            Gets or sets the second connection to the constraint.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.ISpringSettings">
            <summary>
            Implemented by constraints that support springlike behavior.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ISpringSettings.SpringSettings">
            <summary>
            Gets the spring settings used by the constraint.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Joint.maxCorrectiveVelocity">
            <summary>
            Maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Joint.maxCorrectiveVelocitySquared">
            <summary>
            Squared maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Joint.springSettings">
            <summary>
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Joint.MaxCorrectiveVelocity">
            <summary>
            Gets or sets the maximum extra velocity that the constraint will apply in an effort to correct any constraint error.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Joint.SpringSettings">
            <summary>
            Gets the spring settings used by the constraint.
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I3DImpulseConstraintWithError">
            <summary>
            Implemented by solver updateables which have a three dimensional impulse.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I3DImpulseConstraint">
            <summary>
            Implemented by solver updateables which have a three dimensional impulse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I3DImpulseConstraint.RelativeVelocity">
            <summary>
            Gets the current relative velocity of the constraint.
            Computed based on the current connection velocities and jacobians.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I3DImpulseConstraint.TotalImpulse">
            <summary>
            Gets the total impulse a constraint has applied.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I3DImpulseConstraintWithError.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I3DJacobianConstraint">
            <summary>
            Denotes a class that uses three linear jacobian axes.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.BallSocketJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a spherical joint.
            </summary>
            <param name="connectionA">First connected entity.</param>
            <param name="connectionB">Second connected entity.</param>
            <param name="anchorLocation">Location of the socket.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.BallSocketJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.BallSocketJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.BallSocketJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.BallSocketJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.BallSocketJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.BallSocketJoint.ApplyImpulse(System.Single)">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.BallSocketJoint.PreStep(System.Single)">
            <summary>
            Calculates necessary information for velocity solving.
            Called by preStep(float dt)
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.BallSocketJoint.LocalOffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.BallSocketJoint.LocalOffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.BallSocketJoint.OffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.BallSocketJoint.OffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.BallSocketJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.BallSocketJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.BallSocketJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.StaticGroup">
            <summary>
            Contains a list of static, nonmoving entities composing world geometry.
            Objects that are stored within the group will be handed over to the Space for collision handling only when there is a chance of collision.
            Entities added to a static group do not need to be otherwise manually added to the space.
            </summary>
        </member>
        <member name="T:BEPUphysics.Updateable">
            <summary>
            Identifies objects to be updated by Space.
            Update is called at the end of a space's update method.
            </summary>
        </member>
        <member name="T:BEPUphysics.ISpaceUpdateable">
            <summary>
            Provides a unified point of access for Updateables and CombinedUpdateables.
            </summary>
        </member>
        <member name="M:BEPUphysics.ISpaceUpdateable.OnAdditionToSpace(BEPUphysics.Space)">
            <summary>
            Sets up any necessary internal information when the updateable is added to the space.
            Called automatically.
            </summary>
            <param name="newSpace">New owning space of the updateable.</param>
        </member>
        <member name="M:BEPUphysics.ISpaceUpdateable.OnRemovalFromSpace">
            <summary>
            Sets up any necessary internal information when the updateable is removed from the space.
            Called automatically.
            </summary>
        </member>
        <member name="M:BEPUphysics.ISpaceUpdateable.UpdateAtEndOfFrame(System.Single)">
            <summary>
            Updates the updateable after the end of a frame.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.ISpaceUpdateable.UpdateAtEndOfUpdate(System.Single)">
            <summary>
            Updates the updateable after the end of a space update.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.ISpaceUpdateable.UpdateBeforeCollisionDetection(System.Single)">
            <summary>
            Updates the updateable after forces, collision pairs, and bounding boxes have been computed, immediately before narrow-phase collision detection tests are run.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.ISpaceUpdateable.UpdateDuringForces(System.Single)">
            <summary>
            Updates the updateable after the broad phase system executes, next to the force application system.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="P:BEPUphysics.ISpaceUpdateable.IsUpdatedSequentially">
            <summary>
            Gets and sets whether or not the updateable should be updated sequentially even in a multithreaded space.
            If this is true, the updateable can make use of the space's ThreadManager for internal multithreading.
            </summary>
        </member>
        <member name="P:BEPUphysics.ISpaceUpdateable.IsUpdating">
            <summary>
            Gets and sets whether or not the updateable should be updated by the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.ISpaceUpdateable.Space">
            <summary>
            Gets the space that owns the updateable.
            </summary>
        </member>
        <member name="F:BEPUphysics.Updateable.space">
            <summary>
            Space containing the updateable.
            </summary>
        </member>
        <member name="M:BEPUphysics.Updateable.UpdateAtEndOfFrame(System.Single)">
            <summary>
            Updates the updateable after the end of a frame.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
            <param name="timeScale">Factor of the speed of the simulation.</param>
            <param name="timeSinceLastFrame">Time since last frame in real seconds.</param>
        </member>
        <member name="M:BEPUphysics.Updateable.UpdateAtEndOfUpdate(System.Single)">
            <summary>
            Updates the updateable after the end of a space update.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Updateable.UpdateDuringForces(System.Single)">
            <summary>
            Updates the updateable after the broad phase system executes, next to the force application system.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Updateable.UpdateBeforeCollisionDetection(System.Single)">
            <summary>
            Updates the updateable after forces, collision pairs, and bounding boxes have been computed, immediately before narrow-phase collision detection tests are run.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Updateable.OnAdditionToSpace(BEPUphysics.Space)">
            <summary>
            Sets up any necessary internal information when the updateable is added to the space.
            Called automatically.
            </summary>
            <param name="newSpace">New owning space of the updateable.</param>
        </member>
        <member name="M:BEPUphysics.Updateable.OnRemovalFromSpace">
            <summary>
            Sets up any necessary internal information when the updateable is removed from the space.
            Called automatically.
            </summary>
        </member>
        <member name="P:BEPUphysics.Updateable.Space">
            <summary>
            Space containing the updateable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Updateable.IsUpdatedSequentially">
            <summary>
            Gets and sets whether or not the updateable should be updated sequentially even in a multithreaded space.
            If this is true, the updateable can make use of the space's ThreadManager for internal multithreading.
            </summary>
        </member>
        <member name="P:BEPUphysics.Updateable.IsUpdating">
            <summary>
            Gets and sets whether or not the updateable should be updated by the space.
            </summary>
        </member>
        <member name="T:BEPUphysics.IRayCastableContainer">
            <summary>
            Denotes a class which maintains lists of entities and can be queried for ray intersection.
            </summary>
        </member>
        <member name="M:BEPUphysics.IRayCastableContainer.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margins of entities.</param>
            <param name="hitEntity">Entity hit by the ray.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.IRayCastableContainer.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margins of entities.</param>
            <param name="hitEntities">List to add entities hit by the ray to.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="F:BEPUphysics.StaticGroup.CollisionRules">
            <summary>
            Defines the way in which triangles created by the static triangle group interact with other entities.
            Triangles will only be created to begin with if the collision rule between the StaticTriangleGroup and the nearby entity allows for a collision pair to be created.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticGroup.Tag">
            <summary>
            Storage object given to objects as an entity tag.
            </summary>
        </member>
        <member name="M:BEPUphysics.StaticGroup.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Constructs a container for static world geometry.
            </summary>
            <param name="cellSize">Cell width for grid used to accelerate collision detection.  A value of 5 to 10 usually works well.</param>
            <param name="timeInterval">Length of time, in real time seconds, between checks for removing old statics from the update list.</param>
            <param name="maxAge">Maximum age of a static in intervals before being removed.</param>
        </member>
        <member name="M:BEPUphysics.StaticGroup.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance the ray will travel in units of the direction's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around entities.</param>
            <param name="hitEntity">Entity hit by the ray.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <returns>Whether or not the ray intersected the target.</returns>
        </member>
        <member name="M:BEPUphysics.StaticGroup.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum length the ray will travel in units of the direction's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around entities.</param>
            <param name="hitEntities">List to add entities hit by the ray to.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <returns>Whether or not the ray intersected the target.</returns>
        </member>
        <member name="M:BEPUphysics.StaticGroup.OnAdditionToSpace(BEPUphysics.Space)">
            <summary>
            Sets the collision group of the static group when added to a space.
            </summary>
            <param name="newSpace">Space that the group was added to.</param>
        </member>
        <member name="M:BEPUphysics.StaticGroup.UpdateBeforeCollisionDetection(System.Single)">
            <summary>
            Updates the list of objects of the StaticGroup held in space.entities.
            Called automatically when needed by the owning Space.
            </summary>
            <param name="dt">Time since last frame in physical logic.</param>
        </member>
        <member name="M:BEPUphysics.StaticGroup.AddEntity(BEPUphysics.Entities.Entity)">
            <summary>
            Adds the entity to the list if it is static and not yet contained.
            </summary>
            <param name="e">Static entity to add.</param>
        </member>
        <member name="M:BEPUphysics.StaticGroup.RemoveEntity(BEPUphysics.Entities.Entity)">
            <summary>
            Removes the entity from the static group, and from the space if present.
            </summary>
            <param name="e">Entity to remove.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.TwistMotor">
            <summary>
            Attempts to achieve some defined relative twist angle between the entities.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.Motor">
            <summary>
            Superclass of constraints which do work and change the velocity of connected entities, but have no specific position target.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Motor.usedSoftness">
            <summary>
            Softness divided by the timestep to maintain timestep independence.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Motor.ComputeMaxForces(System.Single,System.Single)">
            <summary>
            Computes the maxForceDt and maxForceDtSquared fields.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I1DImpulseConstraintWithError">
            <summary>
            Implemented by solver updateables which have a one dimensional impulse.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I1DImpulseConstraint">
            <summary>
            Implemented by solver updateables which have a one dimensional impulse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I1DImpulseConstraint.RelativeVelocity">
            <summary>
            Gets the current relative velocity of the constraint.
            Computed based on the current connection velocities and jacobians.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I1DImpulseConstraint.TotalImpulse">
            <summary>
            Gets the total impulse a constraint has applied.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I1DImpulseConstraintWithError.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I1DJacobianConstraint">
            <summary>
            Denotes a class that uses a single linear jacobian axis.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="F:BEPUphysics.Constraints.TwistMotor.biasVelocity">
            <summary>
            Velocity needed to get closer to the goal.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="axisA">Twist axis attached to the first connected entity.</param>
            <param name="axisB">Twist axis attached to the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistMotor.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistMotor.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistMotor.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistMotor.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistMotor.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistMotor.SetupJointTransforms(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
            <param name="worldTwistAxisA">Twist axis in world space to attach to entity A.</param>
            <param name="worldTwistAxisB">Twist axis in world space to attach to entity B.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistMotor.ApplyImpulse(System.Single)">
            <summary>
            Solves for velocity.
            </summary>
            <param name="dt">Simulation time to next frame.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistMotor.PreStep(System.Single)">
            <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
            <param name="dt">Simulation step length.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistMotor.BasisA">
            <summary>
            Gets the basis attached to entity A.
            The primary axis represents the twist axis attached to entity A.
            The x axis and y axis represent a plane against which entity B's attached x axis is projected to determine the twist angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistMotor.BasisB">
            <summary>
            Gets the basis attached to entity B.
            The primary axis represents the twist axis attached to entity A.
            The x axis is projected onto the plane defined by localTransformA's x and y axes
            to get the twist angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, the error will be zero.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverGroup">
            <summary>
            Superclass of constraints that are composed of multiple subconstraints.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroup.#ctor">
            <summary>
            Instantiates some internal values.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroup.OnAdditionToSpace(BEPUphysics.Space)">
            <summary>
            Notifies child solver updateables that they've been to a space.
            </summary>
            <param name="newSpace">Space that the solver group has been added to.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroup.OnRemovalFromSpace">
            <summary>
            Notifies child solver updateables that they've been removed from their space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroup.CollectInvolvedEntities(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Collects the entities which are affected by the solver group and updates the internal listing.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroup.Add(BEPUphysics.SolverUpdateable)">
            <summary>
            Adds a solver updateable to the group.
            </summary>
            <param name="solverUpdateable">Solver updateable to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the SolverUpdateable to add to the SolverGroup already belongs to another SolverGroup or to a Space.</exception>
        </member>
        <member name="M:BEPUphysics.Constraints.SolverGroup.Remove(BEPUphysics.SolverUpdateable)">
            <summary>
            Removes a solver updateable from the group.
            </summary>
            <param name="solverUpdateable">Solver updateable to remove.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the SolverUpdateable to remove from the SolverGroup doesn't actually belong to this SolverGroup.</exception>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverGroup.SolverUpdateables">
            <summary>
            Gets the solver updateables managed by this solver group.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SlidingFrictionTwoAxisObsolete">
            <summary>
            Handles collision pair sliding friction.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SlidingFrictionTwoAxisObsolete.#ctor(BEPUphysics.CollisionPair)">
            <summary>
            Constructs a new linear friction constraint.
            </summary>
            <param name="pair">Collision pair owning this friction constraint.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SlidingFrictionTwoAxisObsolete.PreStep(System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Initializes the constraint for this frame.
            </summary>
            <param name="dt">Time since the last frame.</param>
            <param name="manifoldCenter">Computed center of manifold.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.ContactPenetrationConstraint">
            <summary>
            Computes the forces necessary to keep two entities from going through each other at a contact point.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.ContactPenetrationConstraint.ApplyImpulse">
            <summary>
            Computes and applies an impulse to keep the colliders from penetrating.
            </summary>
            <returns>Impulse applied.</returns>
        </member>
        <member name="P:BEPUphysics.Constraints.ContactPenetrationConstraint.NormalForce">
            <summary>
            Gets the total normal force applied by this penetration constraint to maintain the separation of the involved entities.
            </summary>
        </member>
        <member name="T:BEPUphysics.DataStructures.TinyStructList`1">
            <summary>
            Special datatype used for heapless lists without unsafe/stackalloc.
            Since reference types would require heap-side allocation and
            do not match well with this structure's ref-parameter based access,
            only structs are allowed.
            Stores a maximum of 8 entries.
            </summary>
            <typeparam name="T">Struct type to use.</typeparam>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.ToString">
            <summary>
            Creates a string representation of the list.
            </summary>
            <returns>String representation of the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Add(`0@)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be added.
            Will return false when the list is full.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Get(System.Int32,`0@)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">Index to retrieve.</param>
            <param name="item">Retrieved item.</param>
            <returns>Whether or not the index was valid.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.IndexOf(`0@)">
            <summary>
            Gets the index of the item in the list, if it is present.
            </summary>
            <param name="item">Item to look for.</param>
            <returns>Index of the item, if present.  -1 otherwise.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Remove(`0@)">
            <summary>
            Tries to remove an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item existed in the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <returns>Whether or not the item could be removed.
            Returns false if the index is out of bounds.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Replace(System.Int32,`0@)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="index">Index to replace.</param>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be replaced.
            Returns false if the index is invalid.</returns>
        </member>
        <member name="P:BEPUphysics.DataStructures.TinyStructList`1.Count">
            <summary>
            Gets the current number of elements in the list.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.VariableLinearSpeedCurve">
            <summary>
            Wraps a curve that is traveled along with arbitrary defined linear speed.
            </summary>
            <remarks>
            The speed curve should be designed with the wrapped curve's times in mind.
            Speeds will be sampled based on the wrapped curve's interval.</remarks>
        </member>
        <member name="T:BEPUphysics.Paths.VariableSpeedCurve`1">
            <summary>
            Curve that wraps another curve and travels along it with specified speeds.
            </summary>
            <typeparam name="TValue">Type of the value of the wrapped curve.</typeparam>
        </member>
        <member name="T:BEPUphysics.Paths.SpeedControlledCurve`1">
            <summary>
            Wrapper that controls the speed at which a curve is traversed.
            </summary>
            <remarks>
            <para>
            Even if a curve is evaluated at linearly increasing positions,
            the distance between consecutive values can be different.  This
            has the effect of a curve-following object having variable velocity.
            </para>
            <para>
            To counteract the variable velocity, this wrapper samples the curve
            and produces a reparameterized, distance-based curve.  Changing the
            evaluated curve position will linearly change the value.
            </para>
            </remarks>
        </member>
        <member name="T:BEPUphysics.Paths.Path`1">
            <summary>
            Superclass of a variety of classes that can be evaluated at a time to retrieve a value associated with that time.
            </summary>
            <typeparam name="TValue">Type of the value of the path.</typeparam>
        </member>
        <member name="M:BEPUphysics.Paths.Path`1.Evaluate(System.Double,`0@)">
            <summary>
            Computes the value of the path at a given time.
            </summary>
            <param name="time">Time at which to evaluate the path.</param>
            <param name="value">Path value at the given time.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Path`1.GetPathBoundsInformation(System.Single@,System.Single@)">
            <summary>
            Gets the starting and ending times of the path.
            </summary>
            <param name="startingTime">Beginning time of the path.</param>
            <param name="endingTime">Ending time of the path.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Path`1.Evaluate(System.Double)">
            <summary>
            Computes the value of the path at a given time.
            </summary>
            <param name="time">Time at which to evaluate the path.</param>
            <returns>Path value at the given time.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.#ctor">
            <summary>
            Constructs a new speed controlled curve.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.#ctor(BEPUphysics.Paths.Curve{`0})">
            <summary>
            Constructs a new speed-controlled curve.
            </summary>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.#ctor(BEPUphysics.Paths.Curve{`0},System.Int32)">
            <summary>
            Constructs a new speed-controlled curve.
            </summary>
            <param name="curve">Curve to wrap.</param>
            <param name="samplesPerInterval">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetSpeedAtCurveTime(System.Single)">
            <summary>
            Gets the desired speed at a given time.
            </summary>
            <param name="time">Time to check for speed.</param>
            <returns>Speed at the given time.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.Evaluate(System.Double,`0@)">
            <summary>
            Computes the value of the curve at a given time.
            </summary>
            <param name="time">Time to evaluate the curve at.</param>
            <param name="value">Value of the curve at the given time.</param>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetPathBoundsInformation(System.Single@,System.Single@)">
            <summary>
            Gets the starting and ending times of the path.
            </summary>
            <param name="startingTime">Beginning time of the path.</param>
            <param name="endingTime">Ending time of the path.</param>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.ResampleCurve">
            <summary>
            Forces a recalculation of curve samples.
            This needs to be called if the wrapped curve
            is changed.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetDistance(`0,`0)">
            <summary>
            Computes the distance between the two values.
            </summary>
            <param name="start">Starting value.</param>
            <param name="end">Ending value.</param>
            <returns>Distance between the values.</returns>
        </member>
        <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.Curve">
            <summary>
            Gets or sets the curve wrapped by this instance.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.PostLoop">
            <summary>
            Defines how the curve is sampled when the evaluation time exceeds the final control point.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.PreLoop">
            <summary>
            Defines how the curve is sampled when the evaluation time exceeds the beginning control point.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.SamplesPerInterval">
            <summary>
            Gets or sets the number of samples to use per interval in the curve.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.VariableSpeedCurve`1.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{`0})">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.VariableSpeedCurve`1.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{`0},System.Int32)">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="M:BEPUphysics.Paths.VariableSpeedCurve`1.GetSpeedAtCurveTime(System.Single)">
            <summary>
            Gets the speed at a given time on the wrapped curve.
            </summary>
            <param name="time">Time to evaluate.</param>
            <returns>Speed at the given time.</returns>
        </member>
        <member name="P:BEPUphysics.Paths.VariableSpeedCurve`1.SpeedCurve">
            <summary>
            Gets or sets the path that defines the speeds at given locations.
            The speed curve will be sampled at times associated with the wrapped curve.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.VariableLinearSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Constructs a new variable speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.VariableLinearSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Vector3},System.Int32)">
            <summary>
            Constructs a new variable speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="T:BEPUphysics.Paths.CardinalSpline3D">
            <summary>
            Cardinal spline implementation of the 3D hermite curve.  Uses a tension parameter to control
            the tightness of the curve.  When tension is zero, a cardinal spline acts like a Catmull-Rom spline.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.HermiteCurve3D">
            <summary>
            Defines a 3D curve using hermite interpolation.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.Curve`1">
            <summary>
            Manages a curve in 3D space that supports interpolation.
            </summary>
            <typeparam name="TValue">Type of values in the curve.</typeparam>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.#ctor">
            <summary>
            Constructs a new 3D curve.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.ModifyTime(System.Double,System.Single,System.Single,BEPUphysics.Paths.CurveEndpointBehavior,BEPUphysics.Paths.CurveEndpointBehavior)">
            <summary>
            Converts an unbounded time to a time within the curve's interval using the 
            endpoint behavior.
            </summary>
            <param name="time">Time to convert.</param>
            <param name="intervalBegin">Beginning of the curve's interval.</param>
            <param name="intervalEnd">End of the curve's interval.</param>
            <param name="preLoop">Looping behavior of the curve before the first endpoint's time.</param>
            <param name="postLoop">Looping behavior of the curve after the last endpoint's time.</param>
            <returns>Time within the curve's interval.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.Evaluate(System.Int32,System.Single,`0@)">
            <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
            <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
            <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
            <param name="value">Value at the given location.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Gets the curve's bounding index information.
            </summary>
            <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
            <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.Evaluate(System.Double,`0@)">
            <summary>
            Computes the value of the curve at a given time.
            </summary>
            <param name="time">Time at which to evaluate the curve.</param>
            <param name="value">Curve value at the given time.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.GetPathBoundsInformation(System.Single@,System.Single@)">
            <summary>
            Gets the starting and ending times of the path.
            </summary>
            <param name="startingTime">Beginning time of the path.</param>
            <param name="endingTime">Ending time of the path.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.GetCurveBoundsInformation(System.Single@,System.Single@,System.Int32@,System.Int32@)">
            <summary>
            Gets information about the curve's total active interval.
            These are not always the first and last endpoints in a curve.
            </summary>
            <param name="firstIndexTime">Time of the first index.</param>
            <param name="lastIndexTime">Time of the last index.</param>
            <param name="minIndex">First index in the reachable curve.</param>
            <param name="maxIndex">Last index in the reachable curve.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.GetPreviousIndex(System.Double)">
            <summary>
            Computes the indices of control points surrounding the time.
            If the time is equal to a control point's time, indexA will
            be that control point's index.
            </summary>
            <param name="time">Time to index.</param>
            <returns>Index prior to or equal to the given time.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{`0},System.Int32)">
            <summary>
            Called when a control point is added.
            </summary>
            <param name="curveControlPoint">New control point.</param>
            <param name="index">Index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{`0},System.Int32)">
            <summary>
            Called when a control point is removed.
            </summary>
            <param name="curveControlPoint">Removed control point.</param>
            <param name="oldIndex">Index of the control point before it was removed.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{`0},System.Int32,System.Int32)">
            <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
            <param name="oldIndex">Old index of the control point.</param>
            <param name="newIndex">New index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.Curve`1.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{`0})">
            <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
        </member>
        <member name="P:BEPUphysics.Paths.Curve`1.ControlPoints">
            <summary>
            Gets the list of control points in the curve.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.Curve`1.PostLoop">
            <summary>
            Defines how the curve is sampled when the evaluation time exceeds the final control point.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.Curve`1.PreLoop">
            <summary>
            Defines how the curve is sampled when the evaluation time exceeds the beginning control point.
            </summary>
        </member>
        <member name="F:BEPUphysics.Paths.HermiteCurve3D.tangents">
            <summary>
            Internal list of curve tangents.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.Evaluate(System.Int32,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
            <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
            <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
            <param name="value">Value at the given location.</param>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32)">
            <summary>
            Called when a control point is added.
            </summary>
            <param name="curveControlPoint">New control point.</param>
            <param name="index">Index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32)">
            <summary>
            Called when a control point is removed.
            </summary>
            <param name="curveControlPoint">Removed control point.</param>
            <param name="oldIndex">Index of the control point before it was removed.</param>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32)">
            <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
            <param name="oldIndex">Old index of the control point.</param>
            <param name="newIndex">New index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.HermiteCurve3D.ComputeTangents">
            <summary>
            Computes the tangent entries in the curve according to some type of hermite curve.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.HermiteCurve3D.Tangents">
            <summary>
            Gets the tangents used by the curve per control point.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.CardinalSpline3D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Gets the curve's bounding index information.
            </summary>
            <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
            <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
        </member>
        <member name="P:BEPUphysics.Paths.CardinalSpline3D.Tension">
            <summary>
            Gets or sets the tension parameter of the cardinal spline.
            A value of 0 acts like a Catmull-Rom spline, while a 
            value of 1 produces 0-length tangents.
            </summary>
        </member>
        <member name="T:BEPUphysics.BroadPhases.DynamicBinaryHierarchy">
            <summary>
            Broadphase based on a continually refreshed tree of all entities in the space.  Supports fast updating, raycasting, insertion, and slightly slower removal.
            Handles piles and clumps much better than the uniform grid systems.
            </summary>
        </member>
        <member name="T:BEPUphysics.BroadPhases.BroadPhase">
            <summary>
            Partitioning system used by Spaces to avoid doing detailed tests on geometry unnecessarily.
            Different broadphases can be used by using the (Space).broadPhase property.
            </summary>
        </member>
        <member name="F:BEPUphysics.BroadPhases.BroadPhase.Space">
            <summary>
            Space using this system.
            </summary>
        </member>
        <member name="F:BEPUphysics.BroadPhases.BroadPhase.LockerBroadPhaseUpdating">
            <summary>
            Synchronization object which is write locked during the broadphase's updateCollisionPairs method and read locked in any other methods which could interfere.
            </summary>
        </member>
        <member name="F:BEPUphysics.BroadPhases.BroadPhase.AllowMultithreading">
            <summary>
            Uses the multithreading version of the broadphase if available.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.#ctor">
            <summary>
            Initializes the broad phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.UpdateCollisionPairs(System.Single)">
            <summary>
            Updates the collision pairs of the system.
            Called automatically at the beginning of an update when used by a Space.
            </summary>
            <param name="dt">Time elapsed in seconds since the last update for physics logic.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.RemoveInvalidCollisionPairs">
            <summary>
            Iterates through the collision pair list, removing no longer overlapping pairs.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.IsValidPair(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Whether or not the candidate collision pair is valid, which means
            it is active, its bounding boxes overlap, and the collision rules between the entities allow for a collision pair to be created.
            </summary>
            <param name="a">First entity of the candidate collision pair.</param>
            <param name="b">First entity of the candidate collision pair.</param>
            <returns>Whether or not the pair is a valid candidate.</returns>
        </member>
        <member name="F:BEPUphysics.BroadPhases.BroadPhase.CalculateCollisionRuleCallback">
            <summary>
            CollisionRuleCalculator method being used by the broad phase.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.AddCollisionPair(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Appropriately handles the addition of the collision pair to the space, hiding compound body handling.
            </summary>
            <param name="e1">First entity to add.</param>
            <param name="e2">Second entity to add.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.RemoveCollisionPair(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Removes a collision pair that has e1 and e2 as its colliders.
            </summary>
            <param name="e1">First entity of the pair.</param>
            <param name="e2">Second entity of the pair.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.GetEntities(Microsoft.Xna.Framework.BoundingBox,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns entities intersecting or contained within the bounding shape.
            </summary>
            <param name="box">Bounding box to check.</param>
            <param name="entities">List of entities to be filled with entities within the bounding shape.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.GetEntities(Microsoft.Xna.Framework.BoundingFrustum,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns entities intersecting or contained within the bounding shape.
            </summary>
            <param name="frustum">Bounding frustum to check.</param>
            <param name="entities">List of entities to be filled with entities within the bounding shape.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.GetEntities(Microsoft.Xna.Framework.BoundingSphere,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns entities intersecting or contained within the bounding shape.
            </summary>
            <param name="sphere">Bounding sphere to check.</param>
            <param name="entities">List of entities to be filled with entities within the bounding shape.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.AddEntity(BEPUphysics.Entities.Entity)">
            <summary>
            Notifies the broadphase to consider the entity.
            </summary>
            <param name="e">Entity to add.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.RemoveEntity(BEPUphysics.Entities.Entity)">
            <summary>
            Removes the entity from any local broadphase storage.
            </summary>
            <param name="e">Entity to remove.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around entities.</param>
            <param name="hitEntity">Entity hit by the ray.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BroadPhase.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around entities.</param>
            <param name="hitEntities">List to add entities hit by the ray to.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
        </member>
        <member name="T:BEPUphysics.BroadPhases.BroadPhase.CollisionRuleCalculator">
            <summary>
            Represents a function that takes two entities and determines the CollisionRule to use between them.
            </summary>
            <param name="a">First entity of the pair.</param>
            <param name="b">Second entity of the pair.</param>
            <returns>CollisionRule to use in the CollisionPair between these two entities.</returns>
        </member>
        <member name="F:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.MaximumAllowedVolumeFactor">
            <summary>
            When an internal node is revalidated, its volume is stored.  When a node's volume exceeds its stored volume multiplied by this factor, it is revalidated again.
            </summary>
        </member>
        <member name="F:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.MaximumChildEntityLoad">
            <summary>
            Maximum fraction of a parent's entities that a child can inherit.
            If a child has as much or more, the validation process is done over again to ensure a more even split.
            </summary>
        </member>
        <member name="F:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.MaximumEntitiesInLeaves">
            <summary>
            The maximum number of entities present in the leaf nodes of the hierarchy.
            </summary>
        </member>
        <member name="F:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.MinimumNodeEntitiesRequiredToMultithread">
            <summary>
            The number of entities needed in a particular node to use the multithreaded reconstruction method on it.
            If the node has less, the current thread does the remainder of the subtree itself.
            This only applies if multithreading is currently being used.
            </summary>
        </member>
        <member name="F:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.Root">
            <summary>
            Highest parent in the hierarchy.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.#ctor">
            <summary>
            Constructs a new instance of the hierarchy and sets up the root node.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.AddEntity(BEPUphysics.Entities.Entity)">
            <summary>
            Adds an entity to the hierarchy.  Called automatically by the Space owning this broad phase system when an entity is added.
            </summary>
            <param name="e">Entity to add.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.GetEntities(Microsoft.Xna.Framework.BoundingBox,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Collects all entities with bounding boxes which intersect the given bounding box.
            </summary>
            <param name="box">Bounding box to test against the world.</param>
            <param name="entities">Entities of the space which intersect the bounding box.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.GetEntities(Microsoft.Xna.Framework.BoundingFrustum,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Collects all entities with bounding boxes which intersect the given frustum.
            </summary>
            <param name="frustum">Frustum to test against the world.</param>
            <param name="entities">Entities of the space which intersect the frustum.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.GetEntities(Microsoft.Xna.Framework.BoundingSphere,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Collects all entities with bounding boxes which intersect the given sphere.
            </summary>
            <param name="sphere">Sphere to test against the world.</param>
            <param name="entities">Entities of the space which intersect the sphere.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Finds all intersections between the ray and the entities of the space.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance the ray will travel in units of the direction's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around entities.</param>
            <param name="hitEntities">List of entities hit by the ray.</param>
            <param name="hitLocations">List of locations hit by the ray.</param>
            <param name="hitNormals">List of normals at the hit locations.</param>
            <param name="tois">List of the times of impact at the hit locations.</param>
            <returns>Whether or not the ray intersected a target.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the entities of the space.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance the ray will travel in units of the direction's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around entities.</param>
            <param name="hitEntity">Entity hit by the ray.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <returns>Whether or not the ray intersected a target.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.RemoveEntity(BEPUphysics.Entities.Entity)">
            <summary>
            Removes an entity from the hierarchy.  Called automatically by the Space owning this broad phase system when an entity is removed.
            </summary>
            <param name="e">Entity to add.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.UpdateCollisionPairs(System.Single)">
            <summary>
            Updates and revalidates the tree before performing a collision pair finding test.  Called automatically by the Space owning this broad phase system when appropriate.
            </summary>
            <param name="dt">Time between simulation updates in seconds.</param>
        </member>
        <member name="T:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.DynamicBinaryHierarchyNode">
            <summary>
            Node within the binary hierarchy.
            </summary>
        </member>
        <member name="F:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.DynamicBinaryHierarchyNode.BoundingBox">
            <summary>
            Bounding box all entities that are children of the node.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.DynamicBinaryHierarchyNode.#ctor">
            <summary>
            Constructs a DBH node.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.DynamicBinaryHierarchyNode.CollectBoundingBoxLines(System.Collections.Generic.List{Microsoft.Xna.Framework.Graphics.VertexPositionColor},System.Boolean)">
            <summary>
            Collects all of the endpoints of lines of bounding boxes within the hierarchy.
            </summary>
            <param name="lineEndpoints">Endpoints of lines of bounding boxes within the hierarchy.</param>
            <param name="includeInternalNodes">Whether or not to collect the lines from internal node bounding boxes.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.DynamicBinaryHierarchy.DynamicBinaryHierarchyNode.AddEntity(BEPUphysics.Entities.Entity)">
            <exception cref="T:System.InvalidOperationException">Thrown when the entity to add to the DynamicBinaryHierarchy has an invalid state.</exception>
        </member>
        <member name="T:BEPUphysics.Vehicle.WheelBrake">
            <summary>
            Attempts to resist rolling motion of a vehicle.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.ISolverSettings">
            <summary>
            Implemented by classes which have solver settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ISolverSettings.SolverSettings">
            <summary>
            Gets the solver settings for this constraint.
            </summary>
        </member>
        <member name="F:BEPUphysics.Vehicle.WheelBrake.DefaultRollingFrictionBlender">
            <summary>
            Default blender used by WheelRollingFriction constraints.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelBrake.BlendFriction(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,System.Object)">
            <summary>
            Computes the friction to use between the vehicle and support for a wheel.
            </summary>
            <param name="vehicle">Vehicle owning the wheel.</param>
            <param name="support">Supporting entity.</param>
            <param name="wheelFriction">Friction coefficient of the wheel.</param>
            <param name="supportFriction">Friction coefficient of the supporting entity.</param>
            <param name="extraInfo">Any extra information to be considered.</param>
            <returns>Blended friction coefficient.</returns>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelBrake.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new rolling friction object for a wheel.
            </summary>
            <param name="dynamicBrakingFrictionCoefficient">Coefficient of dynamic friction of the wheel for friction when the brake is active.</param>
            <param name="staticBrakingFrictionCoefficient">Coefficient of static friction of the wheel for friction when the brake is active.</param>
            <param name="rollingFrictionCoefficient">Coefficient of friction of the wheel for rolling friction when the brake isn't active.</param>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.BlendedCoefficient">
            <summary>
            Gets the coefficient of rolling friction between the wheel and support.
            This coefficient is the blended result of the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.DynamicBrakingFrictionCoefficient">
            <summary>
            Gets or sets the coefficient of braking dynamic friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            This coefficient is used instead of the rollingFrictionCoefficient when 
            isBraking is true.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.FrictionAxis">
            <summary>
            Gets the axis along which rolling friction is applied.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.FrictionBlender">
            <summary>
            Gets or sets the function used to blend the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.IsBraking">
            <summary>
            Gets or sets whether or not the wheel is braking.
            When set to true, the brakingFrictionCoefficient is used.
            When false, the rollingFrictionCoefficient is used.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.RollingFrictionCoefficient">
            <summary>
            Gets or sets the coefficient of rolling friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            This coefficient is used instead of the brakingFrictionCoefficient when 
            isBraking is false.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.StaticBrakingFrictionCoefficient">
            <summary>
            Gets or sets the coefficient of static dynamic friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            This coefficient is used instead of the rollingFrictionCoefficient when 
            isBraking is true.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.StaticFrictionVelocityThreshold">
            <summary>
            Gets or sets the velocity under which the coefficient of static friction will be used instead of the dynamic one.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.TotalImpulse">
            <summary>
            Gets the force 
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.Wheel">
            <summary>
            Gets the wheel that this rolling friction applies to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelBrake.SolverSettings">
            <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
        </member>
        <member name="T:BEPUphysics.Space">
            <summary>
            A physical plane of existence for entities to interact in.
            Manages the updating of all physics engine components.
            </summary>
            <remarks>
            <para>
            The primary access points for the space are its add and remove methods and the update method.
            </para>
            <para>
            A variety of physics types (Entities, SolverUpdateables, Updateables) can be managed by the space using
            overloads of the add and remove methods.  To set up a simulation, start by adding some things to it.
            </para>
            <para>
            The update method moves the simulation forward in time.  Calling the Space's update from a game's update method
            will keep the simulation moving.
            </para>
            </remarks>
        </member>
        <member name="M:BEPUphysics.Space.#ctor">
            <summary>
            Constructs an empty Space using the default DynamicBinaryHierarchy broadphase.
            </summary>
        </member>
        <member name="M:BEPUphysics.Space.Add(BEPUphysics.Entities.Entity)">
            <summary>
            Adds the given entity to the space for updating.
            </summary>
            <param name="entity">Entity to be added.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity to be added already belongs to another space or a compound body.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Remove(BEPUphysics.Entities.Entity)">
            <summary>
            Removes the entity from the space.
            </summary>
            <param name="entity">Entity to remove.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity to remove does not belong to this space, or belongs to no space.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Add(BEPUphysics.SolverUpdateable)">
            <summary>
            Adds the given solver item to the space for updating.
            </summary>
            <param name="solverItem">Solver item to be added.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the solver item to be added already belongs to a Space or a SolverGroup.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Remove(BEPUphysics.SolverUpdateable)">
            <summary>
            Removes the given solver item from the space.
            </summary>
            <param name="solverItem">Solver item to be removed.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the solver item to be removed does not belong to this Space or it belongs to a SolverGroup.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Add(BEPUphysics.Constraints.Constraint)">
            <summary>
            Adds the given constraint to the space for updating.
            </summary>
            <param name="constraint">Constraint to be added.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the constraint to be added already belongs to a Space or a SolverGroup.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Remove(BEPUphysics.Constraints.Constraint)">
            <summary>
            Removes the constraint from the space.
            </summary>
            <param name="constraint">Constraint to be removed.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the constraint to be removed belongs to a different or no space.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Add(BEPUphysics.CombinedUpdateable)">
            <summary>
            Adds the combined updateable to the space for management.
            </summary>
            <param name="updateable">Updateable to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the updateable to be added already belongs to a Space or a SolverGroup.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Remove(BEPUphysics.CombinedUpdateable)">
            <summary>
            Removes the combined updateable from the space.
            Called automatically when removed.
            </summary>
            <param name="updateable">Updateable to remove.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the updateable to be removed does not belong to this space.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Add(BEPUphysics.ISpaceUpdateable)">
            <summary>
            Adds the ISpaceUpdateable to the space.
            </summary>
            <param name="updateable">Updateable to remove.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the updateable to add already belongs to a Space.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Remove(BEPUphysics.ISpaceUpdateable)">
            <summary>
            Removes the ISpaceUpdateable from the space.
            </summary>
            <param name="updateable">Updateable to remove.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the updateable to remove does not belong to this space.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Add(BEPUphysics.Updateable)">
            <summary>
            Adds the updateable to the space for management.
            </summary>
            <param name="updateable">Updateable to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the updateable to be added already belongs to a space.</exception>
        </member>
        <member name="M:BEPUphysics.Space.Remove(BEPUphysics.Updateable)">
            <summary>
            Removes the updateable from the space.
            </summary>
            <param name="updateable">Updateable to remove.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the updateable to be removed does not belong to this space.</exception>
        </member>
        <member name="M:BEPUphysics.Space.AddCollisionPair(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,BEPUphysics.CollisionRule)">
            <summary>
            Adds a collision pair for the two entities.
            </summary>
            <param name="a">First entity to add.</param>
            <param name="b">Second entity to add.</param>
            <param name="rule">Collision rule to oversee the pair.</param>
        </member>
        <member name="M:BEPUphysics.Space.RemoveCollisionPair(BEPUphysics.CollisionPair)">
            <summary>
            Removes the given collision pair from the space.
            </summary>
            <param name="collisionPair">Collision pair to remove.</param>
        </member>
        <member name="M:BEPUphysics.Space.RemoveCollisionPair(System.Int32)">
            <summary>
            Removes the given collision pair from the space.
            </summary>
            <param name="i">Index of the collision pair to remove.</param>
        </member>
        <member name="M:BEPUphysics.Space.IsCollisionPairPresent(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Determines whether or not there is a collision pair between the two bodies.  This means that their AABB's are intersecting and that they can collide (correct filter groups, etc.).
            </summary>
            <param name="a">First entity of the pair to check.</param>
            <param name="b">Second entity of the pair to check.</param>
            <returns>Whether or not the pair is present.</returns>
        </member>
        <member name="M:BEPUphysics.Space.AddToRemovalList(BEPUphysics.ISpaceUpdateable)">
            <summary>
            Removes the updateable at the next oppurtunity.
            Used when an updateable is removing itself from the listing during its update phase.
            </summary>
            <param name="toRemove">Updateable to remove.</param>
        </member>
        <member name="M:BEPUphysics.Space.AddToRemovalList(BEPUphysics.SolverUpdateable)">
            <summary>
            Removes the solver updateable at the next oppurtunity.
            Used when an updateable is removing itself from the listing during its update phase.
            </summary>
            <param name="toRemove">Updateable to remove.</param>
        </member>
        <member name="M:BEPUphysics.Space.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the environment and all objects within it.
            </summary>
            <param name="gameTime">A snapshot of game timings, used to calculate the time since the previous frame.</param>
        </member>
        <member name="M:BEPUphysics.Space.Update(System.Single)">
            <summary>
            Updates the environment and all objects within it.
            </summary>
            <param name="timeSinceLastFrame">Time elapsed since the last frame.</param>
            <exception cref="T:System.ArithmeticException">Thrown when some part of the engine has been corrupted with invalid states, usually float.NaN's.</exception>
        </member>
        <member name="F:BEPUphysics.Space.eventfulEventManagers">
            <summary>
            List of event managers that currently handle buffered events.
            </summary>
        </member>
        <member name="M:BEPUphysics.Space.UpdateWithInternalTimeSteps(System.Single)">
            <summary>
            Updates the environment and all objects within it, using the appropriate method defined by simulationSettings.
            </summary>
            <param name="timeSinceLastFrame">Time elapsed since the last drawn frame.</param>
        </member>
        <member name="M:BEPUphysics.Space.UpdateWithoutInternalTimeSteps">
            <summary>
            Updates the environment and all objects within it, using the appropriate method defined by simulationSettings.
            </summary>
        </member>
        <member name="M:BEPUphysics.Space.UpdateWithInternalTimeStepsMultithreaded(System.Single)">
            <summary>
            Updates the environment and all objects within it, using the appropriate method defined by simulationSettings.
            </summary>
            <param name="timeSinceLastFrame">Time elapsed since the last drawn frame.</param>
        </member>
        <member name="M:BEPUphysics.Space.UpdateWithoutInternalTimeStepsMultithreaded">
            <summary>
            Updates the environment and all objects within it, using the appropriate method defined by simulationSettings.
            </summary>
        </member>
        <member name="M:BEPUphysics.Space.ForceBufferedStateUpdate">
            <summary>
            <para>Forces all entity buffered states to be immediately updated to reflect internal values.
            No interpolation will be applied.</para>
            <para>Avoid calling this except when absolutely necessary.  Buffered states are already updated each frame by the engine.</para>
            </summary>
        </member>
        <member name="M:BEPUphysics.Space.ForceWriteBufferFlush">
            <summary>
            <para>Forces all buffered entity state writes to be immediately applied.</para>
            <para>Avoid calling this except when absolutely necessary.  Writes are already flushed each frame by the engine.</para>
            </summary>
        </member>
        <member name="M:BEPUphysics.Space.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and everything in the space.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margins of entities.</param>
            <param name="hitEntity">Entity hit by the ray.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <returns>Whether or not the ray intersected any target.</returns>
        </member>
        <member name="M:BEPUphysics.Space.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Gets all intersections between the ray and the space.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margins of entities.</param>
            <param name="hitEntities">List to add entities hit by the ray to.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <returns>Whether or not the ray intersected any target.</returns>
        </member>
        <member name="M:BEPUphysics.Space.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean)">
            <summary>
            Determines whether or not the ray intersects anything in the space.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margins of entities.</param>
            <returns>Whether or not the ray intersected any target.</returns>
        </member>
        <member name="M:BEPUphysics.Space.Dispose">
            <summary>
            Cleans up any latent resources used by the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.SimulationSettings">
            <summary>
            Gets or sets the tweakable settings for this space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.Entities">
            <summary>
            Gets the list of entities within the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.SolverUpdateables">
            <summary>
            Gets the list of solver updateables belonging to the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.DynamicEntities">
            <summary>
            Gets the list of dynamically simulated objects within the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.CollisionPairs">
            <summary>
            Gets the list of all current collision pairs.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.Updateables">
            <summary>
            Gets the list of updateables managed by the space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.RayCastableUpdateables">
            <summary>
            Gets the list of objects managed by the space which implement raycasting functionality.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.RayCastableUpdateablesWithoutMargins">
            <summary>
            Gets the list of updateables in the space which implement raycasting functionality, but cannot include collision margins.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.SimulationIslands">
            <summary>
            Gets the list of simulation islands.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.MotionStateManager">
            <summary>
            Gets the motion state manager which gives access to arrays and lists containing entity motion states.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.LockerUpdate">
            <summary>
            Gets a synchronizing object which can be used to lock a section of code so it will not execute while the engine is in its update method.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.LockerEntities">
            <summary>
            Gets a synchronizing object which can be used to lock a section of code so it will not execute while another thread is dealing with the entities list.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.LockerSolverUpdateables">
            <summary>
            Gets a synchronizing object which can be used to lock a section of code so it will not execute while another thread is dealing with the solver items list.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.LockerCollisionPairs">
            <summary>
            Gets a synchronizing object which can be used to lock a section of code so it will not execute while another thread is dealing with the collision pairs list.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.LockerUpdateables">
            <summary>
            Gets a synchronizing object which can be used to lock a section of code so it will not execute while another thread is dealing with the updateables lists.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.BroadPhase">
            <summary>
            Gets and sets the broadphase system to be used.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.ThreadManager">
            <summary>
            Gets or sets the thread manager of the Space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.UseMultithreadedUpdate">
            <summary>
            Gets and sets whether or not to use multiple threads for internal updating systems.
            The space's thread manager should be given some threads to work with prior to enabling multithreaded updating.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.AllowMultithreadedSolver">
            <summary>
            Gets or sets whether or not to use the multithreaded solver when <see cref="P:BEPUphysics.Space.UseMultithreadedUpdate"></see> is true.
            While leaving it enabled is recommended, the non-batched multithreaded solver can introduce nondeterminism into the simulation.
            </summary>
        </member>
        <member name="P:BEPUphysics.Space.UseBatchedMultithreadingSolver">
            <summary>
            If enabled, the engine will use batched solving.  This improves scaling for manycore systems but can have significant overhead.
            This version of solving is deterministic.
            </summary>
        </member>
        <member name="T:BEPUphysics.FloatingBody">
            <summary>
            Wrapping object for a physically simulated entity floating in the fluid.
            </summary>
        </member>
        <member name="M:BEPUphysics.FloatingBody.Equals(System.Object)">
            <summary>
            Checks whether or not the two floating bodies are based on the same entity.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>Whether or not the two floating bodies use the same entity.</returns>
        </member>
        <member name="M:BEPUphysics.FloatingBody.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns>Hashcode for the object.</returns>
        </member>
        <member name="T:BEPUphysics.FluidVolume">
            <summary>
            Volume in which physically simulated objects have a buoyancy force applied to them based on their density and volume.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.Position">
            <summary>
            Position of a point on the plane representing the surface of the water.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.Normal">
            <summary>
            Normal of the surface of the water.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.D">
            <summary>
            Distance of the plane representing the surface along the normal.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.BoundingBox">
            <summary>
            Bounding box surrounding the surface tris and entire depth of the object.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.MaxDepth">
            <summary>
            Maximum depth of the fluid from the surface.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.Density">
            <summary>
            Density of the fluid represented in the volume.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.ExtraBoundingBoxSize">
            <summary>
            Additional space to be added to the bounding box of the fluid in each direction.
            Defaults to 5.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.floatingBodies">
            <summary>
            Bodies currently being compared against the fluid.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.alreadyContainedEntities">
            <summary>
            Entities currently stored within the fluid volume.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.SamplePointsPerBoundingBoxDimension">
            <summary>
            Number of points along each of the X, Y, and Z axes used in determining submerged volume of bodies.
            Defaults to 8.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.LinearDamping">
            <summary>
            Fraction by which to reduce the linear momentum of floating objects each update.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.AngularDamping">
            <summary>
            Fraction by which to reduce the angular momentum of floating objects each update.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.FlowDirection">
            <summary>
            Direction in which to exert force on objects within the fluid.  Flow force is in units of the direction, so it is recommended that the direction is normalized.
            flowForce and maxFlowSpeed must have valid values as well for the flow to work.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.FlowForce">
            <summary>
            Magnitude of the flow's force, in units of flow direction.
            flowDirection and maxFlowSpeed must have valid values as well for the flow to work.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.MaxFlowSpeed">
            <summary>
            Maximum speed of the flow; objects will not be accelerated by the flow force beyond this speed.
            flowForce and flowDirection must have valid values as well for the flow to work.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.timeSinceLastBodyCleanUp">
            <summary>
            Time elapsed since the last time entries in the bodies list were verified for bounding box intersection.
            </summary>
        </member>
        <member name="F:BEPUphysics.FluidVolume.Triangles">
            <summary>
            List of coplanar triangles composing the surface of the fluid.
            </summary>
        </member>
        <member name="M:BEPUphysics.FluidVolume.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3[]},System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a fluid volume.
            </summary>
            <param name="pos">Point on the plane representing the surface of the fluid.</param>
            <param name="norm">Normal of the plane representing the surface of the fluid; usually opposite gravity.</param>
            <param name="tris">List of triangles composing the surface of the fluid.  Set up as a list of length 3 arrays of Vector3's.</param>
            <param name="deep">Depth of the fluid back along the surface normal.</param>
            <param name="fluidDensity">Density of the fluid represented in the volume.</param>
            <param name="samplesPerDimension">Number of points along each of the X, Y, and Z axes used in determining submerged volume of bodies.  
            Defaults to 8; higher values provide more accurate results at quickly increasing costs.
            Very low density objects generally require more accuracy to look appropriate.</param>
            <param name="linearDamp">Fraction by which to reduce the linear momentum of floating objects each update, in addition to any of the body's own damping.</param>
            <param name="angularDamp">Fraction by which to reduce the angular momentum of floating objects each update, in addition to any of the body's own damping.</param>
        </member>
        <member name="M:BEPUphysics.FluidVolume.RecalculateBoundingBox">
            <summary>
            Recalculates the bounding box of the fluid based on its depth, surface normal, and surface triangles.
            </summary>
        </member>
        <member name="M:BEPUphysics.FluidVolume.Add(BEPUphysics.Entities.Entity)">
            <summary>
            Adds the entity to the currently simulated list and determines a set of points within the object.
            </summary>
            <param name="e">Entity to add.</param>
        </member>
        <member name="M:BEPUphysics.FluidVolume.Remove(BEPUphysics.Entities.Entity)">
            <summary>
            Removes the entity from the fluid's monitoring.
            </summary>
            <param name="e">Entity to remove.</param>
        </member>
        <member name="M:BEPUphysics.FluidVolume.SetGravity(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Forces the fluid to use the specified gravity over the space's gravity.
            </summary>
            <param name="gravity">Gravity to use.</param>
        </member>
        <member name="M:BEPUphysics.FluidVolume.UseSpaceGravity">
            <summary>
            Resets the fluid to use the space's gravity.
            </summary>
        </member>
        <member name="M:BEPUphysics.FluidVolume.UpdateDuringForces(System.Single)">
            <summary>
            Applies buoyancy forces to appropriate objects.
            Called automatically when needed by the owning Space.
            </summary>
            <param name="dt">Time since last frame in physical logic.</param>
        </member>
        <member name="T:BEPUphysics.StaticTriangleGroup">
            <summary>
            Manages the creation and removal and triangles near entities that may collide with the mesh.
            </summary>
        </member>
        <member name="T:BEPUphysics.IRayCastableContainerWithoutMargins">
            <summary>
            Denotes a class which maintains lists of entities and can be queried for ray intersection, but is incapable of using collision margins.
            </summary>
        </member>
        <member name="M:BEPUphysics.IRayCastableContainerWithoutMargins.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitEntity">Entity hit by the ray.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.IRayCastableContainerWithoutMargins.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitEntities">List to add entities hit by the ray to.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.GetVerticesAndIndicesFromModel(Microsoft.Xna.Framework.Graphics.Model,BEPUphysics.StaticTriangleGroup.StaticTriangleGroupVertex[]@,System.Int32[]@)">
            <summary>
            Gets an array of vertices and indices from the provided model.
            </summary>
            <param name="collisionModel">Model to use for the collision shape.</param>
            <param name="vertices">Compiled set of vertices from the model.</param>
            <param name="indices">Compiled set of indices from the model.</param>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.TriangleMesh">
            <summary>
            The triangle mesh that the group is currently using.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.LockerIsUpdating">
            <summary>
            Synchronization object that can be locked against to prevent access while triangle data is being managed.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.DeletionInterval">
            <summary>
            Length of time between each old triangle deletion attempt.
            Longer times fit well with less active groups, while shorter times work better on more active groups.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.MaximumAge">
            <summary>
            Number of intervals that can pass before a triangle is considered too old and removed.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.MaximumNumberOfTrianglesToDelete">
            <summary>
            During the update, 'old' triangles that not have been refreshed by a recent interaction are removed.
            Removing excessive numbers of these at once can cause a jerky effect.
            This value imposes a cap on the removals that can occur in any single deletion.
            Reducing this value may require the reduction in the deletion interval to keep pace with newly added triangles
            if the group is particularly active.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.CollisionRules">
            <summary>
            Defines the way in which triangles created by the static triangle group interact with other entities.
            Triangles will only be created to begin with if the collision rule between the StaticTriangleGroup and the nearby entity allows for a collision pair to be created.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.AllowedPenetration">
            <summary>
            Allowed penetration of triangles in the terrain.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.Bounciness">
            <summary>
            Bounciness of terrain triangles.  Overriden if per-vertex coefficients are defined.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.Friction">
            <summary>
            Friction of terrain triangles.  Overriden if per-vertex coefficients are defined.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.UseFaceNormalWithinAngle">
            <summary>
            Defines the angle between a contact normal and the triangle normal 
            under which the contact normal will be set to the triangle normal.
            Only used if the triangle has tryToUseFaceNormal enabled.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.TryToUseTriangleNormals">
            <summary>
            Whether or not to try to use the face normals of triangles in lieu of contact normals for collision calculations.
            This removes bumps on otherwise smooth terrain.
            The Triangle.useFaceNormalWithinAngle method defines how aggressive the smoothing is, though a high value can cause
            occasional problems with sharp edges.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.Tag">
            <summary>
            Storage object given to triangles as an entity tag.
            </summary>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.AddAllNecessaryTriangles">
            <summary>
            Creates any triangles that are in danger of collision.  Call it when the space list needs to be rebuilt without using the update.
            </summary>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.Move(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Translates the triangles of the triangle group.
            </summary>
            <param name="v">Vector to translate by.</param>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.Rotate(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Rotates the static triangle group incrementally.
            </summary>
            <param name="axis">Axis to rotate the group around.</param>
            <param name="angle">Amount to rotate.</param>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.#ctor(BEPUphysics.DataStructures.TriangleMesh)">
            <summary>
            Constructs a container for a static triangle mesh.
            </summary>
            <param name="mesh">The triangle mesh to be used for the group.</param>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.GetVerticesCopy(System.Collections.Generic.List{BEPUphysics.StaticTriangleGroup.StaticTriangleGroupVertex})">
            <summary>
            Creates a shallow copy of the internal vertex buffer.
            Any changes made to the vertices themselves within this list will affect the internally stored data.
            After modifying them, reinitialize() must be called.
            </summary>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.GeneratePositionList(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Boolean)">
            <summary>
            Gets a list of vertex positions used in the group, created from the references at indices in vertex buffer from the index buffer.
            </summary>
            <param name="vertices">List of vertex positions.</param>
            <param name="transform">Whether or not to put the outputted vertices in world space.</param>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.GetIndicesCopy(System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates a shallow copy of the internal index buffer.
            </summary>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.UpdateBeforeCollisionDetection(System.Single)">
            <summary>
            Refreshes the group.
            Called automatically when needed by the owning Space.
            </summary>
            <param name="dt">Time since last frame in physical logic.</param>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitEntity">Null; static triangle groups do not necessarily have entities at all hit locations.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the first intersection between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitEntity">Null; static triangle groups do not necessarily have entities at all hit locations.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <param name="firstVertexIndex">The first vertex index of the triangle hit by the ray.</param>
            <param name="secondVertexIndex">The second vertex index of the triangle hit by the ray.</param>
            <param name="thirdVertexIndex">The third vertex index of the triangle hit by the ray.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.List{System.Single})">
            <summary>
            Gets the first intersection between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitEntity">Null; static triangle groups do not necessarily have entities at all hit locations.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <param name="firstVertexIndex">The first vertex index of the triangle hit by the ray.</param>
            <param name="secondVertexIndex">The second vertex index of the triangle hit by the ray.</param>
            <param name="thirdVertexIndex">The third vertex index of the triangle hit by the ray.</param>
            <param name="barycentricCoords">Weightings of each vertex of the triangle needed to form the hit location.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitEntities">List filled with null entries; static triangle groups do not necessarily have entities at ray hit locations.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitEntities">List filled with null entries; static triangle groups do not necessarily have entities at ray hit locations.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <param name="firstVertexIndices">The first vertex index of each triangle hit by the ray along its path.</param>
            <param name="secondVertexIndices">The second vertex index of each triangle hit by the ray along its path.</param>
            <param name="thirdVertexIndices">The third vertex index of each triangle hit by the ray along its path.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Collections.Generic.List{System.Single}})">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitEntities">List filled with null entries; static triangle groups do not necessarily have entities at ray hit locations.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <param name="firstVertexIndices">The first vertex index of each triangle hit by the ray along its path.</param>
            <param name="secondVertexIndices">The second vertex index of each triangle hit by the ray along its path.</param>
            <param name="thirdVertexIndices">The third vertex index of each triangle hit by the ray along its path.</param>
            <param name="barycentricCoords">The weightings of the first, second, and third vertices composing the hit location for each hit triangle.  Sublists extracted from the engine ResourcePool; to prevent any garbage, they should be given back with ResourcePool.giveBack() after usage is over.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.GetTransformedVertexPosition(System.Int32)">
            <summary>
            Gets the position of the vertex at the given index in world space.
            </summary>
            <param name="index">Index of the vertex in the vertex buffer.</param>
            <returns>Position of the vertex.</returns>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.GetTransformedVertexPositionFromIndices(System.Int32)">
            <summary>
            Gets the position of the vertex at the given index in the index buffer in world space.
            </summary>
            <param name="index">Index of the vertex in the index buffer.</param>
            <returns>Position of the vertex.</returns>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.OnAdditionToSpace(BEPUphysics.Space)">
            <summary>
            Sets the collision group of the static triangle group when added to a space.
            </summary>
            <param name="newSpace">Space that the group was added to.</param>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.OnRemovalFromSpace">
            <summary>
            Removes any latent triangles.
            </summary>
        </member>
        <member name="P:BEPUphysics.StaticTriangleGroup.WorldMatrix">
            <summary>
            Gets and sets the world matrix applied to the vertices' positions.
            </summary>
        </member>
        <member name="T:BEPUphysics.StaticTriangleGroup.StaticTriangleGroupVertex">
            <summary>
            Superclass of vertices contained within TriangleMeshes and the TriangleBoundingVolumeHierarchy.  Can be extended to include different vertex-specific properties.
            </summary>
        </member>
        <member name="T:BEPUphysics.DataStructures.TriangleMeshVertex">
            <summary>
            Superclass of vertices contained within TriangleMeshes and the TriangleBoundingVolumeHierarchy.  Can be extended to include different vertex-specific properties.
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleMeshVertex.Position">
            <summary>
            Location of the vertex.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMeshVertex.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a vertex for a triangle mesh.
            </summary>
            <param name="position">Position of the triangle mesh vertex.</param>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.StaticTriangleGroupVertex.Friction">
            <summary>
            Coefficient of friction at the vertex.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.StaticTriangleGroupVertex.Bounciness">
            <summary>
            Coefficient of restitution at the vertex.
            </summary>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.StaticTriangleGroupVertex.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a vertex for a static triangle mesh.
            </summary>
            <param name="pos">Position of the vertex.</param>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.StaticTriangleGroupVertex.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a vertex for a static triangle mesh.
            </summary>
            <param name="pos">Position of the vertex.</param>
            <param name="vertexFriction">Friction at the vertex.  Friction of each triangle in the mesh is the average of its vertices' frictions.</param>
            <param name="vertexBounciness">Bounciness at the vertex.  Bounciness of each triangle in the mesh is the average of its vertices' bouncinesses.</param>
        </member>
        <member name="T:BEPUphysics.StaticTriangleGroup.ActiveTriangle">
            <summary>
            Represents a triangle which is currently being managed by the space, and for how long.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.ActiveTriangle.Age">
            <summary>
            The number of frames that the triangle has been around, or the time since the last refreshing of the triangle due to a nearby entity.
            </summary>
        </member>
        <member name="F:BEPUphysics.StaticTriangleGroup.ActiveTriangle.Triangle">
            <summary>
            Triangle represented by the class.
            </summary>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.ActiveTriangle.#ctor">
            <summary>
            Constructs a new active triangle entry.
            </summary>
        </member>
        <member name="M:BEPUphysics.StaticTriangleGroup.ActiveTriangle.Setup">
            <summary>
            Sets up the data of an active triangle entry.
            </summary>
        </member>
        <member name="M:BEPUphysics.SolverBatch.UpdateItemList">
            <summary>
            Refreshes the list of solver items in the batch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BEPUphysics.SolverBatch.TryToAddItem(System.Collections.Generic.List{BEPUphysics.Entities.Entity},BEPUphysics.SolverUpdateable)">
            <summary>
            Attempts to add the solver item to the batch.
            </summary>
            <param name="entities">Entities affected by the solver item.</param>
            <param name="item">Item to add.</param>
            <returns>Whether or not the addition was successful.</returns>
        </member>
        <member name="M:BEPUphysics.SolverBatch.RemoveItem(BEPUphysics.SolverUpdateable)">
            <summary>
            Removes the item from the batch.
            </summary>
            <param name="item">Item to remove from the batch.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.UniversalJoint">
            <summary>
            Restricts three degrees of linear motion and one degree of angular motion.
            Acts like two hinges in immediate sequence.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.UniversalJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and one degree of twisting angular freedom between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="anchor">Point around which both entities rotate in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.UniversalJoint.BallSocketJoint">
            <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.UniversalJoint.Limit">
            <summary>
            Gets the rotational limit of the universal joint.
            This constraint overlaps with the twistJoint; if the limit is activated,
            the twistJoint should be generally deactivated and vice versa.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.UniversalJoint.Motor">
            <summary>
            Gets the motor of the universal joint.
            This constraint overlaps with the twistJoint; if the motor is activated,
            the twistJoint should generally be deactivated and vice versa.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.UniversalJoint.TwistJoint">
            <summary>
            Gets the angular joint which removes one twisting degree of freedom.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.FiniteDifferenceSpline3D">
            <summary>
            3D hermite curve that uses the finite difference method to compute tangents.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.FiniteDifferenceSpline3D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Gets the curve's bounding index information.
            </summary>
            <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
            <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
        </member>
        <member name="T:BEPUphysics.Vehicle.WheelDrivingMotor">
            <summary>
            Handles a wheel's driving force for a vehicle.
            </summary>
        </member>
        <member name="F:BEPUphysics.Vehicle.WheelDrivingMotor.DefaultGripFrictionBlender">
            <summary>
            Default blender used by WheelSlidingFriction constraints.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelDrivingMotor.BlendFriction(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,System.Object)">
            <summary>
            Computes the friction to use between the vehicle and support for a wheel.
            </summary>
            <param name="vehicle">Vehicle owning the wheel.</param>
            <param name="support">Supporting entity.</param>
            <param name="wheelFriction">Friction coefficient of the wheel.</param>
            <param name="supportFriction">Friction coefficient of the supporting entity.</param>
            <param name="extraInfo">Any extra information to be considered.</param>
            <returns>Blended friction coefficient.</returns>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelDrivingMotor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new wheel motor.
            </summary>
            <param name="gripFriction">Friction coefficient of the wheel.  Blended with the ground's friction coefficient and normal force to determine a maximum force.</param>
            <param name="maximumForwardForce">Maximum force that the wheel motor can apply when driving forward (a target speed greater than zero).</param>
            <param name="maximumBackwardForce">Maximum force that the wheel motor can apply when driving backward (a target speed less than zero).</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelDrivingMotor.GetRelativeVelocity">
            <summary>
            Gets the relative velocity between the ground and wheel.
            </summary>
            <returns>Relative velocity between the ground and wheel.</returns>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.BlendedCoefficient">
            <summary>
            Gets the coefficient of grip friction between the wheel and support.
            This coefficient is the blended result of the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.ForceAxis">
            <summary>
            Gets the axis along which the driving forces are applied.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.GripFriction">
            <summary>
            Gets or sets the coefficient of forward-backward gripping friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.GripFrictionBlender">
            <summary>
            Gets or sets the function used to blend the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.MaximumBackwardForce">
            <summary>
            Gets or sets the maximum force that the wheel motor can apply when driving backward (a target speed less than zero).
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.MaximumForwardForce">
            <summary>
            Gets or sets the maximum force that the wheel motor can apply when driving forward (a target speed greater than zero).
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.TargetSpeed">
            <summary>
            Gets or sets the target speed of this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.TotalImpulse">
            <summary>
            Gets the force this wheel's motor is applying.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.Wheel">
            <summary>
            Gets the wheel that this motor applies to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.SolverSettings">
            <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
        </member>
        <member name="T:BEPUphysics.BroadPhases.BruteForce">
            <summary>
            Extremely simple pairwise rejection based on the AABB of each object.
            This broadphase system provides acceptable performance when the number of objects being simulated is low (1-200).
            Different broadphases can be used by using the (Space).broadPhase property.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BruteForce.GetEntities(Microsoft.Xna.Framework.BoundingBox,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns entities intersecting or contained within the bounding shape.
            </summary>
            <param name="box">Bounding box to check.</param>
            <param name="entities">List of entities to be filled with entities within the bounding shape.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BruteForce.GetEntities(Microsoft.Xna.Framework.BoundingFrustum,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns entities intersecting or contained within the bounding shape.
            </summary>
            <param name="frustum">Bounding frustum to check.</param>
            <param name="entities">List of entities to be filled with entities within the bounding shape.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BruteForce.GetEntities(Microsoft.Xna.Framework.BoundingSphere,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns entities intersecting or contained within the bounding shape.
            </summary>
            <param name="sphere">Bounding sphere to check.</param>
            <param name="entities">List of entities to be filled with entities within the bounding shape.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BruteForce.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around entities.</param>
            <param name="hitEntity">Entity hit by the ray.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <returns>Whether or not the ray intersected the target.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BruteForce.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around entities.</param>
            <param name="hitEntities">List to add entities hit by the ray to.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <returns>Whether or not the ray intersected the target.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhases.BruteForce.UpdateCollisionPairs(System.Single)">
            <summary>
            Updates the collision pairs of the system.
            Called automatically when used by a Space.
            </summary>
            <param name="dt">Time elapsed in seconds since the last update for physics logic.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.RevoluteJoint">
            <summary>
            Restricts linear motion while allowing one degree of angular freedom.
            Acts like a normal door hinge.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and two degrees of angular freedom between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="anchor">Point around which both entities rotate.</param>
            <param name="freeAxis">Axis around which the hinge can rotate.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteJoint.AngularJoint">
            <summary>
            Gets the angular joint which removes two degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteJoint.BallSocketJoint">
            <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteJoint.Limit">
            <summary>
            Gets the rotational limit of the hinge.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteJoint.Motor">
            <summary>
            Gets the motor of the hinge.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.MaximumAngularSpeedConstraint">
            <summary>
            Prevents the target entity from moving faster than the specified speeds.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SingleEntityConstraint">
            <summary>
            Abstract superclass of constraints which control a single entity.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SingleEntityConstraint.iterationsAtZeroImpulse">
            <summary>
            Number of frames so far at effectively zero corrective impulse.
            Set to zero during every preStep(float dt) call and incremented by checkForEarlyOutIterations(Vector3 impulse).
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SingleEntityConstraint.entity">
            <summary>
            Entity affected by the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityConstraint.CollectInvolvedEntities(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Adds entities associated with the solver item to the involved entities list.
            Ensure that sortInvolvedEntities() is called at the end of the function.
            This allows the non-batched multithreading system to lock properly.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityConstraint.UpdateSolverActivity">
            <summary>
            Updates the activity state of the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityConstraint.CheckForEarlyOutIterations(System.Single)">
            <summary>
            Manages the early-out functionality of the solver; if too many consecutive impulses are tiny, it stops trying to solve.
            Called from applyImpulse(float dt).
            </summary>
            <param name="incrementalImpulse">This frame's calculated impulse.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityConstraint.Entity">
            <summary>
            Gets or sets the entity affected by the constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.MaximumAngularSpeedConstraint.#ctor(BEPUphysics.Entities.Entity,System.Single)">
            <summary>
            Constructs a maximum speed constraint.
            </summary>
            <param name="e">Affected entity.</param>
            <param name="maxSpeed">Maximum angular speed allowed.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.MaximumAngularSpeedConstraint.ApplyImpulse(System.Single)">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.MaximumAngularSpeedConstraint.PreStep(System.Single)">
            <summary>
            Calculates necessary information for velocity solving.
            Called automatically by space.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.MaximumAngularSpeedConstraint.MaximumForce">
            <summary>
            Gets and sets the maximum impulse that the constraint will attempt to apply when satisfying its requirements.
            This field can be used to simulate friction in a constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MaximumAngularSpeedConstraint.MaximumSpeed">
            <summary>
            Gets or sets the maximum angular speed that this constraint allows.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MaximumAngularSpeedConstraint.Softness">
            <summary>
            Gets and sets the softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            For motors, softness can be used to implement damping.  For a damping constant k, the appropriate softness is 1/k.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MaximumAngularSpeedConstraint.BEPUphysics#Constraints#I3DImpulseConstraint#RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MaximumAngularSpeedConstraint.TotalImpulse">
            <summary>
            Gets the total impulse applied by the constraint.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I2DImpulseConstraint">
            <summary>
            Implemented by solver updateables which have a two dimensional impulse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I2DImpulseConstraint.RelativeVelocity">
            <summary>
            Gets the current relative velocity of the constraint.
            Computed based on the current connection velocities and jacobians.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I2DImpulseConstraint.TotalImpulse">
            <summary>
            Gets the total impulse a constraint has applied.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I2DImpulseConstraintWithError">
            <summary>
            Implemented by solver updateables which have a two dimensional impulse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.I2DImpulseConstraintWithError.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.DataStructures.TinyList`1">
            <summary>
            Special datatype used for heapless lists without unsafe/stackalloc.
            Designed for object types or reference-sized structs (int, float...).
            Stores a maximum of 8 entries.
            </summary>
            <typeparam name="T">Struct type to use.</typeparam>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.ToString">
            <summary>
            Creates a string representation of the list.
            </summary>
            <returns>String representation of the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.Add(`0)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be added.
            Will return false when the list is full.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.IndexOf(`0)">
            <summary>
            Gets the index of the item in the list, if it is present.
            </summary>
            <param name="item">Item to look for.</param>
            <returns>Index of the item, if present.  -1 otherwise.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.Remove(`0)">
            <summary>
            Tries to remove an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item existed in the list.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TinyList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <returns>Whether or not the item could be removed.
            Returns false if the index is out of bounds.</returns>
        </member>
        <member name="P:BEPUphysics.DataStructures.TinyList`1.Count">
            <summary>
            Gets the current number of elements in the list.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.TinyList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">Index to retrieve.</param>
            <returns>Retrieved item.</returns>
        </member>
        <member name="T:BEPUphysics.Paths.PathFollowing.EntityRotator">
            <summary>
            Pushes an entity around according to goal positions and orientations.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new EntityRotator.
            </summary>
            <param name="e">Entity to move.</param>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Constraints.SingleEntityAngularMotor)">
            <summary>
            Constructs a new EntityRotator.
            </summary>
            <param name="e">Entity to move.</param>
            <param name="angularMotor">Motor to use for angular motion if the entity is dynamic.</param>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.GetAngularVelocity(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
            <summary>
            Gets the angular velocity necessary to change an entity's orientation from
            the starting quaternion to the ending quaternion over time dt.
            </summary>
            <param name="start">Initial orientation.</param>
            <param name="end">Final orientation.</param>
            <param name="dt">Time over which the angular velocity is to be applied.</param>
            <returns>Angular velocity to reach the goal in time.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.OnAdditionToSpace(BEPUphysics.Space)">
            <summary>
            Adds the motors to the space.  Called automatically.
            </summary>
            <param name="newSpace">Space the mover is being added to.</param>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.OnRemovalFromSpace">
            <summary>
            Removes the motors from the space.  Called automatically.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.UpdateDuringForces(System.Single)">
            <summary>
            Called automatically by the space.
            </summary>
            <param name="dt">Simulation timestep.</param>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityRotator.AngularMotor">
            <summary>
            Gets the angular motor used by the entity rotator.
            When the affected entity is dynamic, it is pushed by motors.
            This ensures that its interactions and collisions with
            other entities remain stable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityRotator.Entity">
            <summary>
            Gets or sets the entity being pushed by the entity rotator.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityRotator.TargetOrientation">
            <summary>
            Gets or sets the target orientation of the entity rotator.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.QuaternionSlerpCurve">
            <summary>
            Defines a quaternion curve using spherical linear interpolation.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Gets the curve's bounding index information.
            </summary>
            <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
            <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Quaternion},System.Int32)">
            <summary>
            Called when a control point is added.
            </summary>
            <param name="curveControlPoint">New control point.</param>
            <param name="index">Index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Quaternion},System.Int32)">
            <summary>
            Called when a control point is removed.
            </summary>
            <param name="curveControlPoint">Removed control point.</param>
            <param name="oldIndex">Index of the control point before it was removed.</param>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Quaternion},System.Int32,System.Int32)">
            <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
            <param name="oldIndex">Old index of the control point.</param>
            <param name="newIndex">New index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Quaternion})">
            <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
        </member>
        <member name="T:BEPUphysics.Paths.ConstantLinearSpeedCurve">
            <summary>
            Wrapper around a 3d position curve that specifies a specific velocity at which to travel.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.ConstantSpeedCurve`1">
            <summary>
            Superclass of speed-controlled curves that have a constant speed.
            </summary>
            <typeparam name="TValue">Type of the values in the curve.</typeparam>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantSpeedCurve`1.#ctor(System.Single,BEPUphysics.Paths.Curve{`0})">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantSpeedCurve`1.#ctor(System.Single,BEPUphysics.Paths.Curve{`0},System.Int32)">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantSpeedCurve`1.GetSpeedAtCurveTime(System.Single)">
            <summary>
            Gets the desired speed at a given time.
            </summary>
            <param name="time">Time to check for speed.</param>
            <returns>Speed at the given time.</returns>
        </member>
        <member name="P:BEPUphysics.Paths.ConstantSpeedCurve`1.Speed">
            <summary>
            Gets or sets the speed of the curve.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantLinearSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantLinearSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Vector3},System.Int32)">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="T:BEPUphysics.Threading.ParallelLoopManager">
            <summary>
            Manages parallel for loops.
            Cannot handle general task-based parallelism.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopManager.#ctor">
            <summary>
            Constructs a new parallel loop manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Iterates over the interval.
            </summary>
            <param name="beginIndex">Starting index of the iteration.</param>
            <param name="endIndex">Ending index of the iteration.</param>
            <param name="loopBody">Function to call on each iteration.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopManager.Dispose">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopManager.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.ParallelLoopManager.MinimumTasksPerThread">
            <summary>
            Gets or sets the minimum number of tasks to be allocated to each thread
            per loop.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.ParallelLoopManager.MaximumIterationsPerTask">
            <summary>
            Gets or sets the maximum number of loop iterations
            per individual task.
            </summary>
        </member>
        <member name="T:BEPUphysics.Events.CollisionPairCreatedEventHandler">
            <summary>
            Handles any special logic when two objects' bounding boxes overlap as determined by the broadphase system.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; collision pairs can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Events.CreatingCollisionPairEventHandler">
            <summary>
            Handles any special logic when two objects' bounding boxes overlap as determined by the broadphase system.
            Unlike CollisionPairCreatedEventHandler, this will be called as soon as a collision pair is created instead of at the end of the frame.
            This allows the collision pair's data to be adjusted prior to any usage,
            but other actions such as altering the owning space's collision pair or entity listings are unsafe.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; collision pairs can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Events.CollisionPairRemovedEventHandler">
            <summary>
            Handles any special logic when two objects' bounding boxes cease to overlap as determined by the broadphase system.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">The entity formerly interacting with the sender via the deleted collision pair.</param>
        </member>
        <member name="T:BEPUphysics.Events.RemovingCollisionPairEventHandler">
            <summary>
            Handles any special logic when two objects' bounding boxes cease to overlap as determined by the broadphase system.
            Unlike CollisionPairRemovedEventHandler, this will trigger at the time of pair removal instead of at the end of the space's update.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">The entity formerly interacting with the sender via the deleted collision pair.</param>
        </member>
        <member name="T:BEPUphysics.Events.ContactCreatedEventHandler">
            <summary>
            Handles any special logic when two bodies are touching and generate a contact point.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; collision pairs can quickly return to the resource pool.</param>
            <param name="position">Position of the added contact.</param>
            <param name="normal">Surface normal at the added contact.</param>
            <param name="depth">Penetration depth at the added contact.</param>
        </member>
        <member name="T:BEPUphysics.Events.CreatingContactEventHandler">
            <summary>
            Handles any special logic when two bodies are touching and generate a contact point.
            Unlike ContactCreatedEventHandler, this will trigger at the time of contact generation instead of at the end of the space's update.
            This allows the contact's data to be adjusted prior to usage in the velocity solver, 
            but other actions such as altering the owning space's collision pair or entity listings are unsafe.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; collision pairs can quickly return to the resource pool.</param>
            <param name="contact">Newly generated contact point between the collision pair's two bodies.
            This reference cannot be safely kept outside of the scope of the handler; contacts can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Events.InitialCollisionDetectedEventHandler">
            <summary>
            Handles any special logic when two bodies initally collide and generate a contact point.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; collision pairs can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Events.DetectingInitialCollisionEventHandler">
            <summary>
            Handles any special logic when two bodies initally collide and generate a contact point.
            Unlike InitialCollisionDetectedEventHandler, this will trigger at the time of contact creation instead of at the end of the space's update.
            Performing operations outside of the scope of the collision pair is unsafe.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; collision pairs can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Events.ContactRemovedEventHandler">
            <summary>
            Handles any special logic when a contact point between two bodies is removed.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair presiding over the interaction of the two involved bodies and data about the removed contact.
            This reference cannot be safely kept outside of the scope of the handler; collision pairs can quickly return to the resource pool.</param>
            <param name="position">Position of the removed contact.</param>
            <param name="normal">Surface normal at the removed contact.</param>
            <param name="depth">Penetration depth at the removed contact.</param>
        </member>
        <member name="T:BEPUphysics.Events.RemovingContactEventHandler">
            <summary>
            Handles any special logic when a contact point between two bodies is removed.
            Unlike ContactRemovedEventHandler, this will trigger at the time of contact removal instead of at the end of the space's update.
            Performing operations outside of the scope of the controller is unsafe.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair presiding over the interaction of the two involved bodies and data about the removed contact.
            This reference cannot be safely kept outside of the scope of the handler; collision pairs can quickly return to the resource pool.</param>
            <param name="contact">Contact between the two entities.  This reference cannot be safely kept outside of the scope of the handler;
            it will be immediately returned to the resource pool after the event handler completes.</param>
        </member>
        <member name="T:BEPUphysics.Events.CollisionEndedEventHandler">
            <summary>
            Handles any special logic when two bodies go from a touching state to a separated state.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair overseeing the collision.  Note that this instance may be invalid if the entities' bounding boxes no longer overlap.</param>
        </member>
        <member name="T:BEPUphysics.Events.CollisionEndingEventHandler">
            <summary>
            Handles any special logic when two bodies go from a touching state to a separated state.
            Unlike CollisionEndedEventHandler, this will trigger at the time of contact removal instead of at the end of the space's update.
            Performing operations outside of the scope of the controller is unsafe.
            </summary>
            <param name="sender">Entity sending the event.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; collision pairs can quickly return to the resource pool.</param>
        </member>
        <member name="T:BEPUphysics.Events.CollisionPairUpdatedEventHandler">
            <summary>
            Handles any special logic to perform at the end of a collision pair's UpdateContactManifold method.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            </summary>
            <param name="sender">Entity involved in the collision pair monitored for events.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair that was updated.</param>
        </member>
        <member name="T:BEPUphysics.Events.CollisionPairUpdatingEventHandler">
            <summary>
            Handles any special logic to perform at the end of a collision pair's UpdateContactManifold method.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            Unlike CollisionPairUpdatedEventHandler, this is called at the time of the collision detection update rather than at the end of the space's update.
            Other entities' information may not be up to date, and operations acting on data outside of the character controller may be unsafe.
            </summary>
            <param name="sender">Entity involved in the collision pair monitored for events.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair that was updated.</param>
        </member>
        <member name="T:BEPUphysics.Events.CollisionPairTouchedEventHandler">
            <summary>
            Handles any special logic to perform at the end of a collision pair's UpdateContactManifold method if the two objects are colliding.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            </summary>
            <param name="sender">Entity involved in the collision pair monitored for events.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair that was updated.</param>
        </member>
        <member name="T:BEPUphysics.Events.CollisionPairTouchingEventHandler">
            <summary>
            Handles any special logic to perform at the end of a collision pair's UpdateContactManifold method if the two objects are colliding.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            Unlike CollisionPairTouchedEventHandler, this is called at the time of the collision detection update rather than at the end of the space's update.
            Other entities' information may not be up to date, and operations acting on data outside of the character controller may be unsafe.
            </summary>
            <param name="sender">Entity involved in the collision pair monitored for events.</param>
            <param name="other">Other entity within the collision pair opposing the monitored entity.</param>
            <param name="collisionPair">Collision pair that was updated.</param>
        </member>
        <member name="T:BEPUphysics.Events.EntityUpdatedEventHandler">
            <summary>
            Handles any special logic to perform at the end of an entity's update method.
            </summary>
            <param name="sender">Updated entity.</param>
        </member>
        <member name="T:BEPUphysics.Events.EntityUpdatingEventHandler">
            <summary>
            Handles any special logic to perform at the end of an entity's update method.
            Unlike EntityUpdatedEventHandler, this is called at the time of the entity's update rather than at the end of the space's update.
            Other entities' information may not be up to date, and operations acting on data outside of the entity itself may be unsafe.
            </summary>
            <param name="sender">Updated entity.</param>
        </member>
        <member name="T:BEPUphysics.Events.EntityBeginsTouchingVolumeEventHandler">
            <summary>
            Handles any special logic to perform when an entity begins touching a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
            <param name="toucher">Entity touching the volume.</param>
            <param name="volume">DetectorVolume being touched.</param>
        </member>
        <member name="T:BEPUphysics.Events.EntityStopsTouchingVolumeEventHandler">
            <summary>
            Handles any special logic to perform when an entity stops touching a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
            <param name="toucher">Entity no longer touching the volume.</param>
            <param name="volume">DetectorVolume no longer being touched.</param>
        </member>
        <member name="T:BEPUphysics.Events.VolumeBeginsContainingEntityEventHandler">
            <summary>
            Handles any special logic to perform when an entity begins being contained by a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
            <param name="volume">DetectorVolume containing the entity.</param>
            <param name="entity">Entity contained by the volume.</param>
        </member>
        <member name="T:BEPUphysics.Events.VolumeStopsContainingEntityEventHandler">
            <summary>
            Handles any special logic to perform when an entity stops being contained by a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
            <param name="volume">DetectorVolume no longer containing the entity.</param>
            <param name="entity">Entity no longer contained by the volume.</param>
        </member>
        <member name="T:BEPUphysics.CombinedUpdateable">
            <summary>
            Superclass whose children have both a velocity solver component and a normal updateable component.
            </summary>
        </member>
        <member name="M:BEPUphysics.CombinedUpdateable.UpdateAtEndOfFrame(System.Single)">
            <summary>
            Updates the updateable after the end of the frame.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.CombinedUpdateable.UpdateAtEndOfUpdate(System.Single)">
            <summary>
            Updates the updateable after the end of a space update.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.CombinedUpdateable.UpdateDuringForces(System.Single)">
            <summary>
            Updates the updateable after the broad phase system executes, next to the force application system.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.CombinedUpdateable.UpdateBeforeCollisionDetection(System.Single)">
            <summary>
            Updates the updateable after forces, collision pairs, and bounding boxes have been computed, immediately before narrow-phase collision detection tests are run.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="P:BEPUphysics.CombinedUpdateable.IsUpdatedSequentially">
            <summary>
            Gets and sets whether or not the updateable should be updated sequentially even in a multithreaded space.
            If this is true, the updateable can make use of the space's ThreadManager for internal multithreading.
            </summary>
        </member>
        <member name="P:BEPUphysics.CombinedUpdateable.IsUpdating">
            <summary>
            Gets and sets whether or not the updateable should be updated by the space.
            </summary>
        </member>
        <member name="T:BEPUphysics.PropertyBlendMethod">
            <summary>
            Contains the various options available for combining the physical properties of objects during an interaction, such as friction and bounciness.
            </summary>
        </member>
        <member name="F:BEPUphysics.PropertyBlendMethod.Average">
            <summary>
            Averages the two property values.
            </summary>
        </member>
        <member name="F:BEPUphysics.PropertyBlendMethod.Max">
            <summary>
            Uses the larger of the two property values.
            </summary>
        </member>
        <member name="F:BEPUphysics.PropertyBlendMethod.Min">
            <summary>
            Uses the smaller of the two property values.
            </summary>
        </member>
        <member name="F:BEPUphysics.PropertyBlendMethod.BiasHigh">
            <summary>
            Factors in 75% of the high property value of the pair and 25% of the low property value of the pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.PropertyBlendMethod.BiasLow">
            <summary>
            Factors in 25% of the high property value of the pair and 75% of the low property value of the pair.
            </summary>
        </member>
        <member name="T:BEPUphysics.PropertyBlender">
            <summary>
            Function which takes information from each entity and computes a blended property.
            Commonly used for friction and bounciness.
            </summary>
            <param name="a">First entity to consider.</param>
            <param name="b">Second entity to consider.</param>
            <param name="aValue">Value associated with the first entity to blend.</param>
            <param name="bValue">Value associated with the second entity to blend.</param>
            <param name="extraInformation">Any additional information to take into account when blending the properties.</param>
            <returns>Blended property value.</returns>
        </member>
        <member name="T:BEPUphysics.PropertyBlenders">
            <summary>
            Contains commonly used property blenders.
            </summary>
        </member>
        <member name="M:BEPUphysics.PropertyBlenders.BlendBounciness(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,System.Object)">
            <summary>
            The property blender used by default in collision bounciness.
            Uses the space's bounciness PropertyBlendMethod to blend.
            </summary>
            <param name="a">First entity to consider.</param>
            <param name="b">Second entity to consider.</param>
            <param name="aValue">Value associated with the first entity to blend.</param>
            <param name="bValue">Value associated with the second entity to blend.</param>
            <param name="extraInformation">Any additional information to take into account when blending the properties.</param>
            <returns>Blended property value.</returns>
        </member>
        <member name="M:BEPUphysics.PropertyBlenders.BlendFriction(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,System.Object)">
            <summary>
            The property blender used by default in collision friction.
            Uses the space's friction PropertyBlendMethod to blend.
            </summary>
            <param name="a">First entity to consider.</param>
            <param name="b">Second entity to consider.</param>
            <param name="aValue">Value associated with the first entity to blend.</param>
            <param name="bValue">Value associated with the second entity to blend.</param>
            <param name="extraInformation">Any additional information to take into account when blending the properties.</param>
            <returns>Blended property value.</returns>
        </member>
        <member name="T:BEPUphysics.Constraints.SlidingFrictionTwoAxis">
            <summary>
            Computes the forces to slow down and stop sliding motion between two entities when centralized friction is active.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SlidingFrictionTwoAxis.FrictionDirectionX">
            <summary>
            Gets the first direction in which the friction force acts.
            This is one of two directions that are perpendicular to each other and the normal of a collision between two entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SlidingFrictionTwoAxis.FrictionDirectionY">
            <summary>
            Gets the second direction in which the friction force acts.
            This is one of two directions that are perpendicular to each other and the normal of a collision between two entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SlidingFrictionTwoAxis.TotalForce">
            <summary>
            Gets the total force applied by sliding friction.
            The X component of this vector is the force applied along the frictionDirectionX,
            while the Y component is the force applied along the frictionDirectionY.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.I2DJacobianConstraint">
            <summary>
            Denotes a class that uses two linear jacobian axes.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="massMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructs a new read-only wrapper dictionary.
            </summary>
            <param name="dictionary">Internal dictionary to use.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for key-value pairs in the dictionary.
            </summary>
            <returns>Enumerator for the dictionary.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for key-value pairs in the dictionary.
            </summary>
            <returns>Enumerator for the dictionary.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if the dictionary contains a key-value pair.
            </summary>
            <param name="item">Key-value pair to look for.</param>
            <returns>Whether or not the key-value pair is present.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if the dictionary contains a given key.
            </summary>
            <param name="key">Key to check for.</param>
            <returns>Whether or not the key is contained.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the key-value pairs of the dictionary into an array.
            </summary>
            <param name="array">Target array.</param>
            <param name="arrayIndex">The zero-based index at which copying begins.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to retrieve a value from the dictionary using a key.
            </summary>
            <param name="key">Key to look for.</param>
            <param name="value">Value associated with the key.</param>
            <returns>Whether or not the key exists.</returns>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets whether or not this dictionary is read-only.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the key in the dictionary.
            </summary>
            <param name="key">Key to look for in the dictionary.</param>
            <returns>Value associated with the key.</returns>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an enumerable set of keys in the dictionary.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an enumerable set of values in the dictionary.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.StepCurve1D">
            <summary>
            One dimensional-valued curve that does not interpolate values.
            Instead, it just picks the value from the previous control point.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.StepCurve1D.Evaluate(System.Int32,System.Single,System.Single@)">
            <summary>
            Evaluates the curve at a given time using linear interpolation.
            </summary>
            <param name="controlPointIndex">Index of the control point at the beginning of the evaluation interval.</param>
            <param name="weight">Value of 0 to 1 representing how far along the interval to sample.</param>
            <param name="value">Value of the curve at the given location.</param>
        </member>
        <member name="M:BEPUphysics.Paths.StepCurve1D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Computes the bounds of the curve.
            </summary>
            <param name="minIndex">Minimum index of the curve.</param>
            <param name="maxIndex">Maximum index of the curve.</param>
        </member>
        <member name="T:BEPUphysics.Entities.Cone">
            <summary>
            Cone-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="T:BEPUphysics.Entities.Entity">
            <summary>
            Superclass of all objects that can collide and move.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.internalIterationFlag">
            <summary>
            Internally used for flagging entities during various traversals.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.isMemberOfRayCastableContainer">
            <summary>
            Whether or not this body is a member of a container such as a StaticGroup.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.maximumRadius">
            <summary>
            Maximum distance from any point on the entity to its center of mass.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.maximumRadiusFromCenterPosition">
            <summary>
            Maximum distance from any point on the entity to its geometric center position.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.allowedPenetration">
            <summary>
            The slop area around the margin of objects.  Helps stabilize collisions.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.collisionPairs">
            <summary>
            List of collision pairs which this object is part of.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.constraints">
            <summary>
            List of constraints which this object is part of.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.eventManager">
            <summary>
            Manages events and allows for the addition and removal of events.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.solverUpdateables">
            <summary>
            List of other solver items (other than collision pairs and constraints) which this object is a part of.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.#ctor">
            <summary>
            Initializes some internal values.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.BecomeDynamic(System.Single)">
            <summary>
            Converts the entity into a physical object.
            If it is already a physically simulated entity, its mass and associated inertia tensor will be updated accordingly.
            </summary>
            <param name="m">New mass of the object.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the mass is invalid or when this entity is a child of a kinematic compound body.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.BecomeKinematic">
            <summary>
            Converts the entity into a nondynamic object.
            If the entity is already not dynamic, this will do nothing.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when this entity is a child of a dynamic compound body.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
            <returns>Hash code for this object.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.BecomeDynamic(System.Single,BEPUphysics.CollisionGroup)">
            <summary>
            Converts the entity into a physical object.
            If it is already a physically simulated entity, its mass and associated inertia tensor will be updated accordingly.
            </summary>
            <param name="m">New mass of the object.</param>
            <param name="newGroup">New collision group to use in the dynamic object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.BecomeKinematic(BEPUphysics.CollisionGroup)">
            <summary>
            Converts the entity into a nondynamic object.
            If the entity is already not dynamic, this will do nothing.
            </summary>
            <param name="newGroup">New collision group to use in the dynamic object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ForceBoundingBoxRefit(System.Single)">
            <summary>
            <para>Defines the bounding box which contains the shape.</para>
            <para>The bounding box is recalculated internally each frame.  Only call this if the bounding box is needed earlier than the next frame.</para>
            <param name="dt">Time between frames to use in expanding the bounding box based on the object's velocity.  Pass in 0 to ignore velocity.</param>
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ForceCollisionRuleRecalculation">
            <summary>
            Recomputes the collisionRule associated with every collision pair that this entity is a part of.
            This doesn't need to be called unless a change has been made to this entity's collisionRules and this entity has collision pairs.
            If it isn't called when the collisionRules change, the collision pair may have the incorrect collision rule.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.PadInertiaTensor">
            <summary>
            Increases the diagonal of the inertia tensor, useful for stabilizing rotation when conserving angular momentum.
            Automatically chooses an appropriate padding amount to use for the entity.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.PadInertiaTensor(System.Single)">
            <summary>
            Increases the diagonal of the inertia tensor, useful for stabilizing rotation when conserving angular momentum.
            </summary>
            <param name="padding">The amount to add to the diagonals.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.RayTest(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the intersection between the ray and the entity.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around the entity.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="t">Distance, in units of the length of the direction vector, to the hit location.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ScaleInertiaTensor(System.Single)">
            <summary>
            Scales the inertia tensor and updates the inverse.
            </summary>
            <param name="scale">Amount to scale the tensor by.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.Activate">
            <summary>
            Forces the entity (and its simulation island, if any) awake.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.Deactivate">
            <summary>
            Forces the entity to go to sleep.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ForceActivate">
            <summary>
            Sets isDeactivationCandidate = false and isActive = true for this entity and any children of it.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ForceDeactivate">
            <summary>
            Sets isDeactivationCandidate = true and isActive = false for this entity and any children of it.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.UpdateActivity(System.Single)">
            <summary>
            Updates the activity state of the entity.
            </summary>
            <param name="dt">Time since the last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.Initialize(System.Boolean)">
            <summary>
            Defines necessary components of the object.
            </summary>
            <param name="physicallySimulated">Whether or not the object is going to be physically simulated.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.InitializePhysicalData">
            <exception cref="T:System.InvalidOperationException">Thrown when the new mass of the entity is invalid.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyMotionState(BEPUphysics.DataStructures.MotionState)">
            <summary>
            Changes the entity's current unbuffered state to the given state.
            The entity's velocity will match the new state's velocity, ignoring the stored momentum.
            </summary>
            <param name="state">The entity's new motion state.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyMotionState(BEPUphysics.DataStructures.MotionState@)">
            <summary>
            Changes the entity's current unbuffered state to the given state.
            The entity's velocity will match the new state's velocity, ignoring the stored momentum.
            </summary>
            <param name="state">The entity's new motion state.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyMotionState(BEPUphysics.DataStructures.MotionState,System.Boolean)">
            <summary>
            Changes the entity's motion state.
            The entity's velocity will match the new state's velocity, ignoring the stored momentum.
            </summary>
            <param name="state">The entity's new motion state.</param>
            <param name="isBuffered">Whether or not to buffer the application of the motion state.
            If true, writes the new state into the space's write buffer if the entity belongs to a space.
            At the beginning of the next update, the write buffer's contents will be applied to the entity.
            If false or if the entity does not belong to a space, the state will be written directly to the unbuffered fields.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyMotionState(BEPUphysics.DataStructures.MotionState@,System.Boolean)">
            <summary>
            Changes the entity's motion state.
            The entity's velocity will match the new state's velocity, ignoring the stored momentum.
            </summary>
            <param name="state">The entity's new motion state.</param>
            <param name="isBuffered">Whether or not to buffer the application of the motion state.
            If true, writes the new state into the space's write buffer if the entity belongs to a space.
            At the beginning of the next update, the write buffer's contents will be applied to the entity.
            If false or if the entity does not belong to a space, the state will be written directly to the unbuffered fields.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyQuaternion(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Applies the rotation defined by the quaternion to the entity.
            </summary>
            <param name="q">Quaternion to apply.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyQuaternion(Microsoft.Xna.Framework.Quaternion@,System.Boolean)">
            <summary>
            Applies the rotation defined by the quaternion to the entity.
            </summary>
            <param name="q">Quaternion to apply.</param>
            <param name="wakeUp">Whether or not to wake up the entity if it is currently deactivated.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.Teleport(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Teleports the object using the given offset.
            
            This can teleport an entity into another entity; it will not be stopped by collisions.
            If you want proper collision response, you should modify the entity's velocity instead.
            </summary>
            <param name="offset">Vector to add to the current position.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.Teleport(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Teleports the object using the given offset.
            
            This can teleport an entity into another entity; it will not be stopped by collisions.
            If you want proper collision response, you should modify the entity's velocity instead.
            </summary>
            <param name="offset">Vector to add to the current position.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.Teleport(Microsoft.Xna.Framework.Vector3,System.Boolean)">
            <summary>
            Teleports the object using the given offset.
            
            This can teleport an entity into another entity; it will not be stopped by collisions.
            If you want proper collision response, you should modify the entity's velocity instead.
            </summary>
            <param name="offset">Vector to add to the current position.</param>
            <param name="wakeUp">Whether or not to wake up the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.Teleport(Microsoft.Xna.Framework.Vector3@,System.Boolean)">
            <summary>
            Teleports the object using the given offset.
            
            This can teleport an entity into another entity; it will not be stopped by collisions.
            If you want proper collision response, you should modify the entity's velocity instead.
            </summary>
            <param name="offset">Vector to add to the current position.</param>
            <param name="wakeUp">Whether or not to wake up the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.TeleportTo(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Teleports the object so that its geometric center is located at the given vector.
            
            This can teleport an entity into another entity; it will not be stopped by collisions.
            If you want proper collision response, you should modify the entity's velocity instead.
            </summary>
            <param name="v">Location to move to.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.TeleportTo(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Teleports the object so that its geometric center is located at the given vector.
            
            This can teleport an entity into another entity; it will not be stopped by collisions.
            If you want proper collision response, you should modify the entity's velocity instead.
            </summary>
            <param name="v">Location to move to.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.TeleportTo(Microsoft.Xna.Framework.Vector3@,System.Boolean)">
            <summary>
            Teleports the object so that its geometric center or center of mass is located at the given vector.
            
            This can teleport an entity into another entity; it will not be stopped by collisions.
            If you want proper collision response, you should modify the entity's velocity instead.
            </summary>
            <param name="v">Location to move to.</param>
            <param name="useGeometricCenter">Whether to move the geometric center of the entity to the location or to instead move the center of mass to the location.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.TeleportTo(Microsoft.Xna.Framework.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Teleports the object so that its geometric center or center of mass is located at the given vector.
            
            This can teleport an entity into another entity; it will not be stopped by collisions.
            If you want proper collision response, you should modify the entity's velocity instead.
            </summary>
            <param name="v">Location to move to.</param>
            <param name="useGeometricCenter">Whether to move the geometric center of the entity to the location or to instead move the center of mass to the location.</param>
            <param name="wakeUp">Whether or not to wake up the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.TeleportTo(Microsoft.Xna.Framework.Vector3@,System.Boolean,System.Boolean)">
            <summary>
            Teleports the object so that its geometric center or center of mass is located at the given vector.
            
            This can teleport an entity into another entity; it will not be stopped by collisions.
            If you want proper collision response, you should modify the entity's velocity instead.
            </summary>
            <param name="v">Location to move to.</param>
            <param name="useGeometricCenter">Whether to move the geometric center of the entity to the location or to instead move the center of mass to the location.</param>
            <param name="wakeUp">Whether or not to wake up the entity.</param>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.angularDampingBoost">
            <summary>
            Per-frame change in damping.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.linearDampingBoost">
            <summary>
            Per-frame change in damping.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.inertiaTensor">
            <summary>
            Inertia tensor updated for the current rotation of the body.
            Modifying this value directly will change little; it is a derived value based on the local inertia tensor.
            To change the object's response to angular momentum, change the localSpaceInertiaTensor or localInertiaTensorInverse.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.inertiaTensorInverse">
            <summary>
            Inertia tensor updated for the current rotation of the body.
            Modifying this value directly will change little; it is a derived value based on the local inertia tensor inverse.
            To change the object's response to angular momentum, change the localSpaceInertiaTensor or localInertiaTensorInverse.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.localInertiaTensor">
            <summary>
            Inertia tensor of the entity in configuration space.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.localInertiaTensorInverse">
            <summary>
            Inverse of the configuration space inertia tensor.
            Does not automatically update the non-inverse when changed.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.totalForce">
            <summary>
            Total force acting on the entity.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Entity.totalTorque">
            <summary>
            Total torque acting on the entity.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyAngularImpulse(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Instantly changes the angular momentum of the body by the given amount.
            Updates the velocity of the object.
            This method does not use any buffering and is not thread safe; changes are made directly to velocities and momentums.
            This method will not activate a sleeping entity.
            </summary>
            <param name="impulse">Change in momentum to impart on the body.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyAngularImpulse(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Instantly changes the angular momentum of the body by the given amount.
            Updates the velocity of the object.
            This method does not use any buffering and is not thread safe; changes are made directly to velocities and momentums.
            This method will not activate a sleeping entity.
            </summary>
            <param name="impulse">Change in momentum to impart on the body.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyImpulse(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Boolean)">
            <summary>
            Applies the impulse to this object, changing its momentum and velocity instantly.
            This method does not use any buffering and is not thread safe; changes are made directly to velocities and momentums.
            </summary>
            <param name="pos">Origin of the impulse in world space.</param>
            <param name="direction">Direction of the impulse in world space.  Magnitude of direction corresponds to the magnitude of the impulse.</param>
            <param name="wakeUp">Whether or not to wake up the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyImpulse(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Applies the impulse to this object, changing its momentum and velocity instantly.
            Forces the object awake.
            This method does not use any buffering and is not thread safe; changes are made directly to velocities and momentums.
            </summary>
            <param name="pos">Origin of the impulse in world space.</param>
            <param name="direction">Direction of the impulse in world space.  Magnitude of direction corresponds to the magnitude of the impulse.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyLinearImpulse(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Instantly changes the linear momentum of the body by the given amount.
            Updates the velocity of the object.
            This method does not use any buffering and is not thread safe; changes are made directly to velocities and momentums.
            This method will not activate a sleeping entity.
            </summary>
            <param name="impulse">Change in momentum to impart on the body.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ApplyLinearImpulse(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Instantly changes the linear momentum of the body by the given amount.
            Updates the velocity of the object.
            This method does not use any buffering and is not thread safe; changes are made directly to velocities and momentums.
            This method will not activate a sleeping entity.
            </summary>
            <param name="impulse">Change in momentum to impart on the body.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ModifyAngularDamping(System.Single)">
            <summary>
            Applies extra damping on the next frame.
            </summary>
            <param name="damping">Additional damping to apply.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Entity.ModifyLinearDamping(System.Single)">
            <summary>
            Applies extra damping on the next frame.
            </summary>
            <param name="damping">Additional damping to apply.</param>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.AllowInterpolation">
            <summary>
            Gets or sets whether or not this entity's buffered states will be interpolated.
            If true, the centerPosition, centerOfMass, orientationQuaternion, and orientationMatrix properties will all be interpolated
            when simulationSettings.timeStep.useInternalTimeStepping is enabled.
            If false, no interpolation takes place.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.AllowedPenetration">
            <summary>
            Gets and sets the slop area around the margin of objects.  Helps stabilize collisions.
            Setting the value of this property on a compound body will also set the value on all children.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.AngularMomentum">
            <summary>
            Gets and sets the angular momentum of the body.
            This value defaults to zero for nondynamic bodies, and changing it does not affect nondynamic motion.
            To change a nondynamic body's motion, change velocity.
            This state is buffered and thread-safe; writes to this property are performed at the beginning of a physics step and its value is updated at the end of a physics step.
            If the entity does not yet belong to a space, the internal, unbuffered values are accessed directly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.AngularVelocity">
            <summary>
            Gets and sets the angular velocity of the entity.
            This state is buffered and thread-safe; writes to this property are performed at the beginning of a physics step and its value is updated at the end of a physics step.
            If the entity does not yet belong to a space, the internal, unbuffered values are accessed directly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Bounciness">
            <summary>
            Gets and sets the coefficient of restitution of the body.
            Setting the value of this property on a compound body will also set the value on all children.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.BoundingBox">
            <summary>
            Gets the axis-aligned bounding box encompassing the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.CenterOfMass">
            <summary>
            Gets and sets the world space coordinates of the center of mass of the object.
            This state is buffered and thread-safe; writes to this property are performed at the beginning of a physics step and its value is updated at the end of a physics step.
            Includes an interpolation component if simulationSettings.timeStep.useInternalTimeStepping and allowInterpolation are enabled.
            Setting this value changes the offset of the center of mass from the geometric center.
            If the entity does not yet belong to a space, the internal, unbuffered values are accessed directly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.CenterOfMassOffset">
            <summary>
            Gets and sets the offset from the geometric center of the object (centerPosition) to the center of mass with identity orientation.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.CenterPosition">
            <summary>
            Gets and sets the geometric center of the entity.
            This state is buffered and thread-safe; writes to this property are performed at the beginning of a physics step and its value is updated at the end of a physics step.
            Includes an interpolation component if simulationSettings.timeStep.useInternalTimeStepping and allowInterpolation are enabled.
            If the entity does not yet belong to a space, the internal, unbuffered values are accessed directly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.CollisionMargin">
            <summary>
            Gets and sets the amount of extra space around the entity used in collision calculations.
            Setting the value of this property on a compound body will also set the value on all children.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.CollisionPairs">
            <summary>
            Gets the list of collision pairs involving this entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.CollisionRules">
            <summary>
            Gets and sets the collision rules of this entity.
            When setting this value on a compound body, all children of the compound body will inherit the set value recursively.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.CompoundBody">
            <summary>
            The CompoundBody this object belongs to.
            Null if none.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Constraints">
            <summary>
            Gets the list of constraints involving this entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Density">
            <summary>
            Gets the density of the object, defined by default as mass / volume.
            For kinematic entities, this value defaults to infinity.
            Changing this value will not necessarily change the mass properties of this entity;
            it can be used to tune buoyancy and other behavior.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.DynamicFriction">
            <summary>
            Gets and sets the coefficient of dynamic friction of the body.
            Used in contact when a contact has a relative velocity greater than the space.simulationSettings.staticFrictionVelocityThreshold.
            Setting the value of this property on a compound body will also set the value on all children.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.EventManager">
            <summary>
            Gets the event manager responsible for managing this entity's events and allowing for the addition or removal of events.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InternalAngularMomentum">
            <summary>
            Gets and sets the angular momentum of the body.
            This value defaults to zero for nondynamic bodies, and changing it does not affect nondynamic motion.
            To change a nondynamic body's motion, change velocity.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InternalAngularVelocity">
            <summary>
            Gets and sets the angular velocity of the entity.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InternalCenterOfMass">
            <summary>
            Gets and sets the world space coordinates of the center of mass of the object.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            Setting this value changes the offset of the center of mass from the geometric center.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InternalCenterPosition">
            <summary>
            Gets and sets the geometric center of the entity.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InternalLinearMomentum">
            <summary>
            Gets and sets the linear momentum of the body.
            This value defaults to zero for nondynamic bodies, and changing it does not affect nondynamic motion.
            To change a nondynamic body's motion, change velocity.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InternalLinearVelocity">
            <summary>
            Gets and sets the linear velocity of the entity.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InternalMotionState">
            <summary>
            Gets and sets the entity's current movement information.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InternalOrientationMatrix">
            <summary>
            Gets and sets the orientation of the entity represented in rotation matrix form.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InternalOrientationQuaternion">
            <summary>
            Gets and sets the orientation of the entity.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InternalWorldTransform">
            <summary>
            Gets and sets a rigid transformation representing the orientation and position of the entity.
            This state is unbuffered; it directly reads and writes internal values and is NOT thread-safe.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.IsActive">
            <summary>
            Gets and sets whether or not this object is currently considered active by the deactivation system.
            Deactivated objects consume very little resources.  
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.IsAffectedByGravity">
            <summary>
            Gets or sets whether or not the entity is affected by gravity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.IsAlwaysActive">
            <summary>
            Gets or sets whether or not this object can deactivate.
            Deactivated objects require far less computation each frame.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.IsCompoundBodyChild">
            <summary>
            Whether or not this entity has a CompoundBody parent.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.LinearMomentum">
            <summary>
            Gets and sets the linear momentum of the body.
            This value defaults to zero for nondynamic bodies, and changing it does not affect nondynamic motion.
            To change a nondynamic body's motion, change velocity.
            This state is buffered and thread-safe; writes to this property are performed at the beginning of a physics step and its value is updated at the end of a physics step.
            If the entity does not yet belong to a space, the internal, unbuffered values are accessed directly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.LinearVelocity">
            <summary>
            Gets and sets the linear velocity of the entity.
            This state is buffered and thread-safe; writes to this property are performed at the beginning of a physics step and its value is updated at the end of a physics step.
            If the entity does not yet belong to a space, the internal, unbuffered values are accessed directly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.LocalInertiaTensor">
            <summary>
            Gets and sets the local space inertia tensor of this object.
            Automatically updates the local space inverse inertia tensor accordingly when set.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.LocalInertiaTensorInverse">
            <summary>
            Gets and sets the local space inertia tensor inverse of this object.
            Automatically updates the local space inertia tensor accordingly when set.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Locker">
            <summary>
            Gets the synchronization object that can be locked against during procedures that need exclusive access to the entity's fields in the solver or parallel updateables.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.MaximumRadius">
            <summary>
            Gets the distance from the center of mass of the entity to the furthest point on the non-margin expanded shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.MaximumRadiusFromCenterPosition">
            <summary>
            Gets the distance from the center position of the entity to the furthest point on the non-margin expanded shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.MotionState">
            <summary>
            Gets and sets the entity's current movement information.
            This state is buffered and thread-safe; writes to this property are performed at the beginning of a physics step and its value is updated at the end of a physics step.
            The motionState's centerPosition, centerOfMass, orientationMatrix, and orientationQuaternion properties
            include an interpolation component if simulationSettings.timeStep.useInternalTimeStepping and allowInterpolation are enabled.
            If the entity does not yet belong to a space, the internal, unbuffered values are accessed directly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.MotionStateIndex">
            <summary>
            Gets the index of this entity in the space's motion state arrays.
            This index can be used to index into the arrays retrieved using Space.getMotionStates.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.OrientationMatrix">
            <summary>
            Gets and sets the orientation of the entity represented in rotation matrix form.
            This state is buffered and thread-safe; writes to this property are performed at the beginning of a physics step and its value is updated at the end of a physics step.
            Includes an interpolation component if simulationSettings.timeStep.useInternalTimeStepping and allowInterpolation are enabled.
            If the entity does not yet belong to a space, the internal, unbuffered values are accessed directly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.OrientationQuaternion">
            <summary>
            Gets and sets the orientation of the entity.
            This state is buffered and thread-safe; writes to this property are performed at the beginning of a physics step and its value is updated at the end of a physics step.
            Includes an interpolation component if simulationSettings.timeStep.useInternalTimeStepping and allowInterpolation are enabled.
            If the entity does not yet belong to a space, the internal, unbuffered values are accessed directly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Parent">
            <summary>
            Gets the highest ranked compound body related to this entity.
            If no compound body parent exists, the parent is the entity itself.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.SimulationIsland">
            <summary>
            Gets the simulation island that the entity belongs to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.SolverUpdateables">
            <summary>
            Gets the list of solver updateables (other than collision pairs and constraints) involving this entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Space">
            <summary>
            Space in which the entity resides.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.StaticFriction">
            <summary>
            Gets and sets the coefficient of static friction of the body.
            Used in contact when a contact has a relative velocity less than the space.simulationSettings.staticFrictionVelocityThreshold.
            Setting the value of this property on a compound body will also set the value on all children.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Tag">
            <summary>
            Gets or sets special data associated with this entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Volume">
            <summary>
            Gets the volume of the entity not including any collision margin.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.WorldTransform">
            <summary>
            Gets and sets a rigid transformation representing the orientation and position of the entity.
            This state is buffered and thread-safe; writes to this property are performed at the beginning of a physics step and its value is updated at the end of a physics step.
            Includes an interpolation component if simulationSettings.timeStep.useInternalTimeStepping and allowInterpolation are enabled.
            If the entity does not yet belong to a space, the internal, unbuffered values are accessed directly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.AngularDamping">
            <summary>
            Gets or sets the fraction of angular momentum to be removed per second.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InertiaTensor">
            <summary>
            Gets the inertia tensor inverse updated for the current rotation of the body.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.InertiaTensorInverse">
            <summary>
            Gets the inertia tensor updated for the current rotation of the body.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.IsDynamic">
            <summary>
            Gets whether or not this object responds to and acts based on forces and torques.
            If false, the entity is kinematic; kinematic entities can be thought of as having infinite mass and inertia.
            Collisions will not affect their velocity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.LinearDamping">
            <summary>
            Gets or sets the fraction of linear momentum to be removed per second.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.Mass">
            <summary>
            Gets or sets the mass of the entity.
            Changing the value of mass on a dynamic entity will prompt a recalculation of other physical properties, like the inertia tensor.
            
            Setting the mass to a value less than or equal to zero or greater than or equal to float.MaxValue
            will make the entity kinematic.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.TotalForce">
            <summary>
            Total change in linear momentum between the current and previous frame.
            Since this is on a per-timestep basis, consider dividing by the simulation's timestep duration to get the extrapolated "force" using seconds as the unit of time.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Entity.TotalTorque">
            <summary>
            Total change in angular momentum between the current and previous frame.
            Since this is on a per-timestep basis, consider dividing by the simulation's timestep duration to get the extrapolated "torque" using seconds as the unit of time.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Cone.Height">
            <summary>
            Height of the cone.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Cone.Radius">
            <summary>
            Radius of the cone.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Cone.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated cone.
            </summary>
            <param name="pos">Position of the cone.</param>
            <param name="high">Height of the cone.</param>
            <param name="rad">Radius of the cone.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cone.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic cone.
            </summary>
            <param name="pos">Position of the cone.</param>
            <param name="high">Height of the cone.</param>
            <param name="rad">Radius of the cone.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cone.#ctor(BEPUphysics.DataStructures.MotionState,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated cone.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="high">Height of the cone.</param>
            <param name="rad">Radius of the cone.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cone.#ctor(BEPUphysics.DataStructures.MotionState,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic cone.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="high">Height of the cone.</param>
            <param name="rad">Radius of the cone.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cone.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cone.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cone.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.AngularMotor">
            <summary>
            Constraint which attempts to restrict the relative angular motion of two entities.
            Can use a target relative orientation to apply additional force.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.AngularMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new constraint which attempts to restrict the relative angular motion of two entities.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.AngularMotor.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.AngularMotor.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.AngularMotor.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.AngularMotor.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.AngularMotor.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.AngularMotor.ApplyImpulse(System.Single)">
            <summary>
            Applies the corrective impulses required by the constraint.
            </summary>
            <param name="dt">Time between frames.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.AngularMotor.PreStep(System.Single)">
            <summary>
            Initializes the constraint for the current frame.
            </summary>
            <param name="dt">Time between frames.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.AngularMotor.Basis">
            <summary>
            Gets the basis attached to entity A.
            The target velocity/orientation of this motor is transformed by the basis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.AngularMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.AngularMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.AngularMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.AngularMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, error is zero.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.RevoluteAngularJoint">
            <summary>
            Constrains two entities to rotate only around a single axis.
            Acts like the angular portion of a hinge joint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteAngularJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new orientation joint.
            Orientation joints can be used to simulate the angular portion of a hinge.
            Orientation joints allow rotation around only a single axis.
            </summary>
            <param name="connectionA">First entity connected in the orientation joint.</param>
            <param name="connectionB">Second entity connected in the orientation joint.</param>
            <param name="freeAxis">Axis allowed to rotate freely in world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteAngularJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteAngularJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteAngularJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteAngularJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteAngularJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="massMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteAngularJoint.LocalFreeAxisA">
            <summary>
            Gets or sets the free axis in connection A's local space.
            Updates the internal restricted axes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteAngularJoint.LocalFreeAxisB">
            <summary>
            Gets or sets the free axis in connection B's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteAngularJoint.WorldFreeAxisA">
            <summary>
            Gets or sets the free axis attached to connection A in world space.
            This does not change the other connection's free axis.
            Updates the internal restricted axes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteAngularJoint.WorldFreeAxisB">
            <summary>
            Gets or sets the free axis attached to connection A in world space.
            This does not change the other connection's free axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteAngularJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteAngularJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteAngularJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.CustomizableSolverGroup">
            <summary>
            Constraint made from other constraints.
            Putting constraints into a solver group can help with organization and, in some cases, performance.
            
            If you have multiple constraints between the same two entities, putting the constraints into a 
            CustomizableSolverGroup can lower lock contention.
            
            Be careful about overloading a single solvergroup; it should be kept relatively small to ensure that the multithreading loads stay balanced.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.CustomizableSolverGroup.Add(BEPUphysics.SolverUpdateable)">
            <summary>
            Adds a new solver updateable to the solver group.
            </summary>
            <param name="solverUpdateable">Solver updateable to add.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.CustomizableSolverGroup.Remove(BEPUphysics.SolverUpdateable)">
            <summary>
            Removes a solver updateable from the solver group.
            </summary>
            <param name="solverUpdateable">Solver updateable to remove.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.PrismaticJoint">
            <summary>
            Restricts two degrees of linear freedom and all three degrees of angular freedom.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.PrismaticJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new constraint which restricts two degrees of linear freedom and all three degrees of angular freedom.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="lineAnchor">Location of the anchor for the line to be attached to connectionA in world space.</param>
            <param name="lineDirection">Axis in world space to be attached to connectionA along which connectionB can move.</param>
            <param name="pointAnchor">Location of the anchor for the point to be attached to connectionB in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.PrismaticJoint.AngularJoint">
            <summary>
            Gets the angular joint which removes three degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PrismaticJoint.Limit">
            <summary>
            Gets the distance limits for the slider.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PrismaticJoint.Motor">
            <summary>
            Gets the slider motor.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PrismaticJoint.PointOnLineJoint">
            <summary>
            Gets the line joint that restricts two linear degrees of freedom.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.MaximumLinearSpeedConstraint">
            <summary>
            Prevents the target entity from moving faster than the specified speeds.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.MaximumLinearSpeedConstraint.#ctor(BEPUphysics.Entities.Entity,System.Single)">
            <summary>
            Constructs a maximum speed constraint.
            </summary>
            <param name="e">Affected entity.</param>
            <param name="maxSpeed">Maximum linear speed allowed.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.MaximumLinearSpeedConstraint.ApplyImpulse(System.Single)">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.MaximumLinearSpeedConstraint.PreStep(System.Single)">
            <summary>
            Calculates necessary information for velocity solving.
            Called automatically by space.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.MaximumLinearSpeedConstraint.MaximumForce">
            <summary>
            Gets and sets the maximum impulse that the constraint will attempt to apply when satisfying its requirements.
            This field can be used to simulate friction in a constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MaximumLinearSpeedConstraint.MaximumSpeed">
            <summary>
            Gets or sets the maximum linear speed that this constraint allows.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MaximumLinearSpeedConstraint.Softness">
            <summary>
            Gets and sets the softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            For motors, softness can be used to implement damping.  For a damping constant k, the appropriate softness is 1/k.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MaximumLinearSpeedConstraint.BEPUphysics#Constraints#I3DImpulseConstraint#RelativeVelocity">
            <summary>
            Gets the current relative velocity with respect to the constraint.
            For a single entity constraint, this is pretty straightforward as the
            velocity of the entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MaximumLinearSpeedConstraint.TotalImpulse">
            <summary>
            Gets the total impulse applied by the constraint.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.ConstantAngularSpeedCurve">
            <summary>
            Wrapper around an orientation curve that specifies a specific velocity at which to travel.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantAngularSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Quaternion})">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.ConstantAngularSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Quaternion},System.Int32)">
            <summary>
            Constructs a new constant speed curve.
            </summary>
            <param name="speed">Speed to maintain while traveling around a curve.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.DistanceLimit">
            <summary>
            A modified distance constraint allowing a range of lengths between two anchor points.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.JointLimit">
            <summary>
            Superclass of constraints which have a limited area of free movement.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.JointLimit.bounceVelocityThreshold">
            <summary>
            Minimum velocity necessary for a bounce to occur at a joint limit.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.JointLimit.bounciness">
            <summary>
            Bounciness of this joint limit.  0 is completely inelastic; 1 is completely elastic.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.JointLimit.margin">
            <summary>
            Small area that the constraint can be violated without applying position correction.  Helps avoid jitter.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointLimit.BounceVelocityThreshold">
            <summary>
            Gets or sets the minimum velocity necessary for a bounce to occur at a joint limit.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointLimit.Bounciness">
            <summary>
            Gets or sets the bounciness of this joint limit.  0 is completely inelastic; 1 is completely elastic.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointLimit.IsLimitActive">
            <summary>
            Gets whether or not the limit is currently working.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointLimit.Margin">
            <summary>
            Gets or sets the small area that the constraint can be violated without applying position correction.  Helps avoid jitter.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.DistanceLimit.maximumLength">
            <summary>
            Maximum distance allowed between the anchors.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.DistanceLimit.minimumLength">
            <summary>
            Minimum distance maintained between the anchors.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a distance limit joint.
            </summary>
            <param name="connectionA">First body connected to the distance limit.</param>
            <param name="connectionB">Second body connected to the distance limit.</param>
            <param name="anchorA">Connection to the spring from the first connected body in world space.</param>
            <param name="anchorB"> Connection to the spring from the second connected body in world space.</param>
            <param name="minimumLength">Minimum distance maintained between the anchors.</param>
            <param name="maximumLength">Maximum distance allowed between the anchors.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceLimit.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceLimit.ApplyImpulse(System.Single)">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceLimit.PreStep(System.Single)">
            <summary>
            Calculates necessary information for velocity solving.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceLimit.LocalAnchorA">
            <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceLimit.LocalAnchorB">
            <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceLimit.MaximumLength">
            <summary>
            Gets or sets the maximum distance allowed between the anchors.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceLimit.MinimumLength">
            <summary>
            Gets or sets the minimum distance maintained between the anchors.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceLimit.WorldAnchorA">
            <summary>
            Gets or sets the connection to the distance constraint from the first connected body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceLimit.WorldAnchorB">
            <summary>
            Gets or sets the connection to the distance constraint from the second connected body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceLimit.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Entities.MinkowskiSum">
            <summary>
            Shape representing the sweeping of one entity through another.  Can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.MinkowskiSum.EntityA">
            <summary>
            First entity in the sum.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.MinkowskiSum.EntityB">
            <summary>
            Second entity in the sum.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.MinkowskiSum.#ctor(Microsoft.Xna.Framework.Vector3,BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single)">
            <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
            <param name="pos">Position of the resulting shape.</param>
            <param name="a">First entity in the sum.</param>
            <param name="b">Second entity in the sum.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MinkowskiSum.#ctor(Microsoft.Xna.Framework.Vector3,BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a nondynamic minkowski sum of two entities.
            </summary>
            <param name="pos">Position of the resulting shape.</param>
            <param name="a">First entity in the sum.</param>
            <param name="b">Second entity in the sum.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MinkowskiSum.#ctor(BEPUphysics.DataStructures.MotionState,BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single)">
            <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="a">First entity in the sum.</param>
            <param name="b">Second entity in the sum.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MinkowskiSum.#ctor(BEPUphysics.DataStructures.MotionState,BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a nondynamic minkowski sum of two entities.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="a">First entity in the sum.</param>
            <param name="b">Second entity in the sum.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MinkowskiSum.BecomeDynamic(System.Single)">
            <summary>
            Converts the entity into a physical object.
            If it is already a physically simulated entity, its mass and associated inertia tensor will be updated accordingly.
            </summary>
            <param name="m">New mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MinkowskiSum.BecomeKinematic">
            <summary>
            Converts the entity into a nondynamic object.
            If the entity is already not physically simulated, this will do nothing.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.MinkowskiSum.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MinkowskiSum.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.MinkowskiSum.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="T:BEPUphysics.ManifoldUpdateSetting">
            <summary>
            Specifies options that a CollisionPair can use for its manifoldUpdateSetting to define how early out tests and interaction rules are used.
            </summary>
        </member>
        <member name="F:BEPUphysics.ManifoldUpdateSetting.AlwaysUpdate">
            <summary>
            The contact manifold will always run, regardless of early out tests and interaction rules.
            </summary>
        </member>
        <member name="F:BEPUphysics.ManifoldUpdateSetting.NeverUpdate">
            <summary>
            The contact manfiold will not update, regardless of early out tests and interaction rules.
            </summary>
        </member>
        <member name="F:BEPUphysics.ManifoldUpdateSetting.UpdateWhenAppropriate">
            <summary>
            The collision pair abide by early out tests and interaction rules.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPairTableKey.Equals(System.Object)">
            <summary>
            Determines equivalency based on the collidables being used by the collision pairs.
            </summary>
            <param name="o">Object for comparison.</param>
            <returns>Whether or not the objects use the same collidables.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionPairTableKey.GetHashCode">
            <summary>
            Gets the hash code of the collision pair based on its entities.
            </summary>
            <returns>Hash code of the collision pair.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionPair">
            <summary>
            Manages a pair of objects whose bounding boxes are overlapping.
            Creates contact points and resolves collisions.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.SeparatingAxis">
            <summary>
            Axis along which the two entities' projections are separated.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.Contacts">
            <summary>
            List of contacts between the entities currently being handled by the collision pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.ColliderA">
            <summary>
            First entity involved in the collision pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.ColliderB">
            <summary>
            Second entity involved in the collision pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.ParentA">
            <summary>
            Highest ranked entity related to the first collider.
            If the first collider is a part of a compound body system, this field refers to the highest ranked compound body.
            If no parent is present, this refers to the collider itself.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.ParentB">
            <summary>
            Highest ranked entity related to the second collider.
            If the second collider is a part of a compound body system, this field refers to the highest ranked compound body.
            If no parent is present, this refers to the collider itself.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.TimeOfImpact">
            <summary>
            The fraction of velocity in the last position update applied prior to a collision.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.NextPositionA">
            <summary>
            The next position to move to for colliderA to avoid interpenetration with another object.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.NextPositionB">
            <summary>
            The next position to move to for colliderB to avoid interpenetration with another object.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.NextOrientationA">
            <summary>
            The next orientation to use for colliderA to avoid interpenetration with another object.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.NextOrientationB">
            <summary>
            The next orientation to use for colliderB to avoid interpenetration with another object.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.CollisionRule">
            <summary>
            Collision rule currently used by the collision pair, determined by the involved entity's collisionRules settings when the pair was created.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.contactCache">
            <summary>
            Instead of harvesting points from a universal, lock-heavy resource pool, just use one dedicated to every collision pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.suppressCollisionEndedEvent">
            <summary>
            Sometimes, a contact list is cleared out prior to re-adding new contacts.
            Rather than firing a COLLISION ENDED! alert right in the middle of processing,
            setting this to true will keep it silent.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.suppressCollisionStartedEvent">
            <summary>
            Sometimes, a contact list is cleared out prior to re-adding new contacts.
            Rather than firing a COLLISION STARTED! alert right in the middle of processing,
            setting this to true will keep it silent.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.Bounciness">
            <summary>
            Bounciness used in the collision response for this pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.DynamicFriction">
            <summary>
            Dynamic friction coefficient used in the collision response for this pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionPair.StaticFriction">
            <summary>
            Static friction coefficient used in the collision response for this pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPair.#ctor">
            <summary>
            Constructs an uninitialized controller.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPair.Setup(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,BEPUphysics.Space)">
            <summary>
            Sets up the data of the collision pair as if it were being constructed.
            </summary>
            <param name="a">First entity in the collision.</param>
            <param name="b">Second entity in the collision.</param>
            <param name="s">Space in which the collision is taking place.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.UpdateCollisionDiscreteMpr(System.Single)">
             <summary>
             Identifies the state of the collision and generates contacts if needed using solely
             Minkowski Portal Refinement.
             </summary>
            <param name="dt">Time in seconds of physical logic covered during the frame.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.UpdateCollisionDiscreteMprgjk(System.Single)">
            <summary>
            A powerful hybrid of multiple methods, including a conservative test, ISAGJK,
            closest points GJK, and MPR.
            Additionally used in the translational and fully continuous detection methods.
            </summary>
            <param name="dt">Time in seconds of physical logic between frames.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.UpdateCollisionDiscreteGjk(System.Single)">
             <summary>
             The old, pre v0.6.0 detection system relying GJK boolean and closest points test.
             </summary>
            <param name="dt">Time in seconds of physical logic covered during the frame.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.UpdateCollisionDiscreteSphereSphere(System.Single,BEPUphysics.CollisionPair)">
            <summary>
            Updates the collision pair's collision status using the sphere-sphere special case.
            </summary>
            <param name="dt">Time since the last frame in seconds of physical logic.</param>
            <param name="pair">Collision pair to be updated.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.UpdateCollisionDiscreteSphereTriangle(System.Single,BEPUphysics.CollisionPair)">
            <summary>
            Updates the collision pair's collision status using the sphere-triangle special case.
            </summary>
            <param name="dt">Time since the last frame in seconds of physical logic.</param>
            <param name="pair">Collision pair to be updated.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.UpdateCollisionDiscreteSphereBox(System.Single,BEPUphysics.CollisionPair)">
            <summary>
            Updates the collision pair's collision status using the sphere-box special case.
            </summary>
            <param name="dt">Time since the last frame in seconds of physical logic.</param>
            <param name="pair">Collision pair to be updated.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.UpdateCollisionDiscreteBoxBox(System.Single,BEPUphysics.CollisionPair)">
            <summary>
            Updates the collision pair's collision status using the box-box special case.
            </summary>
            <param name="dt">Time since the last frame in seconds of physical logic.</param>
            <param name="pair">Collision pair to be updated.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.ContactRefreshOld">
            <summary>
            Refreshes the contact manifold, removing any out of date contacts
            and updating others.
            Should be called after each frame which has a collision in it.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPair.ContactRefresh">
            <summary>
            Refreshes the contact manifold, removing any out of date contacts
            and updating others.
            Should be called after each frame which has a collision in it.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPair.ContactReduction">
            <summary>
            Enforces the maximum number of contacts and maximizes the area of the manifold.  Should be called after contactRefresh().
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPair.FindManifoldHullVolume(Microsoft.Xna.Framework.Vector3@,System.Int32)">
            <summary>
            Finds the given contact manifold's area.
            </summary>
            <param name="normal">Normal of the deepest contact.</param>
            <param name="excluded">Index of the contact point to be excluded from the manifold.</param>
            <returns>Area of the manifold squared and multiplied by 4.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionPair.AddContact(BEPUphysics.Contact)">
            <summary>
            Adds the given contact to the manifold.
            </summary>
            <param name="contact">Contact to add.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.AddContact(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Adds a given contact to the manifold.
            </summary>
            <param name="position">Position of the contact.</param>
            <param name="normal">Normal of the contact.</param>
            <param name="depth">Depth of the contact.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.RemoveContact(BEPUphysics.Contact)">
            <summary>
            Removes the contact from the collision pair.
            </summary>
            <param name="contact">Contact to remove.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.RemoveContact(System.Int32)">
            <summary>
            Removes the contact from the collision pair.
            </summary>
            <param name="index">Index of the contact to remove.</param>
        </member>
        <member name="M:BEPUphysics.CollisionPair.ClearContacts">
            <summary>
            Clears all contacts from the collision pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPair.CheckIfCollisionEnded">
            <summary>
            Checks if there are any contacts, and if there aren't, call the onCollisionEnded events.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPair.CheckIfCollisionStarted">
            <summary>
            Checks if there are any contacts, and if there aren't, call the onCollisionEnded events.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPair.UpdateContactManifold(System.Single)">
            <summary>
            Manages, adds, and removes contacts from the collision pair's contact manifold according to the appropriate system.
            </summary>
            <param name="dt">Simulation timestep.</param>
        </member>
        <member name="F:BEPUphysics.CollisionPair.ManifoldUpdateSetting">
            <summary>
            Defines how the collision pair takes into account early out tests and interaction rules when updating the contact manifold.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPair.CollectInvolvedEntities(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Adds entities associated with the solver item to the involved entities list.
            Ensure that sortInvolvedEntities() is called at the end of the function.
            This allows the non-batched multithreading system to lock properly.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionPair.UpdateSolverActivity">
            <summary>
            Sets the activity state of the collision pair based on the activity state of its connections.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionPair.SlidingFriction">
            <summary>
            Gets the sliding friction constraint used by this collision pair.
            If the space's simulationSettings.collisionResponse.useCentralFriction is set to false,
            this returns null.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionPair.TwistFriction">
            <summary>
            Gets the twist friction constraint used by this collision pair.
            If the space's simulationSettings.collisionResponse.useCentralFriction is set to false,
            this returns null.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionPair.CollisionMargin">
            <summary>
            Extra space separating the objects of the collision pair.
            </summary>
        </member>
        <member name="P:BEPUphysics.CollisionPair.ShouldUpdate">
            <summary>
            Gets whether or not this collision pair should update.
            </summary>
        </member>
        <member name="T:BEPUphysics.Int3">
            <summary>
            Simple three-integer storage.
            </summary>
        </member>
        <member name="F:BEPUphysics.Int3.X">
            <summary>
            X axis component.
            </summary>
        </member>
        <member name="F:BEPUphysics.Int3.Y">
            <summary>
            Y axis component.
            </summary>
        </member>
        <member name="F:BEPUphysics.Int3.Z">
            <summary>
            Z axis component.
            </summary>
        </member>
        <member name="M:BEPUphysics.Int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an Int3.
            </summary>
            <param name="x">X axis component.</param>
            <param name="y">Y axis component.</param>
            <param name="z">Z axis component.</param>
        </member>
        <member name="M:BEPUphysics.Int3.Equals(System.Object)">
            <summary>
            Whether or not the components of the two int3's match.
            </summary>
            <param name="obj">Int3 to compare against.</param>
            <returns>Whether or not the Int3's match.</returns>
        </member>
        <member name="M:BEPUphysics.Int3.GetHashCode">
            <summary>
            Gets the hash code of the Int3 based on its components.
            </summary>
            <returns>Hash code of the object.</returns>
        </member>
        <member name="M:BEPUphysics.Int3.ToString">
            <summary>
            Returns a string representing the int3's data.
            </summary>
            <returns>Representative string.</returns>
        </member>
        <member name="T:BEPUphysics.DataStructures.PriorityQueue`1">
            <summary>
            Container allowing O(log(n)) insertion, O(1) removal of highest priority item, 
            peeking, element indexing, and enumeration of objects using an array-based minheap.
            Uses the IComparable interface to determine relative priority.
            </summary>
            <typeparam name="T">Type of object that the heap contains.</typeparam>
        </member>
        <member name="M:BEPUphysics.DataStructures.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Constructs a new priority queue.
            </summary>
            <param name="initialHeapSize">The size of the heap to use initially.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.PriorityQueue`1.#ctor">
            <summary>
            Constructs a new priority queue.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.PriorityQueue`1.Dequeue">
            <summary>
            Pops off the root of the Priority Queue and returns it.
            </summary>
            <returns>Highest priority item in the queue.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when they queue is empty.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Puts the item into the proper location within the Priority Queue.
            </summary>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.PriorityQueue`1.Peek">
            <summary>
            Returns the highest priority item without removing it from the queue.
            </summary>
            <returns>Highest priority item in the queue.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the queue is empty.</exception>
        </member>
        <member name="M:BEPUphysics.DataStructures.PriorityQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets the enumerator for this PriorityQueue.
            </summary>
            <returns>Enumerator for the current priority queue.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.PriorityQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for this PriorityQueue.
            </summary>
            <returns>Enumerator for the current priority queue.</returns>
        </member>
        <member name="P:BEPUphysics.DataStructures.PriorityQueue`1.Count">
            <summary>
            Number of elements within the priority queue.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.PriorityQueue`1.Item(System.Int32)">
            <summary>
            Gets an item from the heap by indexing into the internal heap array.
            </summary>
            <param name="i">Index used to find an element in the internal heap array.</param>
            <returns>Element at the given idnex.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when no element exists at the given index.</exception>
        </member>
        <member name="T:BEPUphysics.DataStructures.PriorityQueue`1.Enumerator">
            <summary>
            Object which moves through the PriorityQueue collection.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.PriorityQueue`1.Enumerator.Dispose">
            <summary>
            Disposes the enumerator.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.PriorityQueue`1.Enumerator.MoveNext">
            <summary>
            Moves the enumerator to the next position of the collection.
            </summary>
            <returns>Whether or not the move succeeded.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.PriorityQueue`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Moves the enumerator back to the beginning.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.PriorityQueue`1.Enumerator.Current">
            <summary>
            Gets the enumerator's current position's value.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.PriorityQueue`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the enumerator's current position's value.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SwivelHingeAngularJoint">
            <summary>
            Constrains two bodies so that they can rotate relative to each other like a modified door hinge.
            Instead of removing two degrees of freedom, only one is removed so that the second connection to the constraint can twist.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SwivelHingeAngularJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new constraint which allows relative angular motion around a hinge axis and a twist axis.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="worldHingeAxis">Hinge axis attached to connectionA.
            The connected entities will be able to rotate around this axis relative to each other.</param>
            <param name="worldTwistAxis">Twist axis attached to connectionB.
            The connected entities will be able to rotate around this axis relative to each other.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwivelHingeAngularJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwivelHingeAngularJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwivelHingeAngularJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwivelHingeAngularJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwivelHingeAngularJoint.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwivelHingeAngularJoint.ApplyImpulse(System.Single)">
            <summary>
            Solves for velocity.
            </summary>
            <param name="dt">Simulation time to next frame.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwivelHingeAngularJoint.PreStep(System.Single)">
            <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
            <param name="dt">Simulation step length.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeAngularJoint.LocalHingeAxis">
            <summary>
            Gets or sets the hinge axis attached to entity A in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeAngularJoint.LocalTwistAxis">
            <summary>
            Gets or sets the twist axis attached to entity B in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeAngularJoint.WorldHingeAxis">
            <summary>
            Gets or sets the hinge axis attached to entity A in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeAngularJoint.WorldTwistAxis">
            <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeAngularJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeAngularJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeAngularJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.WeldJoint">
            <summary>
            Restricts the linear and angular motion between two entities.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.WeldJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new constraint which restricts the linear and angular motion between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.WeldJoint.BallSocketJoint">
            <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.WeldJoint.NoRotationJoint">
            <summary>
            Gets the no rotation joint that prevents angular motion.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.CurveEndpointBehavior">
            <summary>
            Defines how a curve behaves beyond an endpoint.
            </summary>
        </member>
        <member name="F:BEPUphysics.Paths.CurveEndpointBehavior.Wrap">
            <summary>
            When the time exceeds the endpoint, it wraps around to the other end of the curve.
            </summary>
        </member>
        <member name="F:BEPUphysics.Paths.CurveEndpointBehavior.Clamp">
            <summary>
            Times exceeding the endpoint are clamped to the endpoint's value.
            </summary>
        </member>
        <member name="F:BEPUphysics.Paths.CurveEndpointBehavior.Mirror">
            <summary>
            Times exceeding the endpoint will reverse direction and sample backwards.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SwingLimit">
            <summary>
            Keeps the angle between the axes attached to two entities below some maximum value.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SwingLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Constructs a new constraint which attempts to restrict the maximum  of two entities to some value.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="axisA">Axis attached to the first connected entity.</param>
            <param name="axisB">Axis attached to the second connected entity.</param>
            <param name="maximumAngle">Maximum angle between the axes allowed.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwingLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwingLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwingLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwingLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwingLimit.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwingLimit.ApplyImpulse(System.Single)">
            <summary>
            Applies the sequential impulse.
            </summary>
            <param name="dt">Time since last frame.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SwingLimit.PreStep(System.Single)">
            <summary>
            Initializes the constraint for this frame.
            </summary>
            <param name="dt">Time since the last frame.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SwingLimit.LocalAxisA">
            <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwingLimit.LocalAxisB">
            <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwingLimit.MaximumAngle">
            <summary>
            Maximum angle allowed between the two axes, from 0 to pi.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwingLimit.WorldAxisA">
            <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwingLimit.WorldAxisB">
            <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwingLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwingLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwingLimit.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.LinearAxisMotor">
            <summary>
            Constrains the distance along an axis between anchor points attached to two entities.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a constraint which tries to keep anchors on two entities within a certain distance of each other along each of three axes.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="anchorA">World space point to attach to connection A that will be constrained.</param>
            <param name="anchorB">World space point to attach to connection B that will be constrained.</param>
            <param name="axis">Limited axis in world space to attach to connection A.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisMotor.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisMotor.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisMotor.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisMotor.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisMotor.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.AnchorA">
            <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.AnchorB">
            <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.Axis">
            <summary>
            Gets or sets the motorized axis in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.LocalAxis">
            <summary>
            Gets or sets the limited axis in the local space of connection A.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.LocalOffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.LocalOffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.OffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.OffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, the error will be zero.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SwivelHingeJoint">
            <summary>
            Restricts linear motion while allowing one degree of angular freedom.
            Acts like a tablet pc monitor hinge.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SwivelHingeJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and one degree of angular freedom between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="anchor">Point around which both entities rotate.</param>
            <param name="hingeAxis">Axis of allowed rotation in world space to be attached to connectionA.  Will be kept perpendicular with the twist axis.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeJoint.AngularJoint">
            <summary>
            Gets the angular joint which removes one degree of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeJoint.BallSocketJoint">
            <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeJoint.HingeLimit">
            <summary>
            Gets the rotational limit of the hinge.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeJoint.HingeMotor">
            <summary>
            Gets the motor of the hinge.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeJoint.TwistLimit">
            <summary>
            Gets the rotational limit of the swivel hinge.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SwivelHingeJoint.TwistMotor">
            <summary>
            Gets the twist motor of the swivel hinge.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.ContactPenetrationConstraintTester.ApplyImpulse">
            <summary>
            Computes and applies an impulse to keep the colliders from penetrating.
            </summary>
            <returns>Impulse applied.</returns>
        </member>
        <member name="T:BEPUphysics.Paths.CurveControlPointList`1">
            <summary>
            Collection of control points in a curve.
            </summary>
            <typeparam name="TValue">Type of values in the curve.</typeparam>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPointList`1.Add(BEPUphysics.Paths.CurveControlPoint{`0})">
            <summary>
            Adds a control point to the curve.
            </summary>
            <param name="point">New control point to add to the curve.</param>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPointList`1.Add(System.Single,`0)">
            <summary>
            Adds a new control point to the curve.
            </summary>
            <param name="time">Time of the new control point.</param>
            <param name="value">Value of the new control point.</param>
            <returns>Newly created control point.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPointList`1.Remove(BEPUphysics.Paths.CurveControlPoint{`0})">
            <summary>
            Removes the control point from the curve.
            </summary>
            <param name="controlPoint">Control point to remove.</param>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPointList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the control point from the curve.
            </summary>
            <param name="index">Index to remove at.</param>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPointList`1.Item(System.Int32)">
            <summary>
            Gets the control point at the given index.
            </summary>
            <param name="index">Index into the list.</param>
            <returns>Control point at the index.</returns>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPointList`1.Count">
            <summary>
            Gets the number of elements in the list.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPointList`1.Curve">
            <summary>
            Gets the curve associated with this control point list.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.CurveControlPoint`1">
            <summary>
            Point defining the shape of a 3D curve.
            </summary>
            <typeparam name="TValue">Type of values in the curve.</typeparam>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPoint`1.#ctor(System.Single,`0,BEPUphysics.Paths.Curve{`0})">
            <summary>
            Constructs a new 3D curve control point.
            </summary>
            <param name="time">Time at which the point is positioned.</param>
            <param name="value">Value of the control point.</param>
            <param name="curve">Curve associated with the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.CurveControlPoint`1.CompareTo(BEPUphysics.Paths.CurveControlPoint{`0})">
            <summary>
            Compares the two control points based on their time.
            </summary>
            <param name="other">Control point to compare.</param>
            <returns>-1 if the current instance has a smaller time, 0 if equal, and 1 if the current instance has a larger time.</returns>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPoint`1.Curve">
            <summary>
            Gets the curve associated with this control point.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPoint`1.Time">
            <summary>
            Gets or sets the time at which this control point is positioned.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.CurveControlPoint`1.Value">
            <summary>
            Gets or sets the value of this control point.
            </summary>
        </member>
        <member name="T:BEPUphysics.ContactData">
            <summary>
            Stores basic data used by some collision systems.
            </summary>
        </member>
        <member name="F:BEPUphysics.ContactData.Position">
            <summary>
            Position of the candidate contact.
            </summary>
        </member>
        <member name="F:BEPUphysics.ContactData.Depth">
            <summary>
            Depth of the candidate contact.
            </summary>
        </member>
        <member name="F:BEPUphysics.ContactData.Id">
            <summary>
            Id of the candidate contact.
            </summary>
        </member>
        <member name="M:BEPUphysics.ContactData.Equals(BEPUphysics.ContactData)">
            <summary>
            Returns true if the other data has the same id.
            </summary>
            <param name="other">Data to compare.</param>
            <returns>True if the other data has the same id, false otherwise.</returns>
        </member>
        <member name="T:BEPUphysics.ContactDataCache">
            <summary>
            Basic storage structure for contact data.
            Designed for performance critical code and pointer access.
            </summary>
        </member>
        <member name="F:BEPUphysics.ContactDataCache.Count">
            <summary>
            Number of elements in the cache.
            </summary>
        </member>
        <member name="M:BEPUphysics.ContactDataCache.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the given index.
            </summary>
            <param name="index">Index to remove.</param>
        </member>
        <member name="T:BEPUphysics.BoxBoxCollider">
            <summary>
            Contains helper methods for testing collisions between boxes.
            </summary>
        </member>
        <member name="M:BEPUphysics.BoxBoxCollider.AreBoxesColliding(BEPUphysics.Entities.Box,BEPUphysics.Entities.Box)">
            <summary>
            Determines if the two boxes are colliding.
            </summary>
            <param name="a">First box to collide.</param>
            <param name="b">Second box to collide.</param>
            <returns>Whether or not the boxes collide.</returns>
        </member>
        <member name="M:BEPUphysics.BoxBoxCollider.AreBoxesColliding(BEPUphysics.Entities.Box,BEPUphysics.Entities.Box,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if the two boxes are colliding.
            </summary>
            <param name="a">First box to collide.</param>
            <param name="b">Second box to collide.</param>
            <param name="separationDistance">Distance of separation.</param>
            <param name="separatingAxis">Axis of separation.</param>
            <returns>Whether or not the boxes collide.</returns>
        </member>
        <member name="M:BEPUphysics.BoxBoxCollider.AreBoxesCollidingWithPenetration(BEPUphysics.Entities.Box,BEPUphysics.Entities.Box,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if the two boxes are colliding, including penetration depth data.
            </summary>
            <param name="a">First box to collide.</param>
            <param name="b">Second box to collide.</param>
            <param name="distance">Distance of separation or penetration.</param>
            <param name="axis">Axis of separation or penetration.</param>
            <returns>Whether or not the boxes collide.</returns>
        </member>
        <member name="M:BEPUphysics.BoxBoxCollider.AreBoxesColliding(BEPUphysics.Entities.Box,BEPUphysics.Entities.Box,System.Single@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.DataStructures.TinyStructList{BEPUphysics.ContactData}@)">
            <summary>
            Determines if the two boxes are colliding and computes contact data.
            </summary>
            <param name="a">First box to collide.</param>
            <param name="b">Second box to collide.</param>
            <param name="distance">Distance of separation or penetration.</param>
            <param name="axis">Axis of separation or penetration.</param>
            <param name="contactData">Data</param>
            <returns>Whether or not the boxes collide.</returns>
        </member>
        <member name="M:BEPUphysics.BoxBoxCollider.AreBoxesColliding(BEPUphysics.Entities.Box,BEPUphysics.Entities.Box,System.Single@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.ContactDataCache@)">
            <summary>
            Determines if the two boxes are colliding and computes contact data.
            </summary>
            <param name="a">First box to collide.</param>
            <param name="b">Second box to collide.</param>
            <param name="distance">Distance of separation or penetration.</param>
            <param name="axis">Axis of separation or penetration.</param>
            <param name="contactData">Contact positions, depths, and ids.</param>
            <returns>Whether or not the boxes collide.</returns>
        </member>
        <member name="T:BEPUphysics.Vehicle.WheelSuspension">
            <summary>
            Allows the connected wheel and vehicle to smoothly absorb bumps.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelSuspension.#ctor(System.Single,System.Single,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new suspension for a wheel.
            </summary>
            <param name="stiffnessConstant">Strength of the spring.  Higher values resist compression more.</param>
            <param name="dampingConstant">Damping constant of the spring.  Higher values remove more momentum.</param>
            <param name="localDirection">Direction of the suspension in the vehicle's local space.  For a normal, straight down suspension, this would be (0, -1, 0).</param>
            <param name="restLength">Length of the suspension when uncompressed.</param>
            <param name="localAttachmentPoint">Place where the suspension hooks up to the body of the vehicle.</param>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.AllowedCompression">
            <summary>
            Gets or sets the allowed compression of the suspension before suspension forces take effect.
            Usually a very small number.  Used to prevent 'jitter' where the wheel leaves the ground due to spring forces repeatedly.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.CurrentLength">
            <summary>
            Gets the the current length of the suspension.
            This will be less than the restLength if the suspension is compressed.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.LocalAttachmentPoint">
            <summary>
            Gets or sets the attachment point of the suspension to the vehicle body in the body's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.LocalDirection">
            <summary>
            Gets or sets the direction of the wheel suspension in the local space of the vehicle body.
            A normal, straight suspension would be (0,-1,0).
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.MaximumSpringCorrectionSpeed">
            <summary>
            Gets or sets the maximum speed at which the suspension will try to return the suspension to rest length.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.MaximumSpringForce">
            <summary>
            Gets or sets the maximum force that can be applied by this suspension.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.RestLength">
            <summary>
            Gets or sets the length of the uncompressed suspension.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.TotalImpulse">
            <summary>
            Gets the force that the suspension is applying to support the vehicle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.Wheel">
            <summary>
            Gets the wheel that this suspension applies to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.WorldAttachmentPoint">
            <summary>
            Gets or sets the attachment point of the suspension to the vehicle body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.WorldDirection">
            <summary>
            Gets or sets the direction of the wheel suspension in the world space of the vehicle body.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.SolverSettings">
            <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSuspension.SpringSettings">
            <summary>
            Gets the spring settings that define the behavior of the suspension.
            </summary>
        </member>
        <member name="T:BEPUphysics.Threading.ThreadTaskManager">
            <summary>
            Keeps track of the threads currently available to the physics engine.
            </summary>
        </member>
        <member name="T:BEPUphysics.Threading.IThreadManager">
            <summary>
            Manages the engine's threads.
            </summary>
            <remarks>
            The thread manager is constructed with certain access assumptions in mind.
            When implementing custom thread managers, ensure that the requirements are met
            or exceeded with regard to concurrent access.
            </remarks>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.AddThread">
            <summary>
            Adds a new worker thread to the engine.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.AddThread(System.Action{System.Object},System.Object)">
            <summary>
            Adds a new worker thread to the engine.
            </summary>
            <param name="initialization">Function that the new thread will call before entering its work loop.</param>
            <param name="initializationInformation">Data to give the initializer.</param>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.EnqueueTask(System.Action{System.Object},System.Object)">
            <summary>
            Enqueues a task to the thread manager.
            This should be safe to call from multiple threads and from other tasks.
            </summary>
            <param name="taskBody">Method to run.</param>
            <param name="taskInformation">Data to give to the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
            <param name="startIndex">Inclusive starting index.</param>
            <param name="endIndex">Exclusive ending index.</param>
            <param name="loopBody">Function that handles an individual iteration of the loop.</param>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.RemoveThread">
            <summary>
            Removes a worker thread from the engine.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.IThreadManager.WaitForTaskCompletion">
            <summary>
            Waits until all tasks enqueued using enqueueTask are complete.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.IThreadManager.ThreadCount">
            <summary>
            Gets the number of threads currently managed by the thread manager.
            </summary>
        </member>
        <member name="F:BEPUphysics.Threading.ThreadTaskManager.currentTaskAllocationIndex">
            <summary>
            Index into the thread loop lists, incremented after each task allocation.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.#ctor">
            <summary>
            Constructs a new thread task manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.WaitForTaskCompletion">
            <summary>
            Blocks the current thread until all tasks have been completed.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.AddThread">
            <summary>
            Adds a thread to the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.AddThread(System.Action{System.Object},System.Object)">
            <summary>
            Adds a thread to the manager.
            </summary>
            <param name="initialization">A function to run to perform any initialization on the new thread.</param>
            <param name="initializationInformation">Data to give the ParameterizedThreadStart for initialization.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.RemoveThread">
            <summary>
            Removes a thread from the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.EnqueueTask(System.Action{System.Object},System.Object)">
            <summary>
            Gives the thread manager a new task to run.
            </summary>
            <param name="task">Task to run.</param>
            <param name="taskInformation">Information to be used by the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
            <param name="startIndex">Inclusive starting index.</param>
            <param name="endIndex">Exclusive ending index.</param>
            <param name="loopBody">Function that handles an individual iteration of the loop.</param>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.Dispose">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.EnqueueTaskSequentially(System.Action{System.Object},System.Object)">
            <summary>
            Enqueues a task.
            This method also does not perform any locking; it should only be called when all worker threads of the thread pool are idle and all calls to this method are from the same thread.
            </summary>
            <param name="task">Task to enqueue.</param>
            <param name="taskInformation">Information for the task.</param>
        </member>
        <member name="P:BEPUphysics.Threading.ThreadTaskManager.LoopTasksPerThread">
            <summary>
            Gets or sets the number of tasks to create per thread when doing forLoops.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.ThreadTaskManager.ThreadCount">
            <summary>
            Gets the number of threads currently handled by the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ThreadTaskManager.WorkerThread.ThreadExecutionLoop">
            <exception cref="T:System.ArithmeticException">Thrown when the thread encounters an invalid state; generally propagated float.NaN's.</exception>
        </member>
        <member name="T:BEPUphysics.Entities.Sphere">
            <summary>
            Ball-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Sphere.Radius">
            <summary>
            Radius of the sphere.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Sphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated sphere.
            </summary>
            <param name="pos">Position of the sphere.</param>
            <param name="rad">Radius of the sphere.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Sphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Constructs a nondynamic sphere.
            </summary>
            <param name="pos">Position of the sphere.</param>
            <param name="rad">Radius of the sphere.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Sphere.#ctor(BEPUphysics.DataStructures.MotionState,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated sphere.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="rad">Radius of the sphere.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Sphere.#ctor(BEPUphysics.DataStructures.MotionState,System.Single)">
            <summary>
            Constructs a nondynamic sphere.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="rad">Radius of the sphere.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Sphere.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Sphere.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Sphere.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Sphere.RayTest(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the intersection between the triangle and the ray.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around the object.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="t">Distance, in units of the length of the direction vector, to the hit location.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="T:BEPUphysics.Entities.Cylinder">
            <summary>
            Cylinder-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Cylinder.Height">
            <summary>
            Height of the cylinder.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Cylinder.Radius">
            <summary>
            Radius of the cylinder.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Cylinder.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated cylinder.
            </summary>
            <param name="pos">Position of the cylinder.</param>
            <param name="high">Height of the cylinder.</param>
            <param name="rad">Radius of the cylinder.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cylinder.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic cylinder.
            </summary>
            <param name="pos">Position of the cylinder.</param>
            <param name="high">Height of the cylinder.</param>
            <param name="rad">Radius of the cylinder.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cylinder.#ctor(BEPUphysics.DataStructures.MotionState,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated cylinder.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="high">Height of the cylinder.</param>
            <param name="rad">Radius of the cylinder.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cylinder.#ctor(BEPUphysics.DataStructures.MotionState,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic cylinder.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="high">Height of the cylinder.</param>
            <param name="rad">Radius of the cylinder.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cylinder.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cylinder.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Cylinder.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="T:BEPUphysics.MathExtensions.Matrix3X3">
            <summary>
            3 row, 3 column matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M13">
            <summary>
            Value at row 1, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M23">
            <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M31">
            <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M32">
            <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M33">
            <summary>
            Value at row 3, column 3 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 3 row, 3 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m13">Value at row 1, column 3 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
            <param name="m23">Value at row 2, column 3 of the matrix.</param>
            <param name="m31">Value at row 3, column 1 of the matrix.</param>
            <param name="m32">Value at row 3, column 2 of the matrix.</param>
            <param name="m33">Value at row 3, column 3 of the matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateCrossProduct(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Creates a skew symmetric matrix M from vector A such that M * B for some other vector B is equivalent to the cross product of A and B.
            </summary>
            <param name="v">Vector to base the matrix on.</param>
            <param name="result">Skew-symmetric matrix result.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromMatrix(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Creates a 3x3 matrix from an XNA 4x4 matrix.
            </summary>
            <param name="matrix4X4">Matrix to extract a 3x3 matrix from.</param>
            <param name="matrix3X3">Upper 3x3 matrix extracted from the XNA matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Constructs a uniform scaling matrix.
            </summary>
            <param name="scale">Value to use in the diagonal.</param>
            <param name="matrix">Scaling matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Invert(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Inverts the given matix.
            </summary>
            <param name="matrix">Matrix to be inverted.</param>
            <param name="result">Inverted matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Negate(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Subtract(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.ToMatrix4X4(BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <param name="b">Created 4x4 matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.ToMatrix4X4(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <returns>Created 4x4 matrix.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transform(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.TransformTranspose(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation transpose.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.TransformTranspose(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
            <param name="v">Vector3 to transform.</param>
            <param name="matrix">Matrix to use as the transformation transpose.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transpose(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transpose(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The matrix's determinant.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateQuaternion(BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Constructs a quaternion from a 3x3 rotation matrix.
            </summary>
            <param name="rotationMatrix">Rotation matrix to create the quaternion from.</param>
            <param name="quaternion">Quaternion based on the rotation matrix.</param>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Identity">
            <summary>
            Gets the 3x3 identity matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Backward">
            <summary>
            Gets or sets the backward vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Down">
            <summary>
            Gets or sets the down vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Forward">
            <summary>
            Gets or sets the forward vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Left">
            <summary>
            Gets or sets the left vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Right">
            <summary>
            Gets or sets the right vector of the matrix.
            </summary>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Up">
            <summary>
            Gets or sets the up vector of the matrix.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.MotorMode">
            <summary>
            Defines the behavior style of a motor.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.MotorMode.VelocityMotor">
            <summary>
            Velocity motors only work to try to reach some relative velocity.
            They have no position goal.
            
            When this type is selected, the motor settings' velocityMotor data will be used.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.MotorMode.Servomechanism">
            <summary>
            Servomechanisms change their velocity in order to reach some position goal.
            
            When this type is selected, the motor settings' servo data will be used.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.MotorSettings">
            <summary>
            Contains genereal settings for motors.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MotorSettings.MaximumForce">
            <summary>
            Gets and sets the maximum impulse that the constraint will attempt to apply when satisfying its requirements.
            This field can be used to simulate friction in a constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MotorSettings.Mode">
            <summary>
            Gets or sets what kind of motor this is.
            
            If velocityMotor is chosen, the motor will try to achieve some velocity using the VelocityMotorSettings.
            If servomechanism is chosen, the motor will try to reach some position using the ServoSettings.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.MotorSettings1D">
            <summary>
            Contains settings for motors which act on one degree of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MotorSettings1D.Servo">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MotorSettings1D.VelocityMotor">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a velocity motor.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.MotorSettings3D">
            <summary>
            Contains settings for motors which act on three degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MotorSettings3D.Servo">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MotorSettings3D.VelocityMotor">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a velocity motor.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.MotorSettingsOrientation">
            <summary>
            Contains settings for motors which act on two entities' relative orientation.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MotorSettingsOrientation.Servo">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.MotorSettingsOrientation.VelocityMotor">
            <summary>
            Gets the settings that govern the behavior of this motor if it is a velocity motor.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.ServoSettings">
            <summary>
            Defines the behavior of a servo.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.ServoSettings.baseCorrectiveSpeed">
            <summary>
            Speed at which the servo will try to achieve its goal.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.ServoSettings.maxCorrectiveVelocity">
            <summary>
            Maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.ServoSettings.maxCorrectiveVelocitySquared">
            <summary>
            Squared maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.ServoSettings.springSettings">
            <summary>
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ServoSettings.BaseCorrectiveSpeed">
            <summary>
            Gets and sets the speed at which the servo will try to achieve its goal.
            This is inactive if the constraint is not in servo mode.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ServoSettings.MaxCorrectiveVelocity">
            <summary>
            Gets or sets the maximum extra velocity that the constraint will apply in an effort to correct any constraint error.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ServoSettings.SpringSettings">
            <summary>
            Gets the spring settings used by the constraint.
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.ServoSettings1D">
            <summary>
            Defines the behavior of a servo that works on one degree of freedom.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ServoSettings1D.Goal">
            <summary>
            Gets or sets the goal position of the servo.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.ServoSettings3D">
            <summary>
            Defines the behavior of a servo that works on three degrees of freedom.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ServoSettings3D.Goal">
            <summary>
            Gets or sets the goal position of the servo.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.ServoSettingsOrientation">
            <summary>
            Defines the behavior of a servo that works on the relative orientation of two entities.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ServoSettingsOrientation.Goal">
            <summary>
            Gets or sets the goal orientation of the servo.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.VelocityMotorSettings">
            <summary>
            Defines the behavior of a velocity motor.
            Used when the MotorSettings' motorType is set to velocityMotor.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.VelocityMotorSettings.softness">
            <summary>
            Softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.VelocityMotorSettings.Softness">
            <summary>
            Gets and sets the softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            For motors, softness can be used to implement damping.  For a damping constant k, the appropriate softness is 1/k.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.VelocityMotorSettings1D">
            <summary>
            Defines the behavior of a velocity motor that works on one degree of freedom.
            Used when the MotorSettings' motorType is set to velocityMotor.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.VelocityMotorSettings1D.GoalVelocity">
            <summary>
            Gets or sets the goal velocity of the motor.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.VelocityMotorSettings3D">
            <summary>
            Defines the behavior of a velocity motor that works on three degrees of freedom.
            Used when the MotorSettings' motorType is set to velocityMotor.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.VelocityMotorSettings3D.GoalVelocity">
            <summary>
            Gets or sets the goal position of the servo.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.NoRotationJoint">
            <summary>
            Constrains two entities so that they cannot rotate relative to each other.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.NoRotationJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new constraint which prevents relative angular motion between the two connected bodies.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.NoRotationJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.NoRotationJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.NoRotationJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.NoRotationJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
            <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.NoRotationJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.NoRotationJoint.ApplyImpulse(System.Single)">
            <summary>
            Applies the corrective impulses required by the constraint.
            </summary>
            <param name="dt">Time between frames.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.NoRotationJoint.PreStep(System.Single)">
            <summary>
            Initializes the constraint for the current frame.
            </summary>
            <param name="dt">Time between frames.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.NoRotationJoint.InitialOrientationA">
            <summary>
            Gets or sets the initial orientation of the first connected entity.
            The constraint will try to maintain the relative orientation between the initialOrientationA and initialOrientationB.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.NoRotationJoint.InitialOrientationB">
            <summary>
            Gets or sets the initial orientation of the second connected entity.
            The constraint will try to maintain the relative orientation between the initialOrientationA and initialOrientationB.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.NoRotationJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.NoRotationJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.NoRotationJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.DirectEnumerationSolver">
            <summary>
            Solves the penetration constraints in a collision pair at once.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.ContactFrictionConstraint">
            <summary>
            Computes the friction force for a contact when central friction is disabled.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.ContactFrictionConstraint.PreStep(System.Single)">
            <summary>
            Initializes the constraint for this frame.
            </summary>
            <param name="dt">Time since the last frame.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.ContactFrictionConstraint.FrictionDirection">
            <summary>
            Gets the direction in which the friction force acts.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.ContactFrictionConstraint.TotalForce">
            <summary>
            Gets the total force applied by this friction constraint.
            </summary>
        </member>
        <member name="T:BEPUphysics.ForceFields.ForceFieldShape">
            <summary>
            Superclass of force field shapes that test whether or not entities are affected by a forcefield.
            </summary>
        </member>
        <member name="M:BEPUphysics.ForceFields.ForceFieldShape.GetPossiblyAffectedEntities">
            <summary>
            Uses an efficient query to see what entities may be affected.
            Usually uses a broadphase bounding box query.
            </summary>
            <returns>Possibly affected entities.</returns>
        </member>
        <member name="M:BEPUphysics.ForceFields.ForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
            <summary>
            Performs a narrow-phase test to see if an entity is affected by the force field.
            </summary>
            <param name="entity">Entity to test.</param>
            <returns>Whether or not the entity is affected.</returns>
        </member>
        <member name="P:BEPUphysics.ForceFields.ForceFieldShape.ForceField">
            <summary>
            Force field associated with this shape.
            </summary>
        </member>
        <member name="T:BEPUphysics.Vehicle.RaycastWheelShape">
            <summary>
            Uses a raycast as the shape of a wheel.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.#ctor(System.Single,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a new raycast based wheel shape.
            </summary>
            <param name="graphicalRadius">Graphical radius of the wheel.
            This is not used for simulation.  It is only used in
            determining aesthetic properties of a vehicle wheel,
            like position and orientation.</param>
            <param name="localGraphicTransform">Local graphic transform of the wheel shape.
            This transform is applied first when creating the shape's worldTransform.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.UpdateWorldTransform">
            <summary>
            Updates the wheel's world transform for graphics.
            Called automatically by the owning wheel at the end of each frame.
            If the engine is updating asynchronously, you can call this inside of a space read buffer lock
            and update the wheel transforms safely.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.FindSupport(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,BEPUphysics.Entities.Entity@)">
            <summary>
            Finds a supporting entity, the contact location, and the contact normal.
            </summary>
            <param name="location">Contact point between the wheel and the support.</param>
            <param name="normal">Contact normal between the wheel and the support.</param>
            <param name="suspensionLength">Length of the suspension at the contact.</param>
            <param name="entity">Supporting object.</param>
            <returns>Whether or not any support was found.</returns>
        </member>
        <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.Initialize">
            <summary>
            Initializes the detector entity and any other necessary logic.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.UpdateDetectorPosition">
            <summary>
            Updates the position of the detector before each step.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.RaycastWheelShape.Radius">
            <summary>
            Gets or sets the graphical radius of the wheel.
            This is not used for simulation.  It is only used in
            determining aesthetic properties of a vehicle wheel,
            like position and orientation.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.RaycastWheelShape.IncludeCollisionMargins">
            <summary>
            Gets or sets whether or not to include entities' collision margins
            when raycasting.  This only applies to entities that are not triangles.
            The includeTriangleCollisionMargins handles the triangle entity case.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.RaycastWheelShape.IncludeTriangleCollisionMargins">
            <summary>
            Gets or sets whether or not to include triangle entities' collision margins
            when raycasting.  Not including their margin allows a faster special case
            raycast to be used.
            </summary>
        </member>
        <member name="T:BEPUphysics.DataStructures.TriangleMesh">
            <summary>
            Manages a mesh of triangles.  Supports various efficient queries.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.Save(BEPUphysics.DataStructures.TriangleMesh,System.IO.Stream)">
            <summary>
            Serializes the triangle mesh object into a binary format and sends it into the stream.
            </summary>
            <param name="mesh">Mesh to serialize.</param>
            <param name="saveStream">Stream to save the mesh into.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.Load(System.IO.Stream)">
            <summary>
            Deserializes a triangle mesh object from the stream.
            </summary>
            <param name="loadStream">Stream to load from.</param>
            <returns>Loaded triangle mesh.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.Save(BEPUphysics.DataStructures.TriangleMesh,System.String)">
            <summary>
            Saves the mesh object to the file at the given name.
            </summary>
            <param name="mesh">Mesh to save.</param>
            <param name="fileName">File to save into.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.Load(System.String)">
            <summary>
            Deserializes a triangle mesh object from the file.
            </summary>
            <param name="fileName">File to load from.</param>
            <returns>Loaded triangle mesh.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.OnDeserialization(System.Object)">
            <summary>
            Fills in the gaps of information left during deserialization.
            </summary>
            <param name="sender">Null.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.GetVerticesAndIndicesFromModel(Microsoft.Xna.Framework.Graphics.Model,BEPUphysics.DataStructures.TriangleMeshVertex[]@,System.Int32[]@)">
            <summary>
            Gets an array of vertices and indices from the provided model.
            </summary>
            <param name="collisionModel">Model to use for the collision shape.</param>
            <param name="vertices">Compiled set of vertices from the model.</param>
            <param name="indices">Compiled set of indices from the model.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.GetVerticesAndIndicesFromModel(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Vector3[]@,System.Int32[]@)">
            <summary>
            Gets an array of vertices and indices from the provided model.
            </summary>
            <param name="collisionModel">Model to use for the collision shape.</param>
            <param name="vertices">Compiled set of vertices from the model.</param>
            <param name="indices">Compiled set of indices from the model.</param>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleMesh.Vertices">
            <summary>
            Vertices of triangles in the mesh.
            Altering the vertex positions in the list requires a call to hierarchy.refit().
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleMesh.Indices">
            <summary>
            Indices defining the faces of the triangle mesh.
            Altering the indices list requires a reconstruction of the hierarchy by calling hierarchy.reconstructHierarchy().
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleMesh.Hierarchy">
            <summary>
            Acceleration structure used by this triangle mesh for queries.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.Move(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Translates the triangle mesh.
            </summary>
            <param name="v">Translation to apply.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.Rotate(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Rotates the triangle mesh incrementally.
            </summary>
            <param name="axis">Axis to rotate the group around.</param>
            <param name="angle">Amount to rotate.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.#ctor(BEPUphysics.DataStructures.TriangleMeshVertex[],System.Int32[])">
            <summary>
            Constructs a triangle mesh.
            </summary>
            <param name="vertices">Vertices of the triangle mesh.</param>
            <param name="indices">Indices defining the faces of the triangle mesh.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.#ctor(BEPUphysics.DataStructures.TriangleMeshVertex[],System.Int32[],System.Single)">
            <summary>
            Constructs a triangle mesh.
            </summary>
            <param name="vertices">Vertices of the triangle mesh.</param>
            <param name="indices">Indices defining the faces of the triangle mesh.</param>
            <param name="margin">Length by which to expand the bounding boxes of the bounding volume hierarchy in each direction.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.GetTransformedPosition(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Transforms the given position by the world matrix of the triangle mesh.
            </summary>
            <param name="position">Position to transform.</param>
            <returns>Transformed position.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.GetTransformedPosition(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the given position by the world matrix of the triangle mesh.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transformedPosition">Transformed position.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.GetTransformedPosition(System.Int32)">
            <summary>
            Transforms the vertex position at the given index by the world matrix of the triangle mesh.
            </summary>
            <param name="index">Index to transform.</param>
            <returns>Transformed position.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.GetTransformedPosition(System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vertex position at the given index by the world matrix of the triangle mesh.
            </summary>
            <param name="index">Position to transform.</param>
            <param name="transformedPosition">Transformed position.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Determines if a raycast hit the triangle mesh.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Int32@)">
            <summary>
            Determines the number of hits between the ray and the target.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitCount">Number of triangles the ray hit.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single},System.Boolean)">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <param name="removeRedundancies">If enabled, only the first encountered redundant hit is used.  Redundant hits can occur when the ray passes between the border of two or more triangles.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <param name="firstVertexIndices">The first vertex index of each triangle hit by the ray along its path.</param>
            <param name="secondVertexIndices">The second vertex index of each triangle hit by the ray along its path.</param>
            <param name="thirdVertexIndices">The third vertex index of each triangle hit by the ray along its path.</param>
            <param name="removeRedundancies">If enabled, only the first encountered redundant hit is used.  Redundant hits can occur when the ray passes between the border of two or more triangles.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Single},System.Boolean)">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <param name="firstVertexIndices">The first vertex index of each triangle hit by the ray along its path.</param>
            <param name="secondVertexIndices">The second vertex index of each triangle hit by the ray along its path.</param>
            <param name="thirdVertexIndices">The third vertex index of each triangle hit by the ray along its path.</param>
            <param name="barycentricCoords">The weightings of the first, second, and third vertices composing the hit location for each hit triangle.  Each 3 floats compose the coordinates of one triangle.</param>
            <param name="removeRedundancies">If enabled, only the first encountered redundant hit is used.  Redundant hits can occur when the ray passes between the border of two or more triangles.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="P:BEPUphysics.DataStructures.TriangleMesh.WorldMatrix">
            <summary>
            Transformation matrix to apply to all vertex positions when calculating bounding volumes.
            Automatically calls refit internally.
            </summary>
        </member>
        <member name="T:BEPUphysics.MotionStateManager">
            <summary>
            Handles the updating and swapping of motion state buffers.
            </summary>
        </member>
        <member name="F:BEPUphysics.MotionStateManager.LockerMotionStateBuffers">
            <summary>
            Synchronization object locked against by the engine before flipping the motion state buffers.
            If the physics engine is ready to update the motion states buffer and this lock is active, the engine will block and wait.
            This is useful to gather motion state information from the engine without the engine flipping the buffers midway through the gathering process.
            </summary>
        </member>
        <member name="M:BEPUphysics.MotionStateManager.GetMotionStates(BEPUphysics.DataStructures.MotionState[])">
            <summary>
            Copies the current motion states of all entities into the given array.
            </summary>
            <param name="motionStates">Array to be filled with the current motion states of all entities.</param>
        </member>
        <member name="M:BEPUphysics.MotionStateManager.GetMotionStates(System.Collections.Generic.List{BEPUphysics.DataStructures.MotionState})">
            <summary>
            Copies the current motion states of all entities into the given list.
            </summary>
            <param name="motionStates">List to be filled with the current motion states of all entities.</param>
        </member>
        <member name="M:BEPUphysics.MotionStateManager.GetMotionStates(BEPUphysics.DataStructures.MotionState[],Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Copies the current motion states of all entities into the given array.
            </summary>
            <param name="motionStates">Array to be filled with the current motion states of all entities.</param>
            <param name="worldTransforms">Array to be filled with the current world transformations of all entities.</param>
        </member>
        <member name="M:BEPUphysics.MotionStateManager.GetMotionStates(System.Collections.Generic.List{BEPUphysics.DataStructures.MotionState},System.Collections.Generic.List{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Copies the current motion states of all entities into the given list.
            </summary>
            <param name="motionStates">List to be filled with the current motion states of all entities.</param>
            <param name="worldTransforms">List to be filled with the current world transformations of all entities.</param>
        </member>
        <member name="M:BEPUphysics.MotionStateManager.GetMotionStatesCount">
            <summary>
            Gets the total number of motion states currently managed by the engine.
            </summary>
            <returns>Total number of motion states.</returns>
        </member>
        <member name="T:BEPUphysics.MathExtensions.Matrix3X2">
            <summary>
            3 row, 2 column matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M31">
            <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M32">
            <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 3 row, 2 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
            <param name="m31">Value at row 2, column 1 of the matrix.</param>
            <param name="m32">Value at row 2, column 2 of the matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Add(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Multiply(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Negate(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Subtract(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Transform(Microsoft.Xna.Framework.Vector2@,BEPUphysics.MathExtensions.Matrix3X2@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a column vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Column vector product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Transform(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a row vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Row vector product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Transpose(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix3X2.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="T:BEPUphysics.MathExtensions.Matrix2X3">
            <summary>
            2 row, 3 column matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M13">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M23">
            <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 2 row, 2 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m13">Value at row 1, column 3 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
            <param name="m23">Value at row 2, column 3 of the matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Add(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Multiply(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Multiply(BEPUphysics.MathExtensions.Matrix2X3@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Negate(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Subtract(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Transform(Microsoft.Xna.Framework.Vector2@,BEPUphysics.MathExtensions.Matrix2X3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a row vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Row vector product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Transform(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix2X3@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.  Considered to be a column vector for purposes of multiplication.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Column vector product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Transpose(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix3X2@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X3.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="T:BEPUphysics.Constraints.TwistLimit">
            <summary>
            Prevents the connected entities from twisting relative to each other beyond given limits.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwistLimit.maximumAngle">
            <summary>
            Naximum angle that entities can twist.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.TwistLimit.minimumAngle">
            <summary>
            Minimum angle that entities can twist.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other beyond given limits.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="axisA">Twist axis attached to the first connected entity.</param>
            <param name="axisB">Twist axis attached to the second connected entity.</param>
            <param name="minimumAngle">Minimum twist angle allowed.</param>
            <param name="maximumAngle">Maximum twist angle allowed.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistLimit.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistLimit.SetupJointTransforms(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
            <param name="worldTwistAxisA">Twist axis in world space to attach to entity A.</param>
            <param name="worldTwistAxisB">Twist axis in world space to attach to entity B.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistLimit.ApplyImpulse(System.Single)">
            <summary>
            Solves for velocity.
            </summary>
            <param name="dt">Simulation time to next frame.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistLimit.PreStep(System.Single)">
            <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
            <param name="dt">Simulation step length.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistLimit.BasisA">
            <summary>
            Gets the basis attached to entity A.
            The primary axis represents the twist axis attached to entity A.
            The x axis and y axis represent a plane against which entity B's attached x axis is projected to determine the twist angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistLimit.BasisB">
            <summary>
            Gets the basis attached to entity B.
            The primary axis represents the twist axis attached to entity A.
            The x axis is projected onto the plane defined by localTransformA's x and y axes
            to get the twist angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistLimit.MaximumAngle">
            <summary>
            Gets or sets the maximum angle that entities can twist.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistLimit.MinimumAngle">
            <summary>
            Gets or sets the minimum angle that entities can twist.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistLimit.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SlidingFrictionOneAxisConstraint">
            <summary>
            Handles collision pair sliding friction.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SlidingFrictionOneAxisConstraint.#ctor(BEPUphysics.CollisionPair)">
            <summary>
            Constructs a new linear friction constraint.
            </summary>
            <param name="pair">Collision pair owning this friction constraint.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SlidingFrictionOneAxisConstraint.PreStep(System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Initializes the constraint for this frame.
            </summary>
            <param name="dt">Time since the last frame.</param>
            <param name="manifoldCenter">Computed center of manifold.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.JointBasis3D">
            <summary>
            Defines a three dimensional orthonormal basis used by a constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetLocalAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="yAxis">Third axis in the transform.</param>
            <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetLocalAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="yAxis">Third axis in the transform.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetLocalAxes(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.
            The matrix's up vector is used as the y axis.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetWorldAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="yAxis">Third axis in the transform.</param>
            <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetWorldAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="yAxis">Third axis in the transform.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis3D.SetWorldAxes(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.
            The matrix's up vector is used as the y axis.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalPrimaryAxis">
            <summary>
            Gets the primary axis of the transform in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalTransform">
            <summary>
            Gets or sets the local transform of the basis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalXAxis">
            <summary>
            Gets the X axis of the transform in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalYAxis">
            <summary>
            Gets the Y axis of the transform in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.PrimaryAxis">
            <summary>
            Gets the primary axis of the transform.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.RotationMatrix">
            <summary>
            Gets or sets the rotation matrix used by the joint transform to convert local space axes to world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.WorldTransform">
            <summary>
            Gets or sets the world transform of the basis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.XAxis">
            <summary>
            Gets the X axis of the transform.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis3D.YAxis">
            <summary>
            Gets the Y axis of the transform.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.JointBasis2D">
            <summary>
            Defines a two axes which are perpendicular to each other used by a constraint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetLocalAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetLocalAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetLocalAxes(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetWorldAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
            <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetWorldAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
            <param name="xAxis">Second axis in the transform.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.JointBasis2D.SetWorldAxes(BEPUphysics.MathExtensions.Matrix3X3)">
            <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
            <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis2D.LocalPrimaryAxis">
            <summary>
            Gets the primary axis of the transform in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis2D.LocalXAxis">
            <summary>
            Gets the X axis of the transform in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis2D.PrimaryAxis">
            <summary>
            Gets the primary axis of the transform.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis2D.RotationMatrix">
            <summary>
            Gets or sets the rotation matrix used by the joint transform to convert local space axes to world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.JointBasis2D.XAxis">
            <summary>
            Gets the X axis of the transform.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.VariableAngularSpeedCurve">
            <summary>
            Wraps a curve that is traveled along with arbitrary defined angular speed.
            </summary>
            <remarks>
            The speed curve should be designed with the wrapped curve's times in mind.
            Speeds will be sampled based on the wrapped curve's interval.</remarks>
        </member>
        <member name="M:BEPUphysics.Paths.VariableAngularSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Quaternion})">
            <summary>
            Constructs a new variable speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
        </member>
        <member name="M:BEPUphysics.Paths.VariableAngularSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Quaternion},System.Int32)">
            <summary>
            Constructs a new variable speed curve.
            </summary>
            <param name="speedCurve">Curve defining speeds to use.</param>
            <param name="curve">Curve to wrap.</param>
            <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
        </member>
        <member name="T:BEPUphysics.MPRToolbox">
            <summary>
            Contains MPR-based collision queries.
            </summary>
        </member>
        <member name="F:BEPUphysics.MPRToolbox.InnerIterationLimit">
            <summary>
            Number of iterations that the MPR system will run in its inner loop before giving up and returning with failure.
            </summary>
        </member>
        <member name="F:BEPUphysics.MPRToolbox.OuterIterationLimit">
            <summary>
            Number of iterations that the MPR system will run in its outer loop before giving up and moving on to its inner loop.
            </summary>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.AreObjectsCollidingMPR(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single)">
            <summary>
            Determines whether or not the given entities are colliding.
            </summary>
            <param name="objA">First entity to check.</param>
            <param name="objB">Second entity to check.</param>
            <param name="marginA">Margin around the first shape to use.</param>
            <param name="marginB">Margin around the second shape to use.</param>
            <returns>Whether or not the margin-expanded shapes are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.AreObjectsCollidingMPR(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single)">
            <summary>
            Determines whether or not the given entities are colliding.
            </summary>
            <param name="objA">First entity to check.</param>
            <param name="objB">Second entity to check.</param>
            <param name="positionA">Location to consider as the center of the first object.</param>
            <param name="positionB">Location to consider as the center of the second object.</param>
            <param name="orientationA">Orientation to use in lieu of the first object's rotation.</param>
            <param name="orientationB">Orientation to use in lieu of the second object's rotation.</param>
            <param name="marginA">Margin around the first shape to use.</param>
            <param name="marginB">Margin around the second shape to use.</param>
            <returns>Whether or not the margin-expanded shapes are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.AreObjectsCollidingMPR(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines whether or not the given entities are colliding, and if so, returns collision data about them.
            </summary>
            <param name="objA">First entity to check.</param>
            <param name="objB">Second entity to check.</param>
            <param name="marginA">Margin to use to expand the first entity.</param>
            <param name="marginB">Margin to use to expand the second entity.</param>
            <param name="contactLocation">Location contained within both margin expanded shapes.</param>
            <param name="contactNormal">Surface normal at the point of contact.</param>
            <param name="depth">Length of interpenetration of the two shapes.</param>
            <returns>Whether or not the margin-expanded shapes are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.AreObjectsCollidingMPR(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines whether or not the given entities are colliding, and if so, returns collision data about them.
            </summary>
            <param name="objA">First entity to check.</param>
            <param name="objB">Second entity to check.</param>
            <param name="positionA">Location to consider as the center of the first object.</param>
            <param name="positionB">Location to consider as the center of the second object.</param>
            <param name="orientationA">Orientation to use in lieu of the first object's rotation.</param>
            <param name="orientationB">Orientation to use in lieu of the second object's rotation.</param>
            <param name="marginA">Margin to use to expand the first entity for the boolean test.</param>
            <param name="marginB">Margin to use to expand the second entity for the boolean test.</param>
            <param name="contactLocation">Location contained within both margin expanded shapes.</param>
            <param name="contactNormal">Surface normal at the point of contact.</param>
            <param name="depth">Length of interpenetration of the two shapes.</param>
            <returns>Whether or not the margin-expanded shapes are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.AreSweptObjectsCollidingMPR(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if objA and objB are colliding using a swept collision test.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="sweepA">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="sweepB">Vector to sweep the entity along.  Commonly velocity.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.AreSweptObjectsCollidingMPR(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Determines if objA and objB are colliding using a swept collision test.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="positionToUseA">Position to use for the first object in lieu of its current position.</param>
            <param name="positionToUseB">Position to use for the second object in lieu of its current position.</param>
            <param name="orientationToUseA">Orientation to use for the first object in lieu of its current orientation.</param>
            <param name="orientationToUseB">Orientation to use for the second object in lieu of its current orientation.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="sweepA">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="sweepB">Vector to sweep the entity along.  Commonly velocity.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.FindConservativeDistanceEstimate(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds a estimate of the separation distance between the two bodies' core, non margin-expanded shapes.
            Will be less than or equal to the actual distance.
            </summary>
            <param name="objA">First shape to check.</param>
            <param name="objB">Second shape to check.</param>
            <param name="marginA">Shape expanding margin to use for the first entity.</param>
            <param name="marginB">Shape expanding margin to use for the second entity.</param>
            <param name="separatingDirection">Direction along which the distance is measured.</param>
            <returns>Conservative estimate of the distance between the objects.  0 if colliding.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.FindConservativeDistanceEstimate(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Finds a estimate of the separation distance between the two bodies' core, non margin-expanded shapes.
            Will be less than or equal to the actual distance.
            </summary>
            <param name="objA">First shape to check.</param>
            <param name="objB">Second shape to check.</param>
            <param name="positionA">Location to consider as the center of the first object.</param>
            <param name="positionB">Location to consider as the center of the second object.</param>
            <param name="orientationA">Orientation to use in lieu of the first object's rotation.</param>
            <param name="orientationB">Orientation to use in lieu of the second object's rotation.</param>
            <param name="marginA">Shape expanding margin to use for the first entity.</param>
            <param name="marginB">Shape expanding margin to use for the second entity.</param>
            <param name="separatingDirection">Direction along which the distance is measured.</param>
            <returns>Conservative estimate of the distance between the objects.  0 if colliding.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.FindPenetrationDepth(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines the length of the interpenetrating area along the given normal between the given objects.
            Assumes the two entities are actually colliding.
            </summary>
            <param name="objA">First entity to check.</param>
            <param name="objB">Second entity to check.</param>
            <param name="marginA">Margin to use to expand the first entity.</param>
            <param name="marginB">Margin to use to expand the second entity.</param>
            <param name="normal">Direction along which to find the penetration depth.</param>
            <returns>Length of the interpenetrating area along the given normal.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.FindPenetrationDepth(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines the length of the interpenetrating area along the given normal between the given objects.
            Assumes the two entities are actually colliding.
            </summary>
            <param name="objA">First entity to check.</param>
            <param name="objB">Second entity to check.</param>
            <param name="positionA">Location to consider as the center of the first object.</param>
            <param name="positionB">Location to consider as the center of the second object.</param>
            <param name="orientationA">Orientation to use in lieu of the first object's rotation.</param>
            <param name="orientationB">Orientation to use in lieu of the second object's rotation.</param>
            <param name="marginA">Margin to use to expand the first entity.</param>
            <param name="marginB">Margin to use to expand the second entity.</param>
            <param name="normal">Direction along which to find the penetration depth.</param>
            <returns>Length of the interpenetrating area along the given normal.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.IsPointInsideEntity(Microsoft.Xna.Framework.Vector3,BEPUphysics.Entities.Entity,System.Single)">
            <summary>
            Determines whether or the point lies within the entity.
            </summary>
            <param name="p">Location to test for inclusion within the entity.</param>
            <param name="e">Entity to test.</param>
            <param name="margin">Margin around the shape to use.</param>
            <returns>Whether or not the margin-expanded shape encloses the point.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.IsPointInsideEntity(Microsoft.Xna.Framework.Vector3,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion,System.Single)">
            <summary>
            Determines whether or the point lies within the entity.
            </summary>
            <param name="p">Location to test for inclusion within the entity.</param>
            <param name="e">Entity to test.</param>
            <param name="positionToUse">Geometrical center position to use for testing in lieu of the current position.</param>
            <param name="orientationToUse">Orientation to use for testing in lieu of the current orientation.</param>
            <param name="margin">Margin around the shape to use.</param>
            <returns>Whether or not the margin-expanded shape encloses the point.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.AreObjectsCollidingMPROld(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single)">
            <summary>
            Determines if objA and objB are colliding.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.AreSweptObjectsCollidingMPR(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Determines if objA and objB are colliding using a swept collision test.
            </summary>
            <param name="objA">First object for comparison.</param>
            <param name="objB">Second object for comparison.</param>
            <param name="positionToUseA">Position to use for the first object in lieu of its current position.</param>
            <param name="positionToUseB">Position to use for the second object in lieu of its current position.</param>
            <param name="orientationToUseA">Orientation to use for the first object in lieu of its current orientation.</param>
            <param name="orientationToUseB">Orientation to use for the second object in lieu of its current orientation.</param>
            <param name="marginA">Extra space around the first entity.</param>
            <param name="marginB">Extra space around the second entity.</param>
            <param name="sweepA">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="sweepB">Vector to sweep the entity along.  Commonly velocity.</param>
            <param name="location">Location of the impact.</param>
            <param name="normal">Normal of the impact.</param>
            <param name="toi">Time of impact between the two objects along their velocities.</param>
            <returns>Whether or not the two objects are colliding.</returns>
        </member>
        <member name="M:BEPUphysics.MPRToolbox.FindSweptPenetrationDepth(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines the length of the interpenetrating area along the given normal between the given objects.
            Assumes the two entities are actually colliding.
            </summary>
            <param name="objA">First entity to check.</param>
            <param name="objB">Second entity to check.</param>
            <param name="sweepA">Extra length to add to the first entity.</param>
            <param name="sweepB">Extra length to add to the second entity.</param>
            <param name="positionA">Location to consider as the center of the first object.</param>
            <param name="positionB">Location to consider as the center of the second object.</param>
            <param name="orientationA">Orientation to use in lieu of the first object's rotation.</param>
            <param name="orientationB">Orientation to use in lieu of the second object's rotation.</param>
            <param name="marginA">Margin to use to expand the first entity.</param>
            <param name="marginB">Margin to use to expand the second entity.</param>
            <param name="normal">Direction along which to find the penetration depth.</param>
            <returns>Length of the interpenetrating area along the given normal.</returns>
        </member>
        <member name="T:BEPUphysics.Threading.SimpleThreadManager">
            <summary>
            Manages the engine's threads.
            </summary>
            <remarks>
            Uses a simple round-robin threadpool.
            It is recommended that other thread managers are used instead of this one;
            it is kept for compatability and a fallback in case of problems.
            </remarks>
        </member>
        <member name="F:BEPUphysics.Threading.SimpleThreadManager.currentTaskAllocationIndex">
            <summary>
            Index into the thread loop lists, incremented after each task allocation.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.#ctor">
            <summary>
            Constructs the thread manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.WaitForTaskCompletion">
            <summary>
            Blocks the current thread until all tasks have been completed.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.AddThread">
            <summary>
            Adds a thread to the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.AddThread(System.Action{System.Object},System.Object)">
            <summary>
            Adds a thread to the manager.
            </summary>
            <param name="initialization">A function to run to perform any initialization on the new thread.</param>
            <param name="initializationInformation">Data to give the ParameterizedThreadStart for initialization.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.RemoveThread">
            <summary>
            Removes a thread and blocks until success.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.EnqueueTask(System.Action{System.Object},System.Object)">
            <summary>
            Gives the thread manager a new task to run.
            </summary>
            <param name="task">Task to run.</param>
            <param name="taskInformation">Information to be used by the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
            <param name="startIndex">Inclusive starting index.</param>
            <param name="endIndex">Exclusive ending index.</param>
            <param name="loopBody">Function that handles an individual iteration of the loop.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.Dispose">
            <summary>
            Releases threads and resources used by the thread manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.EnqueueTaskSequentially(System.Action{System.Object},System.Object)">
            <summary>
            Enqueues a task.
            This method also does not perform any locking; it should only be called when all worker threads of the thread pool are idle and all calls to this method are from the same thread.
            </summary>
            <param name="task">Task to enqueue.</param>
            <param name="taskInformation">Information for the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.ShutDown">
            <summary>
            Tells every thread in the thread manager to shut down and waits until completion.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.SimpleThreadManager.LoopTasksPerThread">
            <summary>
            Gets or sets the number of tasks to create per thread when doing forLoops.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.SimpleThreadManager.ThreadCount">
            <summary>
            Gets the number of threads currently handled by the manager.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.WorkerThread.Finalize">
            <summary>
            Shuts down any still living threads.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SimpleThreadManager.WorkerThread.ThreadExecutionLoop">
            <exception cref="T:System.ArithmeticException">Thrown when the thread encounters an invalid state; generally propagated float.NaN's.</exception>
        </member>
        <member name="T:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy">
            <summary>
            Manages a tree of bounding volumes with triangles at the leaves.
            Can be used to efficiently collect triangle collision candidates with bounding shapes.
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.LockerTreeStructure">
            <summary>
            Synchronization object which is locked against whenever an operation needs to access the structure of the tree without interruption.
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.Margin">
            <summary>
            Length by which to expand the bounding boxes of the bounding volume hierarchy in each direction.
            After changing, hierarchy.refit() or hierarchy.reconstructHierarchy() need to be called to update the tree.
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.Vertices">
            <summary>
            Vertices of triangles in the mesh.
            Altering the vertex positions in the list requires a call to refit().
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.Indices">
            <summary>
            Indices defining the faces of the triangle mesh.
            Altering the indices list requires a reconstruction of the hierarchy by calling reconstructHierarchy().
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.WorldMatrix">
            <summary>
            Transformation matrix to apply to all vertex positions when calculating bounding volumes.
            If changed, refit() should be called for relatively minor changes or reconstructHierarchy() for major changes (intense scaling and abnormal transformations).
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.#ctor(BEPUphysics.DataStructures.TriangleMeshVertex[],System.Int32[])">
            <summary>
            Constructs a new bounding volume hierarchy.
            </summary>
            <param name="vertices">Vertices of triangles in the mesh.</param>
            <param name="indices">Indices defining the faces of the triangle mesh.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.#ctor(BEPUphysics.DataStructures.TriangleMeshVertex[],System.Int32[],System.Single)">
            <summary>
            Constructs a new bounding volume hierarchy.
            </summary>
            <param name="vertices">Vertices of triangles in the mesh.</param>
            <param name="indices">Indices defining the faces of the triangle mesh.</param>
            <param name="margin">Length by which to expand the bounding boxes of the bounding volume hierarchy in each direction.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.GetNearbyTriangles(Microsoft.Xna.Framework.Ray@,System.Collections.Generic.List{System.Int32})">
            <summary>
            Collects all of the triangles with bounding boxes intersecting a ray.
            </summary>
            <param name="ray">Ray to compare against.</param>
            <param name="triangleIndices">List of triangle indices with bounding boxes intersected by the ray.
            Triangle indices are the index of the first vertex index in the indices list.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.GetNearbyTriangles(Microsoft.Xna.Framework.BoundingBox@,System.Collections.Generic.List{System.Int32})">
            <summary>
            Collects all of the triangles with bounding boxes intersecting an axis aligned box.
            </summary>
            <param name="box">Axis aligned box to compare against.</param>
            <param name="triangleIndices">List of triangle indices with bounding boxes intersected by the box.
            Triangle indices are the index of the first vertex index in the indices list.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.GetNearbyTriangles(Microsoft.Xna.Framework.BoundingSphere@,System.Collections.Generic.List{System.Int32})">
            <summary>
            Collects all of the triangles with bounding boxes intersecting a sphere.
            </summary>
            <param name="sphere">Sphere to compare against.</param>
            <param name="triangleIndices">List of triangle indices with bounding boxes intersected by the sphere.
            Triangle indices are the index of the first vertex index in the indices list.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.ReconstructHierarchy">
            <summary>
            Recreates the bounding volume hierarchy from scratch.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.Refit">
            <summary>
            Recalculates the bounding boxes of the hierarchy recursively without rebuilding it from scratch.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchy.BoundingBox">
            <summary>
            Gets the bounding box surrounding the triangle mesh hierarchy.
            </summary>
        </member>
        <member name="T:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchyNode">
            <summary>
            Node within a bounding volume hierarchy with a bounding box and children.
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchyNode.BoundingBox">
            <summary>
            Bounding box surrounding all of the triangles contained in the node's children.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchyNode.#ctor">
            <summary>
            Constructs a new node.
            </summary>
        </member>
        <member name="T:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchyLeafNode">
            <summary>
            Leaf node within a bounding volume corresponding to a triangle in the mesh.
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchyLeafNode.TriangleIndex">
            <summary>
            Index of the first vertex in the triangle.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchyLeafNode.CompareTo(BEPUphysics.DataStructures.TriangleBoundingVolumeHierarchyLeafNode)">
            <summary>
            Compares the nodes for ordering.
            </summary>
            <param name="other">Node to compare.</param>
            <returns>1 if the current node is greater, 0 if equal, and -1 if the opposing node is greater.</returns>
        </member>
        <member name="T:BEPUphysics.MathExtensions.Matrix2X2">
            <summary>
            2 row, 2 column matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new 2 row, 2 column matrix.
            </summary>
            <param name="m11">Value at row 1, column 1 of the matrix.</param>
            <param name="m12">Value at row 1, column 2 of the matrix.</param>
            <param name="m21">Value at row 2, column 1 of the matrix.</param>
            <param name="m22">Value at row 2, column 2 of the matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(BEPUphysics.MathExtensions.Matrix2X2@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
            <param name="a">First matrix to add.</param>
            <param name="b">Second matrix to add.</param>
            <param name="result">Sum of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.CreateScale(System.Single,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Constructs a uniform scaling matrix.
            </summary>
            <param name="scale">Value to use in the diagonal.</param>
            <param name="matrix">Scaling matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Invert(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Inverts the given matix.
            </summary>
            <param name="matrix">Matrix to be inverted.</param>
            <param name="result">Inverted matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(BEPUphysics.MathExtensions.Matrix2X2@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Multiplies the two matrices.
            </summary>
            <param name="a">First matrix to multiply.</param>
            <param name="b">Second matrix to multiply.</param>
            <param name="result">Product of the multiplication.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Negate(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Negates every element in the matrix.
            </summary>
            <param name="matrix">Matrix to negate.</param>
            <param name="result">Negated matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Subtract(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
            <param name="a">First matrix to subtract.</param>
            <param name="b">Second matrix to subtract.</param>
            <param name="result">Difference of the two matrices.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Transform(Microsoft.Xna.Framework.Vector2@,BEPUphysics.MathExtensions.Matrix2X2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Transforms the vector by the matrix.
            </summary>
            <param name="v">Vector2 to transform.</param>
            <param name="matrix">Matrix to use as the transformation.</param>
            <param name="result">Product of the transformation.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Transpose(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Computes the transposed matrix of a matrix.
            </summary>
            <param name="matrix">Matrix to transpose.</param>
            <param name="result">Transposed matrix.</param>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.ToString">
            <summary>
            Creates a string representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The matrix's determinant.</returns>
        </member>
        <member name="P:BEPUphysics.MathExtensions.Matrix2X2.Identity">
            <summary>
            Gets the 2x2 identity matrix.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SingleEntityAngularMotor">
            <summary>
            Constraint which attempts to restrict the relative angular velocity of two entities to some value.
            Can use a target relative orientation to apply additional force.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityAngularMotor.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new constraint which attempts to restrict the relative angular velocity of two entities to some value.
            </summary>
            <param name="entity">Affected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityAngularMotor.#ctor">
            <summary>
            Constructs a new constraint which attempts to restrict the relative angular velocity of two entities to some value.
            This constructor will make the angular motor start with isActive set to false.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityAngularMotor.ApplyImpulse(System.Single)">
            <summary>
            Applies the corrective impulses required by the constraint.
            </summary>
            <param name="dt">Time between frames.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityAngularMotor.PreStep(System.Single)">
            <summary>
            Initializes the constraint for the current frame.
            </summary>
            <param name="dt">Time between frames.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityAngularMotor.ComputeMaxForces(System.Single,System.Single)">
            <summary>
            Computes the maxForceDt and maxForceDtSquared fields.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityAngularMotor.Basis">
            <summary>
            Gets the basis attached to the entity.
            The target velocity/orientation of this motor is transformed by the basis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityAngularMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityAngularMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity with respect to the constraint.
            For single entity constraints, this is pretty straightforward.  It is taken directly from the 
            entity.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityAngularMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityAngularMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, error is zero.
            </summary>
        </member>
        <member name="T:BEPUphysics.Entities.Triangle">
            <summary>
            Triangle-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Triangle.LocalNormal">
            <summary>
            Normal of the triangle in local space.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Triangle.LocalVertices">
            <summary>
            List of positions of the vertices of the triangle in local space.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Triangle.Normal">
            <summary>
            Normal of the triangle in world space.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Triangle.TryToUseFaceNormal">
            <summary>
            Whether or not to attempt to use the triangle's normal during a collision
            if the contact normal is within the margin defined by the triangle's useFaceNormalWithinAngle.
            This can help keep bumpiness down on otherwise smooth terrains or meshes,
            though excessive usage will reduce accuracy during on-edge collisions.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Triangle.UseFaceNormalWithinAngle">
            <summary>
            Defines the angle between a contact normal and the triangle normal 
            under which the contact normal will be set to the triangle normal.
            Only used if the triangle has tryToUseFaceNormal enabled.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Triangle.Vertices">
            <summary>
            List of positions of the vertices in the triangle in world space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.#ctor">
            <summary>
            Constructs a triangle.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Constructs a physically simulated triangle.
            </summary>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a nondynamic triangle.
            </summary>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Constructs a physically simulated triangle.
            </summary>
            <param name="pos">Position where the triangle is initialy centered.</param>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a nondynamic triangle.
            </summary>
            <param name="pos">Position where the triangle is initially centered.</param>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.#ctor(BEPUphysics.DataStructures.MotionState,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Constructs a physically simulated triangle.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.#ctor(BEPUphysics.DataStructures.MotionState,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a nondynamic triangle.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.FindLocalGeometry">
            <summary>
            Defines the bodyVertices, unrotated or translated versions of the vertices with a center position of 0,0,0.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.GetEdge(System.Int32)">
            <summary>
            Computes an edge direction vector from the triangle.
            </summary>
            <param name="k">0, 1, or 2 corresponding to the three edges of the triangle.</param>
            <returns>Edge direction vector.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.GetEdges(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Assembles a list of edge directions.
            </summary>
            <param name="triangleEdges">List to have edge directions inserted.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.GetVertexNormals(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Finds and returns the vertex normals of each vertex with a one-to-one correspondence to the vertex list.
            Note: Not a simple return method; calculates on call due to vertex normals being unused within physics calculations.
            </summary>
            <param name="normals">List of vectors to be modified.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.FindLocalNormal">
            <summary>
            Determines the local normal of the triangle.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.RayTest(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the intersection between the triangle and the ray.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="t">Distance, in units of the length of the direction vector, to the hit location.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.Setup(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Re-initializes the nondynamic triangle.
            </summary>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Triangle.Initialize(System.Boolean)">
            <summary>
            Provided that the object has already had its surfaces defined, the center of mass, inertia tensor, and bounding sphere are calculated.
            The position of the PhysObject is set to the center of mass.
            </summary>
        </member>
        <member name="T:BEPUphysics.Entities.WrappedBody">
            <summary>
            A shape formed from the convex hull around its subbodies.  Can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.WrappedBody.SubBodies">
            <summary>
            List of entities composing the wrapped body.
            This list cannot be altered without reinitializing the body.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.#ctor(System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Single)">
            <exception cref="T:System.ArgumentException">Thrown when the subbodies list contains zero entities.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.#ctor(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <exception cref="T:System.ArgumentException">Thrown when the subbodies list contains zero entities.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.#ctor(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Single)">
            <summary>
            Constructs a physically simulated box.
            </summary>
            <param name="pos">Position of the box.</param>
            <param name="subBodies">List of entities composing the body.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.#ctor(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Constructs a nondynamic box.
            </summary>
            <param name="pos">Position of the box.</param>
            <param name="subBodies">List of entities composing the body.</param>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.#ctor(BEPUphysics.DataStructures.MotionState,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Single)">
            <summary>
            Constructs a physically simulated box.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="subBodies">List of entities composing the body.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.#ctor(BEPUphysics.DataStructures.MotionState,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Constructs a nondynamic box.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="subBodies">List of entities composing the body.</param>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.BecomeDynamic(System.Single)">
            <summary>
            Converts the entity into a physical object.
            If it is already a physically simulated entity, its mass and associated inertia tensor will be updated accordingly.
            </summary>
            <param name="m">New mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.BecomeKinematic">
            <summary>
            Converts the entity into a nondynamic object.
            If the entity is already not physically simulated, this will do nothing.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.WrappedBody.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="T:BEPUphysics.Contact">
            <summary>
            Handles information about a contact point during a collision between two bodies.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.BaseDepth">
            <summary>
            Depth that the contact was created with.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.ColliderA">
            <summary>
            First entity involved in the contact.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.ColliderB">
            <summary>
            Second entity involved in the contact.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.Id">
            <summary>
            Feature-based id used to match contacts from the previous frame to their current versions.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.Normal">
            <summary>
            Normal direction of the surface at the contact point.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.ParentA">
            <summary>
            Parent of the first entity involved in the contact.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.ParentB">
            <summary>
            Parent of the second entity involved in the contact.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.PenetrationDepth">
            <summary>
            Amount of penetration between the two objects.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.Position">
            <summary>
            Position of the contact point.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.Ra">
            <summary>
            Offset from the center of mass of collider A to the contact point.
            </summary>
        </member>
        <member name="F:BEPUphysics.Contact.Rb">
            <summary>
            Offset from the center of mass of collider B to the contact point.
            </summary>
        </member>
        <member name="M:BEPUphysics.Contact.#ctor">
            <summary>
            Constructs a new contact.
            </summary>
        </member>
        <member name="M:BEPUphysics.Contact.Equals(BEPUphysics.Contact)">
            <summary>
            Determines if two contacts are equal.
            Assumes that the colliders are equal; this is designed
            to be used within CollisionPairs where contacts must
            have the same colliders.
            </summary>
            <param name="other">Other contact to compare.</param>
            <returns>Whether or not the contacts are equivalent.</returns>
        </member>
        <member name="M:BEPUphysics.Contact.ToString">
            <summary>
            Outputs the position, normal, and depth information of the contact into a string.
            </summary>
            <returns>Position, normal, and depth information of the contact in a string.</returns>
        </member>
        <member name="M:BEPUphysics.Contact.Setup(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,BEPUphysics.CollisionPair)">
            <summary>
            Sets up the contact point with the given data.
            Acts as a secondary constructor.
            </summary>
            <param name="pos">Position of the contact.</param>
            <param name="norm">Normal of the contact.</param>
            <param name="collider">First collidable involved.</param>
            <param name="collidee">Second collidable involved.</param>
            <param name="parentA">Highest ranked entity associated with the first entity.</param>
            <param name="parentB">Highest ranked entity associated with the second entity.</param>
            <param name="depth">Depth of the contact point.</param>
        </member>
        <member name="P:BEPUphysics.Contact.Friction">
            <summary>
            Gets the friction constraint used by this contact.
            If the space's simulationSettings.collisionResponse.useCentralFriction is set to true,
            this returns null.
            </summary>
        </member>
        <member name="P:BEPUphysics.Contact.PenetrationConstraint">
            <summary>
            Gets the penetration constraint used by this contact.
            </summary>
        </member>
        <member name="T:BEPUphysics.Entities.Capsule">
            <summary>
            Pill-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Capsule.Length">
            <summary>
            Length of the capsule.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.Capsule.Radius">
            <summary>
            Radius of the capsule.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Capsule.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated capsule.
            </summary>
            <param name="pos">Position of the capsule.</param>
            <param name="len">Length of the capsule.</param>
            <param name="rad">Radius of the capsule.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Capsule.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic capsule.
            </summary>
            <param name="pos">Position of the capsule.</param>
            <param name="len">Length of the capsule.</param>
            <param name="rad">Radius of the capsule.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Capsule.#ctor(BEPUphysics.DataStructures.MotionState,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a dynamic capsule.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="len">Length of the capsule.</param>
            <param name="rad">Radius of the capsule.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Capsule.#ctor(BEPUphysics.DataStructures.MotionState,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic capsule.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="len">Length of the capsule.</param>
            <param name="rad">Radius of the capsule.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Capsule.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Capsule.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Capsule.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="T:BEPUphysics.ResourceManagement.Resources">
            <summary>
            Handles allocation and management of commonly used resources.
            </summary>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetBoolList">
            <summary>
            Retrieves a bool list from the resource pool.
            </summary>
            <returns>Empty bool list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetIntList">
            <summary>
            Retrieves a int list from the resource pool.
            </summary>
            <returns>Empty int list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetIntQueue">
            <summary>
            Retrieves a int queue from the resource pool.
            </summary>
            <returns>Empty int queue.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.Queue{System.Int32})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="queue">Queue to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetFloatList">
            <summary>
            Retrieves a float list from the resource pool.
            </summary>
            <returns>Empty float list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{System.Single})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetVectorList">
            <summary>
            Retrieves a Vector3 list from the resource pool.
            </summary>
            <returns>Empty Vector3 list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetEntityList">
            <summary>
            Retrieves an Entity list from the resource pool.
            </summary>
            <returns>Empty Entity list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetEntityQueue">
            <summary>
            Retrieves a Entity queue from the resource pool.
            </summary>
            <returns>Empty Entity queue.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.Queue{BEPUphysics.Entities.Entity})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="queue">Queue to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetInt3List">
            <summary>
            Retrieves an Int3 list from the resource pool.
            </summary>
            <returns>Empty Int3 list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{BEPUphysics.Int3})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetStaticTriangleList">
            <summary>
            Retrieves a Triangle list from the resource pool.
            </summary>
            <returns>Empty Triangle list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{BEPUphysics.Entities.Triangle})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetContactList">
            <summary>
            Retrieves a Contact list from the resource pool.
            </summary>
            <returns>Empty Contact list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{BEPUphysics.Contact})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetCollisionPair(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,BEPUphysics.Space)">
            <summary>
            Retrieves a collision pair from the resource pool.
            </summary>
            <param name="a">First entity in the collision pair.</param>
            <param name="b">Second entity in the collision pair.</param>
            <param name="s">Space that contains the collision pair.</param>
            <returns>New collision pair.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.CollisionPair)">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="collisionPair">Collision pair to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetCollisionPairList">
            <summary>
            Retrieves a collision pair list from the resource pool.
            </summary>
            <returns>Empty collision pair list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{BEPUphysics.CollisionPair})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetConstraintList">
            <summary>
            Retrieves a Constraint list from the resource pool.
            </summary>
            <returns>Empty Constraint list.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{BEPUphysics.Constraints.Constraint})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetStaticTriangle(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves a kinematic Triangle from the resource pool.
            </summary>
            <param name="v1">Position of the first vertex.</param>
            <param name="v2">Position of the second vertex.</param>
            <param name="v3">Position of the third vertex.</param>
            <returns>New Triangle.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.Entities.Triangle)">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="triangle">Triangle to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetSimulationIsland(BEPUphysics.Space)">
            <summary>
            Retrieves a SimulationIsland from the resource pool.
            </summary>
            <param name="s">Space in which the SimulationIsland exists.</param>
            <returns>New SimulationIsland.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.SimulationIsland)">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="simulationIsland">Simulation island to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetSimulationIslandList">
            <summary>
            Retrieves a List of SimulationIslands from the resource pool.
            </summary>
            <returns>New SimulationIsland List.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.List{BEPUphysics.SimulationIsland})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="simulationIslandList">Simulation island list to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GetSimulationIslandQueue">
            <summary>
            Retrieves a Queue of SimulationIslands from the resource pool.
            </summary>
            <returns>New SimulationIsland queue.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(System.Collections.Generic.Queue{BEPUphysics.SimulationIsland})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="simulationIslandQueue">Simulation island queue to return.</param>
        </member>
        <member name="T:BEPUphysics.Constraints.PointOnLineJoint">
            <summary>
            Constrains two entities so that one has a point that stays on a line defined by the other.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnLineJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a joint which constrains a point of one body to be on a line based on the other body.
            </summary>
            <param name="connectionA">First connected entity which defines the line.</param>
            <param name="connectionB">Second connected entity which has a point.</param>
            <param name="lineAnchor">Location off of which the line is based in world space.</param>
            <param name="lineDirection">Direction of the line in world space.</param>
            <param name="pointLocation">Location of the point anchored to connectionB in world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnLineJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnLineJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnLineJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnLineJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnLineJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="massMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnLineJoint.ApplyImpulse(System.Single)">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.LineAnchor">
            <summary>
            Gets or sets the line anchor in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.LineDirection">
            <summary>
            Gets or sets the line direction in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.LocalLineAnchor">
            <summary>
            Gets or sets the line anchor in connection A's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.LocalLineDirection">
            <summary>
            Gets or sets the line direction in connection A's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.LocalPoint">
            <summary>
            Gets or sets the point's location in connection B's local space.
            The point is the location that is attached to the line.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.OffsetA">
            <summary>
            Gets the offset from A to the connection point between the entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.OffsetB">
            <summary>
            Gets the offset from B to the connection point between the entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.Point">
            <summary>
            Gets or sets the point's location in world space.
            The point is the location on connection B that is attached to the line.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnLineJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwistFrictionConstraint">
            <summary>
            Computes the forces necessary to slow down and stop twisting motion in a collision between two entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistFrictionConstraint.TotalTorque">
            <summary>
            Gets the torque applied by twist friction.
            </summary>
        </member>
        <member name="T:BEPUphysics.ForceFields.ForceField">
            <summary>
            Superclass of objects which apply forces to entities in some field.
            </summary>
        </member>
        <member name="M:BEPUphysics.ForceFields.ForceField.#ctor(BEPUphysics.ForceFields.ForceFieldShape)">
            <summary>
            Constructs a force field.
            </summary>
            <param name="shape">Shape to use for the force field.</param>
        </member>
        <member name="M:BEPUphysics.ForceFields.ForceField.UpdateDuringForces(System.Single)">
            <summary>
            Applies forces specified by the given calculation delegate to bodies in the volume.
            Called automatically when needed by the owning Space.
            </summary>
            <param name="dt">Time since the last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.ForceFields.ForceField.CalculateImpulse(BEPUphysics.Entities.Entity,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Calculates the impulse to apply to the entity.
            </summary>
            <param name="e">Affected entity.</param>
            <param name="dt">Duration between simulation updates.</param>
            <param name="impulse">Impulse to apply to the entity.</param>
        </member>
        <member name="P:BEPUphysics.ForceFields.ForceField.ForceWakeUp">
            <summary>
            Gets or sets whether the the force field will force affected entities to wake up.
            </summary>
        </member>
        <member name="P:BEPUphysics.ForceFields.ForceField.Shape">
            <summary>
            Gets or sets the shape of the force field used to determine which entities to apply forces to.
            </summary>
        </member>
        <member name="T:BEPUphysics.ForceFields.InfiniteForceFieldShape">
            <summary>
            Defines the area in which a force field works using an entity's shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.ForceFields.InfiniteForceFieldShape.GetPossiblyAffectedEntities">
            <summary>
            Determines the possibly involved entities.
            </summary>
            <returns>Possibly involved entities.</returns>
        </member>
        <member name="M:BEPUphysics.ForceFields.InfiniteForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
            <summary>
            Determines if the entity is affected by the force field.
            </summary>
            <param name="testEntity">Entity to test.</param>
            <returns>Whether the entity is affected.</returns>
        </member>
        <member name="T:BEPUphysics.Vehicle.Wheel">
            <summary>
            Supports a Vehicle.
            </summary>
        </member>
        <member name="F:BEPUphysics.Vehicle.Wheel.isActive">
            <summary>
            Used for solver early outing.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Wheel.#ctor(BEPUphysics.Vehicle.WheelShape)">
            <summary>
            Constructs a new wheel.
            </summary>
            <param name="shape">Shape of the wheel.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Wheel.#ctor(BEPUphysics.Vehicle.WheelShape,BEPUphysics.Vehicle.WheelSuspension,BEPUphysics.Vehicle.WheelDrivingMotor,BEPUphysics.Vehicle.WheelBrake,BEPUphysics.Vehicle.WheelSlidingFriction)">
            <summary>
            Constructs a new wheel.
            </summary>
            <param name="shape">Shape of the wheel.</param>
            <param name="suspension">Springy support of the vehicle.</param>
            <param name="motor">Driving force for the wheel.</param>
            <param name="rollingFriction">Friction force resisting the forward and backward motion of the wheel.</param>
            <param name="slidingFriction">Friction force resisting the side to side motion of the wheel.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Wheel.ApplyImpulse">
            <summary>
            Applies impulses and returns whether or not this wheel should be updated more.
            </summary>
            <returns>Whether not the wheel is done updating for the frame.</returns>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.Brake">
            <summary>
            Gets the brake for this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.DrivingMotor">
            <summary>
            Gets the motor that turns the wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.HasSupport">
            <summary>
            Gets whether or not this wheel is sitting on anything.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.LocalForwardDirection">
            <summary>
            Gets or sets the local space forward direction of the wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.Shape">
            <summary>
            Gets or sets the shape of this wheel used to find collisions with the ground.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.SlidingFriction">
            <summary>
            Gets the sliding friction settings for this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.SupportLocation">
            <summary>
            Gets the current support location of this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.SupportNormal">
            <summary>
            Gets the normal 
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.SupportingEntity">
            <summary>
            Gets the entity currently supporting the wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.Suspension">
            <summary>
            Gets the suspension supporting this wheel.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.Vehicle">
            <summary>
            Gets the vehicle this wheel is attached to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Wheel.WorldForwardDirection">
            <summary>
            Gets or sets the world space forward direction of the wheel.
            </summary>
        </member>
        <member name="T:BEPUphysics.Vehicle.WheelSlidingFriction">
            <summary>
            Attempts to resist sliding motion of a vehicle.
            </summary>
        </member>
        <member name="F:BEPUphysics.Vehicle.WheelSlidingFriction.DefaultSlidingFrictionBlender">
            <summary>
            Default blender used by WheelSlidingFriction constraints.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelSlidingFriction.BlendFriction(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,System.Single,System.Single,System.Object)">
            <summary>
            Computes the friction to use between the vehicle and support for a wheel.
            </summary>
            <param name="vehicle">Vehicle owning the wheel.</param>
            <param name="support">Supporting entity.</param>
            <param name="wheelFriction">Friction coefficient of the wheel.</param>
            <param name="supportFriction">Friction coefficient of the supporting entity.</param>
            <param name="extraInfo">Any extra information to be considered.</param>
            <returns>Blended friction coefficient.</returns>
        </member>
        <member name="M:BEPUphysics.Vehicle.WheelSlidingFriction.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new sliding friction object for a wheel.
            </summary>
            <param name="dynamicCoefficient">Coefficient of dynamic sliding friction to be blended with the supporting entity's friction.</param>
            <param name="staticCoefficient">Coefficient of static sliding friction to be blended with the supporting entity's friction.</param>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.BlendedCoefficient">
            <summary>
            Gets the coefficient of sliding friction between the wheel and support.
            This coefficient is the blended result of the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.DynamicCoefficient">
            <summary>
            Gets or sets the coefficient of dynamic horizontal sliding friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.FrictionBlender">
            <summary>
            Gets or sets the function used to blend the supporting entity's friction and the wheel's friction.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.SlidingFrictionAxis">
            <summary>
            Gets the axis along which sliding friction is applied.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.StaticCoefficient">
            <summary>
            Gets or sets the coefficient of static horizontal sliding friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.StaticFrictionVelocityThreshold">
            <summary>
            Gets or sets the velocity under which the coefficient of static friction will be used instead of the dynamic one.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.TotalImpulse">
            <summary>
            Gets the force 
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.Wheel">
            <summary>
            Gets the wheel that this sliding friction applies to.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.SolverSettings">
            <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
        </member>
        <member name="T:BEPUphysics.QuadFormats">
            <summary>
            Stores the two common quad formats.
            </summary>
        </member>
        <member name="F:BEPUphysics.QuadFormats.LowerLeftUpperRight">
            <summary>
            One triangle occupies the lower left location, the other the upper right.
            </summary>
        </member>
        <member name="F:BEPUphysics.QuadFormats.UpperLeftLowerRight">
            <summary>
            One triangle occupies the upper left location, the other the lower right.
            </summary>
        </member>
        <member name="T:BEPUphysics.Terrain">
            <summary>
            Handles heightmaps, composed of many triangles created only when necessary.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.AllowedPenetration">
            <summary>
            Allowed penetration of triangles in the terrain.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.Bounciness">
            <summary>
            Bounciness of terrain triangles.  Overriden if per-vertex coefficients are used.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.BoundingBox">
            <summary>
            Bounding box surrounding the terrain.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.CoefficientsOfFriction">
            <summary>
            If per-vertex coefficients are used, this is referenced for determining the friction of a terrain triangle.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.CoefficientsOfRestitution">
            <summary>
            If per-vertex coefficients are used, this is referenced for determining the bounciness of a terrain triangle.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.CollisionRules">
            <summary>
            Defines the way in which triangles created by the static triangle group interact with other entities.
            Triangles will only be created to begin with if the collision rule between the Terrain and the nearby entity allows for a collision pair to be created.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.DeletionInterval">
            <summary>
            Length of time between each old triangle deletion attempt.
            Longer times fit well with less active groups, while shorter times work better on more active groups.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.Friction">
            <summary>
            Friction of terrain triangles.  Overriden if per-vertex coefficients are used.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.Heights">
            <summary>
            Heights for the heightmap.  Modifying these values directly does not try to update already existing triangles; using the setHeight method, however, will.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.Margin">
            <summary>
            Collision margin around terrain triangles.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.MaximumAge">
            <summary>
            Number of intervals that can pass before a triangle is considered too old and removed.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.MaximumNumberOfTrianglesToDelete">
            <summary>
            During the update, 'old' triangles that not have been refreshed by a recent interaction are removed.
            Removing excessive numbers of these at once can cause a jerky effect.
            This value imposes a cap on the removals that can occur in any single deletion.
            Reducing this value may require the reduction in the deletion interval to keep pace with newly added triangles
            if the group is particularly active.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.QuadTriangles">
            <summary>
            Triangle organization used per terrain quad.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.RescueDepth">
            <summary>
            Maximum depth below the terrain that objects will be pulled back from if they fall through.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.Tag">
            <summary>
            Storage object given to triangles as an entity tag.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.TryToUseTriangleNormals">
            <summary>
            Whether or not to try to use the face normals of triangles in lieu of contact normals for collision calculations.
            This removes bumps on otherwise smooth terrain.
            The Triangle.useFaceNormalWithinAngle method defines how aggressive the smoothing is, though a high value can cause
            occasional problems with sharp edges.
            </summary>
        </member>
        <member name="F:BEPUphysics.Terrain.UseFaceNormalWithinAngle">
            <summary>
            Defines the angle between a contact normal and the triangle normal 
            under which the contact normal will be set to the triangle normal.
            Only used if the triangle has tryToUseFaceNormal enabled.
            </summary>
        </member>
        <member name="M:BEPUphysics.Terrain.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a terrain based on a heightmap.
            </summary>
            <param name="pos">Position of the origin for the terrain.</param>
        </member>
        <member name="M:BEPUphysics.Terrain.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the terrain.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitEntity">Null; terrains do not necessarily have entities at all ray hit locations.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <returns>Whether or not the ray intersected the target.</returns>
        </member>
        <member name="M:BEPUphysics.Terrain.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Gets all intersections between the ray and the terrain.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitEntities">List of null entries; terrains do not necessarily have entities at all hit locations.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <returns>Whether or not the ray intersected the target.</returns>
        </member>
        <member name="M:BEPUphysics.Terrain.OnAdditionToSpace(BEPUphysics.Space)">
            <summary>
            Sets the collision group of the terrain when added to a space.
            </summary>
            <param name="newSpace">Space that the group was added to.</param>
        </member>
        <member name="M:BEPUphysics.Terrain.UpdateBeforeCollisionDetection(System.Single)">
            <summary>
            Refreshes the Terrain.
            Called automatically when needed by the owning Space.
            </summary>
            <param name="dt">Time since last frame in physical logic.</param>
        </member>
        <member name="M:BEPUphysics.Terrain.GetHeight(System.Single,System.Single)">
            <summary>
            Gets the height at the given location.
            </summary>
            <param name="x">World space location along the x axis.</param>
            <param name="y">World space location along the z axis.</param>
            <returns>Height at the given location.</returns>
        </member>
        <member name="M:BEPUphysics.Terrain.GetNormal(System.Int32,System.Int32)">
            <summary>
            Computes the vertex normal at the given location.
            </summary>
            <param name="x">X position on the terrain to check.</param>
            <param name="y">Y position on the terrain to check.</param>
            <returns>Normal at the given location.</returns>
        </member>
        <member name="M:BEPUphysics.Terrain.GetPosition">
            <summary>
            Returns the position of the terrain.
            </summary>
            <returns>Position of the terrain.</returns>
        </member>
        <member name="M:BEPUphysics.Terrain.GetSpacingX">
            <summary>
            Returns the separation between vertices in the terrain along the world X axis.
            </summary>
            <returns>Separation between vertices in the terrain along the world X axis.</returns>
        </member>
        <member name="M:BEPUphysics.Terrain.GetSpacingZ">
            <summary>
            Returns the separation between vertices in the terrain along the world Z axis.
            </summary>
            <returns>Separation between vertices in the terrain along the world Z axis.</returns>
        </member>
        <member name="M:BEPUphysics.Terrain.SetData(System.Single[0:,0:],System.Int32[],System.Single,System.Single)">
            <summary>
            Defines the data used by the terrain.
            </summary>
            <param name="terrainHeights">Two dimensional list of heights</param>
            <param name="trianglesInQuad">List of vertices composing triangles in a given quad on the terrain.  Options are shown in the QuadFormats class.
            The list should be composed of three entries per triangle, with each entry being a value from 0 to 3.
            0 corresponds to the terrain height index closest to the origin, which could be represented on the local quad as (0,0).
            1 represents the height further along the row in the terrain heights, or (1,0).
            2 represents the height further along the column in the terrain heights, or (0,1).
            3 represents the height further along both the row and column of the terrain heights, or (1,1).
            </param>
            <param name="separationX">Distance between vertices along the X axis.</param>
            <param name="separationZ">Distance between vertices along the Z axis.</param>
            <exception cref="T:System.ArgumentException">Thrown when the quad height index is invalid or the number of triangle indices is invalid.</exception>
        </member>
        <member name="M:BEPUphysics.Terrain.SetData(System.Single[0:,0:],System.Single[0:,0:],System.Single[0:,0:],System.Int32[],System.Single,System.Single)">
            <summary>
            Defines the data used by the terrain.
            </summary>
            <param name="terrainHeights">Two dimensional list of heights</param>
            <param name="terrainBouncinesses">Bounciness of vertices in the terrain.  Overrides any previously set bounciness.</param>
            <param name="terrainFrictions">Friction of vertices in the terrain.  Overrides any previously set friction.</param>
            <param name="trianglesInQuad">List of vertices composing triangles in a given quad on the terrain.  Options are shown in the QuadFormats class.
            The list should be composed of three entries per triangle, with each entry being a value from 0 to 3.
            0 corresponds to the terrain height index closest to the origin, which could be represented on the local quad as (0,0).
            1 represents the height further along the row in the terrain heights, or (1,0).
            2 represents the height further along the column in the terrain heights, or (0,1).
            3 represents the height further along both the row and column of the terrain heights, or (1,1).
            </param>
            <param name="separationX">Distance between vertices along the X axis.</param>
            <param name="separationZ">Distance between vertices along the Y axis.</param>
        </member>
        <member name="M:BEPUphysics.Terrain.SetHeight(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the height at the given location.
            Automatically forces an update of any present triangles.
            </summary>
            <param name="x">Index along the x axis.</param>
            <param name="y">Index along the y axis.</param>
            <param name="height">New height for the location.</param>
        </member>
        <member name="T:BEPUphysics.CollisionRule">
            <summary>
            Defines a set of rules that collisions can adhere to.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRule.Defer">
            <summary>
            Yields the interaction type's determination to a later stage.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRule.Normal">
            <summary>
            Uses all of collision detection, including creating a collision pair, creating contacts when appropriate, and responding to those contacts physically.
            If a collision pair is forced to use a 'normal' interaction but both entities in the pair are kinematic, the collision response will be skipped.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRule.NoResponse">
            <summary>
            Creates a collision pair and generates contacts, but does not undergo collision response.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRule.NoContacts">
            <summary>
            Creates a collision pair but does not generate any contacts and therefore cannot undergo collision response.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionRule.NoPair">
            <summary>
            Does not create a collision pair.  No further collision detection or response takes place.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionGroup">
            <summary>
            A group which can have interaction rules created between it and other collision groups.
            Every entity has a collision group and considers the group's interaction rules in collisions with other entities.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionGroup.#ctor">
            <summary>
            Constructs a new collision group.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionGroup.DefineCollisionRule(BEPUphysics.CollisionGroup,BEPUphysics.CollisionGroup,BEPUphysics.CollisionRule,BEPUphysics.Space)">
            <summary>
            Defines the CollisionRule between the two groups for a given space.
            </summary>
            <param name="groupA">First CollisionGroup of the pair.</param>
            <param name="groupB">Second CollisionGroup of the pair.</param>
            <param name="rule">CollisionRule to use between the pair.</param>
            <param name="space">Space to add the rule to.</param>
        </member>
        <member name="M:BEPUphysics.CollisionGroup.DefineCollisionRulesBetweenSets(System.Collections.Generic.List{BEPUphysics.CollisionGroup},System.Collections.Generic.List{BEPUphysics.CollisionGroup},BEPUphysics.CollisionRule,BEPUphysics.Space)">
            <summary>
            Defines a CollisionRule between every group in the first set and every group in the second set for a given space.
            </summary>
            <param name="aGroups">First set of groups.</param>
            <param name="bGroups">Second set of groups.</param>
            <param name="rule">Collision rule to define between the sets.</param>
            <param name="space">Space to add the rules to.</param>
        </member>
        <member name="M:BEPUphysics.CollisionGroup.DefineCollisionRulesInSet(System.Collections.Generic.List{BEPUphysics.CollisionGroup},BEPUphysics.CollisionRule,BEPUphysics.CollisionRule,BEPUphysics.Space)">
            <summary>
            Defines a CollisionRule between every group in a set with itself and the others in the set for a given space.
            </summary>
            <param name="groups">Set of CollisionGroups.</param>
            <param name="self">CollisionRule between each group and itself.</param>
            <param name="other">CollisionRule between each group and every other group in the set.</param>
            <param name="space">Space to add the rules to.</param>
        </member>
        <member name="M:BEPUphysics.CollisionGroup.DefineCollisionRulesWithSet(BEPUphysics.CollisionGroup,System.Collections.Generic.List{BEPUphysics.CollisionGroup},BEPUphysics.CollisionRule,BEPUphysics.Space)">
            <summary>
            Defines a CollisionRule between a group and every group in a set of groups for a given space.
            </summary>
            <param name="group">First CollisionGroup of the pair.</param>
            <param name="groups">Set of CollisionGroups; each group will have its CollisionRule with the first group defined.</param>
            <param name="rule">CollisionRule to use between the pairs.</param>
            <param name="space">Space to add the rules to.</param>
        </member>
        <member name="M:BEPUphysics.CollisionGroup.RemoveCollisionRule(BEPUphysics.CollisionGroup,BEPUphysics.CollisionGroup,BEPUphysics.Space)">
            <summary>
            Removes any rule between the two groups in the space.
            </summary>
            <param name="groupA">First CollisionGroup of the pair.</param>
            <param name="groupB">SecondCollisionGroup of the pair.</param>
            <param name="space">Space to remove the rule from.</param>
        </member>
        <member name="M:BEPUphysics.CollisionGroup.RemoveCollisionRulesBetweenSets(System.Collections.Generic.List{BEPUphysics.CollisionGroup},System.Collections.Generic.List{BEPUphysics.CollisionGroup},BEPUphysics.Space)">
            <summary>
            Removes any rule between every group in the first set and every group in the second set for a given space.
            </summary>
            <param name="aGroups">First set of groups.</param>
            <param name="bGroups">Second set of groups.</param>
            <param name="space">Space to remove the rules from.</param>
        </member>
        <member name="M:BEPUphysics.CollisionGroup.RemoveCollisionRulesInSet(System.Collections.Generic.List{BEPUphysics.CollisionGroup},BEPUphysics.Space)">
            <summary>
            Removes any rule between every group in a set with itself and the others in the set for a given space.
            </summary>
            <param name="groups">Set of CollisionGroups.</param>
            <param name="space">Space to remove the rules from.</param>
        </member>
        <member name="M:BEPUphysics.CollisionGroup.RemoveCollisionRulesWithSet(BEPUphysics.CollisionGroup,System.Collections.Generic.List{BEPUphysics.CollisionGroup},BEPUphysics.Space)">
            <summary>
            Removes any rule between a group and every group in a set of groups for a given space.
            </summary>
            <param name="group">First CollisionGroup of the pair.</param>
            <param name="groups">Set of CollisionGroups; each group will have its CollisionRule with the first group removed.</param>
            <param name="space">Space to remove the rules from.</param>
        </member>
        <member name="M:BEPUphysics.CollisionGroup.GetHashCode">
            <summary>
            Gets a hash code for the object.
            </summary>
            <returns>Hash code for the object.</returns>
        </member>
        <member name="T:BEPUphysics.CollisionGroupPair">
            <summary>
            Storage strucure containing two CollisionGroup instances used as a key in a collision rules dictionary.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionGroupPair.A">
            <summary>
            First collision group in the pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionGroupPair.B">
            <summary>
            Second collision group in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.CollisionGroupPair.#ctor(BEPUphysics.CollisionGroup,BEPUphysics.CollisionGroup)">
            <summary>
            Constructs a new collision group pair.
            </summary>
            <param name="groupA">First collision group in the pair.</param>
            <param name="groupB">Second collision group in the pair.</param>
        </member>
        <member name="M:BEPUphysics.CollisionGroupPair.Equals(System.Object)">
            <summary>
            Determines whether or not the two objects are equal.
            Use the IEquatable interface implementation if possible.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>Whether or not the two objects are equal.</returns>
        </member>
        <member name="M:BEPUphysics.CollisionGroupPair.GetHashCode">
            <summary>
            Gets the hash code of the entity type pair.
            </summary>
            <returns>Hash code of the entity type pair.</returns>
        </member>
        <member name="T:BEPUphysics.EntityCollisionRules">
            <summary>
            Stores how an entity can interact with objects through collisions.
            </summary>
        </member>
        <member name="F:BEPUphysics.EntityCollisionRules.Group">
            <summary>
            The collision group to which the entity owning this instance belongs to.
            This is overridden by any relationships defined in the specificEntities collection with CollisionRules other than CollisionRule.defer.
            This is also overriden by the personal CollisionRule if it is anything but CollisionRule.defer.
            If the interaction type between the group is defined as CollisionRule.defer, it is considered to be CollisionRule.normal as the collision group is the final stage.
            </summary>
        </member>
        <member name="F:BEPUphysics.EntityCollisionRules.Personal">
            <summary>
            Determines in general how the entity owning this instance should react to other entities.
            This is overridden by any relationships defined in the specificEntities collection with CollisionRules other than CollisionRule.defer.
            If this is not set to CollisionRule.defer, it will override the collision group's collision rules.
            </summary>
        </member>
        <member name="F:BEPUphysics.EntityCollisionRules.SpecificEntities">
            <summary>
            Specifies how the entity owning this instance should react to other individual entities.
            Any rules defined in this collection will take priority over the personal collision rule and the collision group's collision rules.
            Entities that are not in this collection are considered to have a relationship of CollisionRule.defer.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityCollisionRules.GetCollisionRule(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Determines what collision rule governs the interaction between the two entities.
            </summary>
            <param name="a">First entity in the pair.  This entity's space is used to determine the collision detection settings that contain special collision group interaction rules.</param>
            <param name="b">Second entity in the pair.</param>
            <returns>Collision rule governing the interaction between the two entities.</returns>
        </member>
        <member name="M:BEPUphysics.EntityCollisionRules.GetCollisionRule(BEPUphysics.EntityCollisionRules,BEPUphysics.Entities.Entity)">
            <summary>
            Determines what collision rule governs the interaction between the entity ruleset and entity.
            </summary>
            <param name="a">First ruleset in the pair.</param>
            <param name="b">Second entity in the pair.  This entity's space is used to determine the collision detection settings that contain special collision group interaction rules.</param>
            <returns>Collision rule governing the interaction between the two rulesets.</returns>
        </member>
        <member name="T:BEPUphysics.ResourceManagement.LockingResourcePool`1">
            <summary>
            Uses a spinlock to safely access resources.
            </summary>
            <typeparam name="T">Type of object to store in the pool.</typeparam>
        </member>
        <member name="T:BEPUphysics.ResourceManagement.ResourcePool`1">
            <summary>
            Manages a cache of a type of resource.
            </summary>
            <typeparam name="T">Type of object to pool.</typeparam>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.CreateNewResource">
            <summary>
            Creates and returns a new resource.
            </summary>
            <returns>New resource.</returns>
        </member>
        <member name="P:BEPUphysics.ResourceManagement.ResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="P:BEPUphysics.ResourceManagement.ResourcePool`1.InstanceInitializer">
            <summary>
            Gets or sets the function that configures new instances.
            This is only called once per object created for the resource pool.
            </summary>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.#ctor(System.Int32,System.Action{`0})">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
            <param name="initializer">Function to initialize new instances in the resource pool with.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.#ctor(System.Int32)">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.#ctor">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="P:BEPUphysics.ResourceManagement.LockingResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="T:BEPUphysics.ForceFields.VolumeForceFieldShape">
            <summary>
            Defines the area in which a force field works using an entity's shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.ForceFields.VolumeForceFieldShape.#ctor(BEPUphysics.DetectorVolume)">
            <summary>
            Constructs a new force field shape using a detector volume.
            </summary>
            <param name="volume">Volume to use.</param>
        </member>
        <member name="M:BEPUphysics.ForceFields.VolumeForceFieldShape.GetPossiblyAffectedEntities">
            <summary>
            Determines the possibly involved entities.
            </summary>
            <returns>Possibly involved entities.</returns>
        </member>
        <member name="M:BEPUphysics.ForceFields.VolumeForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
            <summary>
            Determines if the entity is affected by the force field.
            </summary>
            <param name="testEntity">Entity to test.</param>
            <returns>Whether the entity is affected.</returns>
        </member>
        <member name="P:BEPUphysics.ForceFields.VolumeForceFieldShape.IncludeTestedEntityCollisionMargin">
            <summary>
            Gets or sets whether or not to include the tested entities' collision margins when testing.
            </summary>
        </member>
        <member name="P:BEPUphysics.ForceFields.VolumeForceFieldShape.Volume">
            <summary>
            Gets or sets the volume used by the shape.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.LinearInterpolationCurve3D">
            <summary>
            Defines a 3D curve using linear interpolation.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.Evaluate(System.Int32,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
            <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
            <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
            <param name="value">Value at the given location.</param>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
            <summary>
            Gets the curve's bounding index information.
            </summary>
            <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
            <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32)">
            <summary>
            Called when a control point is added.
            </summary>
            <param name="curveControlPoint">New control point.</param>
            <param name="index">Index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32)">
            <summary>
            Called when a control point is removed.
            </summary>
            <param name="curveControlPoint">Removed control point.</param>
            <param name="oldIndex">Index of the control point before it was removed.</param>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32)">
            <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
            <param name="oldIndex">Old index of the control point.</param>
            <param name="newIndex">New index of the control point.</param>
        </member>
        <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
            <param name="curveControlPoint">Changed control point.</param>
        </member>
        <member name="T:BEPUphysics.SimulationIsland">
            <summary>
            Maintains lists of interacting objects.  Each island is isolated and contained entities do not interact with other islands' entities.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationIsland.Entities">
            <summary>
            List of entities within the island.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationIsland.isDeactivationCandidate">
            <summary>
            Whether or not the island is a candidate for deactivation.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationIsland.isActive">
            <summary>
            Whether or not the simulation island is active.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationIsland.numDeactivationCandidatesContained">
            <summary>
            Number of entities which are deactivation candidates within the island.
            </summary>
        </member>
        <member name="M:BEPUphysics.SimulationIsland.#ctor">
            <summary>
            Constructs an empty, unused simulation island.
            </summary>
        </member>
        <member name="M:BEPUphysics.SimulationIsland.TryToDeactivate">
            <summary>
            Attempts to deactivate the island if all objects are ready to be deactivated within it.
            </summary>
        </member>
        <member name="M:BEPUphysics.SimulationIsland.Activate">
            <summary>
            Forces all objects in the island to activate.
            </summary>
        </member>
        <member name="M:BEPUphysics.SimulationIsland.Replace(BEPUphysics.Entities.Entity,BEPUphysics.SimulationIsland)">
            <summary>
            Replaces the entity's simulation island.
            </summary>
            <param name="e">Entity to have its island replaced.</param>
            <param name="s">Island to replace the entity's current island.</param>
        </member>
        <member name="M:BEPUphysics.SimulationIsland.MergeWith(BEPUphysics.SimulationIsland,BEPUphysics.SimulationIsland)">
            <summary>
            Combines the two simulation islands, destroying the latter.
            </summary>
            <param name="s1">First island to combine.</param>
            <param name="s2">Second island to combine.  Will be destroyed after the merge.</param>
        </member>
        <member name="M:BEPUphysics.SimulationIsland.Merge(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Combines the simulation islands of a solver updateable's entities, destroying the extra.
            </summary>
            <param name="entities">List of involved entities in the solver updateable.</param>
        </member>
        <member name="M:BEPUphysics.SimulationIsland.TrySplit(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Attempts to split the simulation group of both entities into two isolated ones.
            Does nothing if an indirect connection between a and b exists.
            </summary>
            <param name="a">First body of the connection to break.</param>
            <param name="b">Second body of the connection to break.</param>
            <returns>True if the split succeeded, false otherwise.</returns>
        </member>
        <member name="M:BEPUphysics.SimulationIsland.TrySplit(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Attempts to split the simulation group of multiple entities into multiple simulation groups.
            Does nothing if an indirect connection between a and b exists.
            </summary>
            <param name="entities">List of entities to try and split.</param>
        </member>
        <member name="M:BEPUphysics.SimulationIsland.SplitBetween(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <returns>True if a split could be completed.</returns>
        </member>
        <member name="P:BEPUphysics.SimulationIsland.IsCurrentlyActive">
            <summary>
            Gets whether or not the simulation island's entities are currently active.
            </summary>
        </member>
        <member name="P:BEPUphysics.SimulationIsland.Space">
            <summary>
            Gets the space owning the island.
            </summary>
        </member>
        <member name="T:BEPUphysics.EntityEventManager">
            <summary>
            Handles an entity's events and the addition or removal of events.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityEventManager.RemoveAllEvents">
            <summary>
            Removes all events associated with this entity.
            </summary>
        </member>
        <member name="M:BEPUphysics.EntityEventManager.VerifyEventStatus">
            <summary>
            Removes the entity from the space's list of eventful entities if no events are active.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.CollisionEnded">
            <summary>
            Fires when the entity stops touching another entity.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.CollisionEnding">
            <summary>
            Fires when the entity stops touching another entity.
            Unlike the CollisionEnded event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.CollisionPairCreated">
            <summary>
            Fires when this entity's bounding box newly overlaps another entity's bounding box.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.CollisionPairRemoved">
            <summary>
            Fires when this entity's bounding box no longer overlaps another entity's bounding box.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.CollisionPairTouched">
            <summary>
            Fires when a collision pair is updated and there are contact points in it.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.CollisionPairTouching">
            <summary>
            Fires when a collision pair is updated and there are contact points in it.
            Unlike the CollisionPairTouched event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.CollisionPairUpdated">
            <summary>
            Fires when a collision pair is updated.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.CollisionPairUpdating">
            <summary>
            Fires when a collision pair is updated.
            Unlike the CollisionPairUpdated event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.ContactCreated">
            <summary>
            Fires when this entity gains a contact point with another entity.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.ContactRemoved">
            <summary>
            Fires when this entity loses a contact point with another entity.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.CreatingCollisionPair">
            <summary>
            Fires when this entity's bounding box newly overlaps another entity's bounding box.
            Unlike the CollisionPairCreated event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.CreatingContact">
            <summary>
            Fires when this entity gains a contact point with another entity.
            Unlike the ContactCreated event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.DetectingInitialCollision">
            <summary>
            Fires when a collision first occurs.
            Unlike the InitialCollisionDetected event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.EntityUpdated">
            <summary>
            Fires when the entity is updated.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.EntityUpdating">
            <summary>
            Fires when the entity is updated.   
            Unlike the EntityUpdated event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.InitialCollisionDetected">
            <summary>
            Fires when a collision first occurs.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.RemovingCollisionPair">
            <summary>
            Fires when this entity's bounding box no longer overlaps another entity's bounding box.
            Unlike the CollisionPairRemoved event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="E:BEPUphysics.EntityEventManager.RemovingContact">
            <summary>
            Fires when this entity loses a contact point with another entity.
            Unlike the ContactRemoved event, this event will run inline instead of at the end of the space's update.
            Some operations are unsupported while the engine is updating, and be especially careful if internal multithreading is enabled.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.LinearAxisLimit">
            <summary>
            Constrains the distance along an axis between anchor points attached to two entities.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a constraint which tries to keep anchors on two entities within a certain distance of each other along each of three axes.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="anchorA">World space point to attach to connection A that will be constrained.</param>
            <param name="anchorB">World space point to attach to connection B that will be constrained.</param>
            <param name="axis">Limited axis in world space to attach to connection A.</param>
            <param name="minimum">Minimum allowed position along the axis.</param>
            <param name="maximum">Maximum allowed position along the axis.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.LinearAxisLimit.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.AnchorA">
            <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.AnchorB">
            <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.Axis">
            <summary>
            Gets or sets the limited axis in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.LocalAxis">
            <summary>
            Gets or sets the limited axis in the local space of connection A.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.LocalOffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.LocalOffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.Maximum">
            <summary>
            Gets or sets the maximum allowed distance along the axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.Minimum">
            <summary>
            Gets or sets the minimum allowed distance along the axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.OffsetA">
            <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.OffsetB">
            <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LinearAxisLimit.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Paths.PathFollowing.EntityMover">
            <summary>
            Pushes an entity around according to goal positions and orientations.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new EntityMover.
            </summary>
            <param name="e">Entity to move.</param>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Constraints.SingleEntityLinearMotor)">
            <summary>
            Constructs a new EntityMover.
            </summary>
            <param name="e">Entity to move.</param>
            <param name="linearMotor">Motor to use for linear motion if the entity is dynamic.</param>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.GetLinearVelocity(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Gets the angular velocity necessary to change an entity's orientation from
            the starting quaternion to the ending quaternion over time dt.
            </summary>
            <param name="start">Initial position.</param>
            <param name="end">Final position.</param>
            <param name="dt">Time over which the angular velocity is to be applied.</param>
            <returns>Angular velocity to reach the goal in time.</returns>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.OnAdditionToSpace(BEPUphysics.Space)">
            <summary>
            Adds the motors to the space.  Called automatically.
            </summary>
            <param name="newSpace">Space the mover is being added to.</param>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.OnRemovalFromSpace">
            <summary>
            Removes the motors from the space.  Called automatically.
            </summary>
        </member>
        <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.UpdateDuringForces(System.Single)">
            <summary>
            Called automatically by the space.
            </summary>
            <param name="dt">Simulation timestep.</param>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.Entity">
            <summary>
            Gets or sets the entity being pushed by the entity mover.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.LinearMotor">
            <summary>
            Gets the linear motor used by the entity mover.
            When the affected entity is dynamic, it is pushed by motors.
            This ensures that its interactions and collisions with
            other entities remain stable.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.LocalOffset">
            <summary>
            Gets or sets the point in the entity's local space that will be moved towards the target position.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.Offset">
            <summary>
            Gets or sets the point attached to the entity in world space that will be moved towards the target position.
            </summary>
        </member>
        <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.TargetPosition">
            <summary>
            Gets or sets the target location of the entity mover.
            </summary>
        </member>
        <member name="T:BEPUphysics.Vehicle.Vehicle">
            <summary>
            Simulates wheeled vehicles using a variety of constraints and shape casts.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a vehicle.
            </summary>
            <param name="shape">Body of the vehicle.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.#ctor(BEPUphysics.Entities.Entity,System.Collections.Generic.IEnumerable{BEPUphysics.Vehicle.Wheel})">
            <summary>
            Constructs a vehicle.
            </summary>
            <param name="shape">Body of the vehicle.</param>
            <param name="wheelList">List of wheels of the vehicle.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.OnAdditionToSpace(BEPUphysics.Space)">
            <summary>
            Sets up the vehicle's information when being added to the space.
            Called automatically when the space adds the vehicle.
            </summary>
            <param name="newSpace">New owning space.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.OnRemovalFromSpace">
            <summary>
            Sets up the vehicle's information when being added to the space.
            Called automatically when the space adds the vehicle.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.UpdateAtEndOfFrame(System.Single)">
            <summary>
            Performs the end-of-frame update component.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.UpdateAtEndOfUpdate(System.Single)">
            <summary>
            Performs the end-of-update update component.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.AddWheel(BEPUphysics.Vehicle.Wheel)">
            <summary>
            Adds a wheel to the vehicle.
            </summary>
            <param name="wheel">WheelTest to add.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.RemoveWheel(BEPUphysics.Vehicle.Wheel)">
            <summary>
            Removes a wheel from the vehicle.
            </summary>
            <param name="wheel">WheelTest to remove.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.ApplyImpulse(System.Single)">
            <summary>
            Updates the vehicle.
            Called automatically when needed by the owning Space.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.CollectInvolvedEntities(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Adds entities associated with the solver item to the involved entities list.
            Ensure that sortInvolvedEntities() is called at the end of the function.
            This allows the non-batched multithreading system to lock properly.
            </summary>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.PreStep(System.Single)">
            <summary>
            Computes information required during the later update.
            Called once before the iteration loop.
            </summary>
            <param name="dt">Time since previous frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.Vehicle.Vehicle.UpdateSolverActivity">
            <summary>
            Updates the activity state of the wheel constraints.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Vehicle.Body">
            <summary>
            Gets or sets the entity representing the shape of the car.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Vehicle.SupportedWheelCount">
            <summary>
            Number of wheels with supports.
            </summary>
        </member>
        <member name="P:BEPUphysics.Vehicle.Vehicle.Wheels">
            <summary>
            Gets the list of wheels supporting the vehicle.
            </summary>
        </member>
        <member name="T:BEPUphysics.CollisionDetectionType">
            <summary>
            Stores the various types of collision detection available.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionDetectionType.DiscreteMPRGJK">
            <summary>
            The recommended discrete collision detection type.
            Exhibits good performance and behavior, but can miss high velocity collisions.
            Soft interpenetration correction.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionDetectionType.DiscreteMPR">
            <summary>
            An experimental collision detection system using only Minkowski Portal Refinement
            for all detection, contact generation, and penetration resolution purposes.
            Exhibits good performance; faster than MPRGJK during times of intense collision, worse during most normal circumstances.
            Less polished behavior compared to the discreteMPRGJK hybrid.
            Can miss high velocity collisions.
            Soft interpenetration correction.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionDetectionType.DiscreteGJK">
            <summary>
            The old collision detection system; somewhat slower than the other two newer solutions.
            Has overall acceptable behavior, though it uses a hard penetration correction method that teleports objects.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionDetectionType.LinearContinuous">
            <summary>
            Uses swept collision detection along the linear velocity of bodies to avoid missing most collisions.
            Performance is similar to that of the discrete methods, though generally slightly slower.
            Because it does not take into account angular motion during sweeping, this method can still miss high angular velocity collisions.
            </summary>
        </member>
        <member name="F:BEPUphysics.CollisionDetectionType.FullyContinuous">
            <summary>
            Uses conservative advancement to avoid missing any collision.
            There is some computational overhead associated with this method compared to the others, though it should be fine for most applications.
            </summary>
        </member>
        <member name="T:BEPUphysics.SimulationSettings">
            <summary>
            Stores all of the tweakable states of a simulation.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetection">
            <summary>
            Collection of settings that govern a simulation's collision detection behavior.
            Defines how contacts are created and maintained during entity collisions.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionResponse">
            <summary>
            Collection of settings that govern a simulation's collision response behavior.
            Defines how entities react when under the influence of collisions and other solver-based systems like constraints.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.Deactivation">
            <summary>
            Collection of settings that define how and when objects go to 'sleep,' using far less resources.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.MotionUpdate">
            <summary>
            Collection of settings that define how entities are moved through space.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.TimeStep">
            <summary>
            Collection of settings that govern how the simulation moves forward in time.
            </summary>
        </member>
        <member name="T:BEPUphysics.SimulationSettings.CollisionDetectionSettings">
            <summary>
            Collection of settings that govern a simulation's collision detection behavior.
            Defines how contacts are created and maintained during entity collisions.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.BouncinessBlendMethod">
            <summary>
            Determines how to factor together friction values from two objects in a collision.
            Defaults to using the maximum bounciness of the pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.BouncinessBlender">
            <summary>
            The property blender used by default in collision bounciness.
            Uses the space's bounciness PropertyBlendMethod to blend.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.CollisionDetectionType">
            <summary>
            Determines how the engine detects collision and contact between objects.
            Defaults to fully continuous.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.CollisionGroupRules">
            <summary>
            Defines any special collision rules between collision groups.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.ContactInvalidationLengthSquared">
            <summary>
            For persistent manifolds of the MPR/GJK/MPRGJK collision detection types, contacts are represented by an offset in local space of two colliding bodies.
            The distance between these offsets transformed into world space and projected onto a plane defined by the contact normal squared is compared against this value.
            If this value is exceeded, the contact is removed from the contact manifold.
            
            If the world is smaller or larger than 'normal' for the engine, adjusting this value proportionally can improve contact caching behavior.
            The default value of .01f works well for worlds that operate on the order of 1 unit.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.DefaultAllowedPenetration">
            <summary>
            The default amount of allowed penetration into the margin before position correcting impulses will be applied.
            Must be less than the margin, defualts to .005f.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.DefaultCollisionRule">
            <summary>
            If a CollisionRule calculation between two colliding objects results in no defined CollisionRule, this value will be used.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.DefaultDynamicCollisionGroup">
            <summary>
            When a dynamic entity is created and added to a space without having a specific collision group set beforehand, it inherits this collision group.
            There are no special rules associated with this group by default; entities within this group have normal, full interaction with all other entities.
            Collision group interaction rules can be overriden by entity personal collision rules or entity-to-entity specific collision rules.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.DefaultKinematicCollisionGroup">
            <summary>
            When a kinematic entity is created and added to a space without having a specific collision group set beforehand, it inherits this collision group.
            Entities in this collision group will not create collision pairs with other entities of this collision group by default.  All other interactions are normal.
            Collision group interaction rules can be overriden by entity personal collision rules or entity-to-entity specific collision rules.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.DefaultMargin">
            <summary>
            Default collision margin around objects.  Margins help prevent objects from interpenetrating and improve stability.
            Defaults to .04f.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.FrictionBlendMethod">
            <summary>
            Determines how to factor together bounciness values from two objects in a collision.
            Defaults to using the average friction of the pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.FrictionBlender">
            <summary>
            The property blender used by default in collision friction.
            Uses the space's friction PropertyBlendMethod to blend.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.SpecialCaseCollisionDetectionHandlers">
            <summary>
            Contains a registry of special collision handling functions to use for certain collision type pairs.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.UseContinuousDetectionAgainstMovingKinematics">
            <summary>
            Whether or not to use continuous collision detection against velocity-based entities.
            If set to true, moving kinematic bodies will interrupt their movement to catch a collision at the time of impact with a dynamic body
            rather than possibly missing the collision.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.UseContinuousDetectionInNoResponsePairs">
            <summary>
            Whether or not to use continuous collision detection in collision pairs where there is no collision response.
            If enabled, this guarantees that a 'detector' will not miss any bodies flying through it, though it has the
            downside of interrupting the movement of the colliding entity without doing any collision response to stop it.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.UseOneShotManifolds">
            <summary>
            Whether or not to use one shot manifolds in contact generation.
            This provides additional stability to some collisions by attempting to add contacts if the manifold is only a single point at the cost of a little overhead.
            </summary>
        </member>
        <member name="M:BEPUphysics.SimulationSettings.CollisionDetectionSettings.#ctor">
            <summary>
            Initializes the collision detection settings with default values.
            </summary>
        </member>
        <member name="T:BEPUphysics.SimulationSettings.CollisionDetectionSettings.CollisionDetectionHandler">
            <summary>
            A function which updates the contact manifold of a collision pair.
            </summary>
            <param name="dt">Simulation timestep.</param>
            <param name="pair"></param>
        </member>
        <member name="T:BEPUphysics.SimulationSettings.CollisionDetectionSettings.EntityTypePair">
            <summary>
            Storage strucure containing two types of entities involved in a collision.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.EntityTypePair.A">
            <summary>
            Type of the first entity in the pair.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionDetectionSettings.EntityTypePair.B">
            <summary>
            Type of the second entity in the pair.
            </summary>
        </member>
        <member name="M:BEPUphysics.SimulationSettings.CollisionDetectionSettings.EntityTypePair.#ctor(System.Type,System.Type)">
            <summary>
            Constructs a new entity type pair.
            </summary>
            <param name="entityAType">Type of the first entity in the pair.</param>
            <param name="entityBType">Type of the second entity in the pair.</param>
        </member>
        <member name="M:BEPUphysics.SimulationSettings.CollisionDetectionSettings.EntityTypePair.Equals(System.Object)">
            <summary>
            Determines whether or not the two objects are equal.
            Use the IEquatable interface implementation if possible.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>Whether or not the two objects are equal.</returns>
        </member>
        <member name="M:BEPUphysics.SimulationSettings.CollisionDetectionSettings.EntityTypePair.GetHashCode">
            <summary>
            Gets the hash code of the entity type pair.
            </summary>
            <returns>Hash code of the entity type pair.</returns>
        </member>
        <member name="T:BEPUphysics.SimulationSettings.CollisionResponseSettings">
            <summary>
            Collection of settings that govern a simulation's collision response behavior.
            Defines how entities react when under the influence of collisions and other solver-based systems like constraints.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionResponseSettings.BouncinessVelocityThreshold">
            <summary>
            Impact velocity above which the bouciness of the object pair is taken into account.  Below the threshold, no extra energy is added.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionResponseSettings.Iterations">
            <summary>
            Number of iterations to use in sequential impulses.  Recommended values range from 5 to 15.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionResponseSettings.IterationsBeforeEarlyOut">
            <summary>
            The number of allowed iterations at effectively zero applied impulse in the contact solver before no longer attempting to calculate new impulses for that frame.
            A value of 0 can cause slight instability but increased performance, while high values have close to no impact on stability but correspondingly little performance gain.
            Defaults to 1.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionResponseSettings.MaximumPositionCorrectionSpeed">
            <summary>
            Maximum speed at which interpenetrating objects or out of alignment joints will attempt to correct.
            Only applies when the Baumgarte method is used when useSplitImpulsePositionCorrection is set to false for contacts.
            Defaults to 4.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionResponseSettings.MinimumImpulse">
            <summary>
            Impulses with magnitudes below this value will count as effectively zero in determining iteration early outs.
            High values quicken the short circuit but can cause instability, while low values will often prevent short circuiting, possibly increasing accuracy but harming performance.
            Defaults to .001f.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionResponseSettings.PenetrationRecoveryStiffness">
            <summary>
            Fraction of position error to convert into corrective momentum when using the Baumgarte position correction method,
            active when useSplitImpulsePositionCorrection is set to false.
            Defaults to .2.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionResponseSettings.StaticFrictionVelocityThreshold">
            <summary>
            Magnitude of relative velocity at a contact point below which staticFriction is used.
            dynamicFriction is used when velocity exceeds this threshold.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionResponseSettings.TwistFrictionFactor">
            <summary>
            When useCentralFriction is set to true, this is the value by which a collision pair's friction coefficient will be multiplied to get the twist friction coefficient.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.CollisionResponseSettings.UseCentralFriction">
            <summary>
            Whether or not to use central friction.  When true, friction is computed on a single point at the center of the area in which two entities touch.
            When false, friction is computed at each point. 
            </summary>
        </member>
        <member name="T:BEPUphysics.SimulationSettings.DeactivationSettings">
            <summary>
            Collection of settings that define how and when objects go to 'sleep,' using far less resources.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.DeactivationSettings.AngularVelocityClamping">
            <summary>
            Lower boundary of angular velocity.  Objects staying under this limit will have their velocity set to zero.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.DeactivationSettings.AngularVelocityClampingTime">
            <summary>
            Length of time in seconds that entities are allowed to have angular velocities below angularVelocityClamping before being set to zero.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.DeactivationSettings.LinearVelocityClamping">
            <summary>
            Lower boundary of linear velocity.  Objects staying under this limit will have their velocity set to zero.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.DeactivationSettings.LinearVelocityClampingTime">
            <summary>
            Length of time in seconds that entities are allowed to have linear velocities below linearVelocityClamping before being set to zero.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.DeactivationSettings.NumEntitiesToTryToDeactivatePerFrame">
            <summary>
            Number of entities the space will try to put to sleep each frame.  It will continue cycling through simulation islands each frame until at least this many entities are checked or every simulation island is checked.
            Defaults to 100.
            </summary>
        </member>
        <member name="T:BEPUphysics.SimulationSettings.MotionUpdateSettings">
            <summary>
            Collection of settings that define how entities are moved through space.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.MotionUpdateSettings.InertiaTensorScale">
            <summary>
            Value to scale any created entities' inertia tensors by.
            Larger tensors (above 1) improve stiffness of constraints and contacts, while smaller values (towards 1) are closer to 'realistic' behavior.
            If MotionUpdateSettings.padInertiaTensors is enabled, this value can be reduced significantly or all the way to 1 while maintaining fairly good behavior.
            Defaults to 2.5.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.MotionUpdateSettings.PadInertiaTensors">
            <summary>
            Whether or not to increase the diagonals of inertia tensors any entities created.
            This increases rotational stability when conserveAngularMomentum is enabled.
            Note that this applies to all entities created, not just those of a particular space.
            Individual entities may be padded by calling their padInertiaTensor method.
            If enabled, the default MotionUpdateSettings.inertiaTensorScale can be tweaked downward to improve realism.
            Defaults to false.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.MotionUpdateSettings.ConserveAngularMomentum">
            <summary>
            Whether or not to conserve angular momentum.  Doing so allows for gyroscopic effects, but adds instability.
            If enabled, rotational stability can be improved by padding their inertia tensors by enabling MotionUpdateSettings.padInertiaTensors.
            Defaults to false.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.MotionUpdateSettings.Gravity">
            <summary>
            A uniform acceleration of physically simulated objects within the space.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.MotionUpdateSettings.UseRk4AngularIntegration">
            <summary>
            Whether or not to use RK4 angular integration.  Improves rotating behavior when conserving
            angular momentum at the cost of some speed.
            Should not be used when conserveAngularMomentum is set to false.
            If set to false, the system will default to using symplectic Euler integration.
            Defaults to false.
            </summary>
        </member>
        <member name="T:BEPUphysics.SimulationSettings.TimeStepSettings">
            <summary>
            Collection of settings that govern how the simulation moves forward in time.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.TimeStepSettings.TimeScale">
            <summary>
            Time speed factor relative to regular (1).
            Values between 0 and 1 correspond to slower simulations, while values above 1 increase the speed of simulation.
            Defaults to 1.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.TimeStepSettings.TimeStepCountPerFrameMaximum">
            <summary>
            Maximum number of timesteps to perform during a given frame when useInternalTimeStepping is enabled.
            Defaults to 10.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.TimeStepSettings.TimeStepCountPerFrameMinimum">
            <summary>
            Minimum number of timesteps to perform during a given frame when useInternalTimeStepping is enabled.
            Defaults to 0.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.TimeStepSettings.TimeStepDuration">
            <summary>
            Length, in seconds, of each internal integration step.
            Defaults to 1/60.
            </summary>
        </member>
        <member name="F:BEPUphysics.SimulationSettings.TimeStepSettings.UseInternalTimeStepping">
            <summary>
            Whether or not to use a time accumulation system to step and interpolate the simulation the appropriate amount given
            variable length frames.
            Defaults to false.
            </summary>
        </member>
        <member name="T:BEPUphysics.Entities.Box">
            <summary>
            Box-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.Box.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated box.
            </summary>
            <param name="pos">Position of the box.</param>
            <param name="wide">Height of the box.</param>
            <param name="len">Length of the box.</param>
            <param name="high">Height of the box.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Box.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic box.
            </summary>
            <param name="pos">Position of the box.</param>
            <param name="wide">Height of the box.</param>
            <param name="len">Length of the box.</param>
            <param name="high">Height of the box.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Box.#ctor(BEPUphysics.DataStructures.MotionState,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a physically simulated box.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="wide">Height of the box.</param>
            <param name="len">Length of the box.</param>
            <param name="high">Height of the box.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Box.#ctor(BEPUphysics.DataStructures.MotionState,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a nondynamic box.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="wide">Height of the box.</param>
            <param name="len">Length of the box.</param>
            <param name="high">Height of the box.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Box.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Box.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Box.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.Box.RayTest(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the intersection between the box and the ray.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="t">Distance, in units of the length of the direction vector, to the hit location.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="P:BEPUphysics.Entities.Box.HalfHeight">
            <summary>
            Height of the box divided by two.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Box.HalfLength">
            <summary>
            Length of the box divided by two.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Box.HalfWidth">
            <summary>
            Width of the box divided by two.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Box.Height">
            <summary>
            Height of the box.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Box.Length">
            <summary>
            Length of the box.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.Box.Width">
            <summary>
            Width of the box.
            </summary>
        </member>
        <member name="T:BEPUphysics.ContainmentState">
            <summary>
            Stores flags regarding an object's degree of inclusion in a volume.
            </summary>
        </member>
        <member name="F:BEPUphysics.ContainmentState.IsContained">
            <summary>
            Whether or not the object is fully contained.
            </summary>
        </member>
        <member name="F:BEPUphysics.ContainmentState.IsTouching">
            <summary>
            Whether or not the object is partially or fully contained.
            </summary>
        </member>
        <member name="M:BEPUphysics.ContainmentState.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructs a new ContainmentState.
            </summary>
            <param name="touching">Whether or not the object is partially or fully contained.</param>
            <param name="contained">Whether or not the object is fully contained.</param>
        </member>
        <member name="T:BEPUphysics.DetectorVolume">
            <summary>
            Manages the detection of entities within an arbitrary closed triangle mesh.
            </summary>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.#ctor(BEPUphysics.DataStructures.TriangleMesh)">
            <summary>
            Creates a detector volume.
            </summary>
            <param name="triangleMesh">Arbitrary closed triangle mesh representing the volume.</param>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.UpdateAtEndOfUpdate(System.Single)">
            <summary>
            Updates the listing of contained entities and their states after the end of a space update.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.IsEntityIntersectingVolume(BEPUphysics.Entities.Entity)">
            <summary>
            Determines whether or not an entity is partially or fully contained within the volume.
            </summary>
            <param name="entity">Entity to check for intersection.</param>
            <returns>Whether or not the entity is partially or fully contained with the volume.</returns>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.IsEntityIntersectingVolume(BEPUphysics.Entities.Entity,System.Single)">
            <summary>
            Determines whether or not an entity is partially or fully contained within the volume.
            </summary>
            <param name="entity">Entity to check for intersection.</param>
            <param name="margin">Extra space around the core shape of the entity to include in the test.</param>
            <returns>Whether or not the entity is partially or fully contained with the volume.</returns>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.IsEntityIntersectingVolume(BEPUphysics.Entities.Entity,System.Boolean@)">
            <summary>
            Determines whether or not an entity is partially or fully contained within the volume.
            </summary>
            <param name="entity">Entity to check for intersection.</param>
            <param name="isContained">Whether or not the entity is fully contained within the volume.</param>
            <returns>Whether or not the entity is partially or fully contained with the volume.</returns>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.IsEntityIntersectingVolume(BEPUphysics.Entities.Entity,System.Single,System.Boolean@)">
            <summary>
            Determines whether or not an entity is partially or fully contained within the volume.
            </summary>
            <param name="entity">Entity to check for intersection.</param>
            <param name="margin">Extra space around the core shape of the entity to include in the test.</param>
            <param name="isContained">Whether or not the entity is fully contained within the volume.</param>
            <returns>Whether or not the entity is partially or fully contained with the volume.</returns>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.IsEntityIntersectingVolume(BEPUphysics.Entities.Entity,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Determines whether or not an entity is partially or fully contained within the volume.
            Any surface triangles intersected by the entity are collected.
            </summary>
            <param name="entity">Entity to check for intersection.</param>
            <param name="firstVertexIndices">List of the indices of the first vertices of triangles intersected by the entity.</param>
            <param name="secondVertexIndices">List of the indices of the second vertices of triangles intersected by the entity.</param>
            <param name="thirdVertexIndices">List of the indices of the third vertices of triangles intersected by the entity.</param>
            <returns>Whether or not the entity is partially or fully contained with the volume.</returns>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.IsEntityIntersectingVolume(BEPUphysics.Entities.Entity,System.Single,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Determines whether or not an entity is partially or fully contained within the volume.
            Any surface triangles intersected by the entity are collected.
            </summary>
            <param name="entity">Entity to check for intersection.</param>
            <param name="margin">Extra space around the core shape of the entity to include in the test.</param>
            <param name="firstVertexIndices">List of the indices of the first vertices of triangles intersected by the entity.</param>
            <param name="secondVertexIndices">List of the indices of the second vertices of triangles intersected by the entity.</param>
            <param name="thirdVertexIndices">List of the indices of the third vertices of triangles intersected by the entity.</param>
            <returns>Whether or not the entity is partially or fully contained with the volume.</returns>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.IsEntityWithinVolume(BEPUphysics.Entities.Entity)">
            <summary>
            Determines whether or not an entity is fully contained within the volume.
            </summary>
            <param name="entity">Entity to check for containment.</param>
            <returns>Whether or not the entity is fully contained with the volume.</returns>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.IsEntityWithinVolume(BEPUphysics.Entities.Entity,System.Single)">
            <summary>
            Determines whether or not an entity is fully contained within the volume.
            </summary>
            <param name="entity">Entity to check for containment.</param>
            <param name="margin">Extra space around the core shape of the entity to include in the test.</param>
            <returns>Whether or not the entity is fully contained with the volume.</returns>
        </member>
        <member name="M:BEPUphysics.DetectorVolume.IsPointInVolume(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines whether the given point is within the triangle mesh.
            </summary>
            <param name="point">Point to check.</param>
            <returns>Whether or not the point is in the triangle mesh volume.</returns>
        </member>
        <member name="P:BEPUphysics.DetectorVolume.NearbyEntities">
            <summary>
            Gets a mapping of nearby entities to their containment states as determined by the DetectorVolume update method.
            </summary>
        </member>
        <member name="P:BEPUphysics.DetectorVolume.TriangleMesh">
            <summary>
            Gets or sets the closed triangle mesh against which queries are made.
            </summary>
        </member>
        <member name="E:BEPUphysics.DetectorVolume.EntityBeginsTouching">
            <summary>
            Fires when an entity comes into contact with the volume.
            </summary>
        </member>
        <member name="E:BEPUphysics.DetectorVolume.EntityStopsTouching">
            <summary>
            Fires when an entity ceases to intersect the volume.
            </summary>
        </member>
        <member name="E:BEPUphysics.DetectorVolume.VolumeBeginsContainingEntity">
            <summary>
            Fires when an entity becomes fully engulfed by a volume.
            </summary>
        </member>
        <member name="E:BEPUphysics.DetectorVolume.VolumeStopsContainingEntity">
            <summary>
            Fires when an entity ceases to be fully engulfed by a volume.
            </summary>
        </member>
        <member name="T:BEPUphysics.ResourceManagement.UnsafeResourcePool`1">
            <summary>
            Manages a resource type, but performs no locking to handle asynchronous access.
            </summary>
            <typeparam name="T">Type of object to store in the pool.</typeparam>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.#ctor(System.Int32,System.Action{`0})">
            <summary>
            Constructs a new locking resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
            <param name="initializer">Function to initialize new instances in the resource pool with.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.#ctor(System.Int32)">
            <summary>
            Constructs a new locking resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.#ctor">
            <summary>
            Constructs a new locking resource pool.
            </summary>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="P:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.RevoluteMotor">
            <summary>
            Tries to rotate two entities so that they reach a specified relative orientation or speed around an axis.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new constraint tries to rotate two entities so that they reach a specified relative orientation around an axis.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="freeAxis">Allowed rotation axis of the hinge in world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteMotor.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteMotor.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteMotor.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteMotor.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteMotor.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteMotor.SetupJointTransforms(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
            <param name="freeAxis">Axis around which rotation is allowed.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteMotor.Basis">
            <summary>
            Gets the basis attached to entity A.
            The primary axis represents the motorized axis.
            The x axis and y axis represent a plane against which entity B's attached test axis is project to determine the hinge angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteMotor.LocalTestAxis">
            <summary>
            Gets or sets the axis attached to entity B in its local space.
            This axis is projected onto the x and y axes of transformA to determine the hinge angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteMotor.TestAxis">
            <summary>
            Gets or sets the axis attached to entity B in world space.
            This axis is projected onto the x and y axes of transformA to determine the hinge angle.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, the error is zero.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.DistanceJoint">
            <summary>
            Constraint which tries to maintain the distance between points on two entities.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.DistanceJoint.distance">
            <summary>
            Distance maintained between the anchors.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a distance joint.
            </summary>
            <param name="connectionA">First body connected to the distance joint.</param>
            <param name="connectionB">Second body connected to the distance joint.</param>
            <param name="anchorA">Connection to the distance joint from the first connected body in world space.</param>
            <param name="anchorB"> Connection to the distance joint from the second connected body in world space.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceJoint.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceJoint.ApplyImpulse(System.Single)">
            <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.DistanceJoint.PreStep(System.Single)">
            <summary>
            Calculates necessary information for velocity solving.
            </summary>
            <param name="dt">Time in seconds since the last update.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceJoint.Distance">
            <summary>
            Gets or sets the distance maintained between the anchors.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceJoint.LocalAnchorA">
            <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceJoint.LocalAnchorB">
            <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceJoint.WorldAnchorA">
            <summary>
            Gets or sets the connection to the distance constraint from the first connected body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceJoint.WorldAnchorB">
            <summary>
            Gets or sets the connection to the distance constraint from the second connected body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.DistanceJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.EllipseSwingLimit">
            <summary>
            Constrains the relative orientation of two entities to within an ellipse.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.EllipseSwingLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a new swing limit.
            </summary>
            <param name="connectionA">First entity connected by the constraint.</param>
            <param name="connectionB">Second entity connected by the constraint.</param>
            <param name="twistAxis">Axis in world space to use as the initial unrestricted twist direction.
            This direction will be transformed to entity A's local space to form the basis's primary axis
            and to entity B's local space to form its twist axis.
            The basis's x and y axis are automatically created from the twist axis.</param>
            <param name="maximumAngleX">Maximum angle of rotation around the basis X axis.</param>
            <param name="maximumAngleY">Maximum angle of rotation around the basis Y axis.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.EllipseSwingLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new swing limit.
            Using this constructor will leave the limit uninitialized.  Before using the limit in a simulation, be sure to set the basis axes using
            limit.basis.setLocalAxes or limit.basis.setWorldAxes and b's twist axis using the localTwistAxisB or twistAxisB properties.
            </summary>
            <param name="connectionA">First entity connected by the constraint.</param>
            <param name="connectionB">Second entity connected by the constraint.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.EllipseSwingLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.EllipseSwingLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.EllipseSwingLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.EllipseSwingLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.EllipseSwingLimit.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.EllipseSwingLimit.SetupJointTransforms(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
            <param name="twistAxis">Axis around which rotation is allowed.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.EllipseSwingLimit.Basis">
            <summary>
            Gets the basis attached to entity A.
            The primary axis is the "twist" axis attached to entity A.
            The xAxis is the axis around which the angle will be limited by maximumAngleX.
            Similarly, the yAxis is the axis around which the angle will be limited by maximumAngleY.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.EllipseSwingLimit.LocalTwistAxisB">
            <summary>
            Gets or sets the twist axis attached to entity B in its local space.
            The transformed twist axis will be used to determine the angles around entity A's basis axes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.EllipseSwingLimit.MaximumAngleX">
            <summary>
            Gets or sets the maximum angle of rotation around the x axis.
            This can be thought of as the major radius of the swing limit's ellipse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.EllipseSwingLimit.MaximumAngleY">
            <summary>
            Gets or sets the maximum angle of rotation around the y axis.
            This can be thought of as the minor radius of the swing limit's ellipse.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.EllipseSwingLimit.TwistAxisB">
            <summary>
            Gets or sets the twist axis attached to entity B in world space.
            The transformed twist axis will be used to determine the angles around entity A's basis axes.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.EllipseSwingLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.EllipseSwingLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.EllipseSwingLimit.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.LineSliderJoint">
            <summary>
            Restricts two degrees of linear motion while allowing one degree of angular freedom.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.LineSliderJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new constraint which restricts two degrees of linear freedom and two degrees of angular freedom between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="lineAnchor">Location of the anchor for the line to be attached to connectionA in world space.</param>
            <param name="lineDirection">Axis in world space to be attached to connectionA along which connectionB can move and rotate.</param>
            <param name="pointAnchor">Location of the anchor for the point to be attached to connectionB in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.LineSliderJoint.AngularJoint">
            <summary>
            Gets the angular joint which removes two degrees of freedom.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LineSliderJoint.Limit">
            <summary>
            Gets the distance limits for the slider.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LineSliderJoint.Motor">
            <summary>
            Gets the slider motor.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.LineSliderJoint.PointOnLineJoint">
            <summary>
            Gets the line joint that restricts two linear degrees of freedom.
            </summary>
        </member>
        <member name="T:BEPUphysics.ForceFields.EntityForceFieldShape">
            <summary>
            Defines the area in which a force field works using an entity's shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.ForceFields.EntityForceFieldShape.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new force field shape using an entity.
            </summary>
            <param name="entity">Entity to use.</param>
        </member>
        <member name="M:BEPUphysics.ForceFields.EntityForceFieldShape.GetPossiblyAffectedEntities">
            <summary>
            Determines the possibly involved entities.
            </summary>
            <returns>Possibly involved entities.</returns>
        </member>
        <member name="M:BEPUphysics.ForceFields.EntityForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
            <summary>
            Determines if the entity is affected by the force field.
            </summary>
            <param name="testEntity">Entity to test.</param>
            <returns>Whether the entity is affected.</returns>
        </member>
        <member name="P:BEPUphysics.ForceFields.EntityForceFieldShape.Entity">
            <summary>
            Gets or sets the entity used by the shape.
            </summary>
        </member>
        <member name="P:BEPUphysics.ForceFields.EntityForceFieldShape.IncludeShapeCollisionMargin">
            <summary>
            Gets or sets whether or not to include the shape's collision margin when testing.
            </summary>
        </member>
        <member name="P:BEPUphysics.ForceFields.EntityForceFieldShape.IncludeTestedEntityCollisionMargin">
            <summary>
            Gets or sets whether or not to include the tested entities' collision margins when testing.
            </summary>
        </member>
        <member name="T:BEPUphysics.Threading.SpecializedThreadManager">
            <summary>
            Manages the engine's threads.
            </summary>
            <remarks>
            Separates the management of ThreadTasks and loops
            into specialized systems.  Should have generally higher
            performance than the SimpleThreadManager.
            </remarks>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.#ctor">
            <summary>
            Constructs a new specialized thread manager
            that manages loops and tasks separately.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.AddThread">
            <summary>
            Adds a new worker thread to the engine.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.AddThread(System.Action{System.Object},System.Object)">
            <summary>
            Adds a new worker thread to the engine.
            </summary>
            <param name="initialization">Function that the new thread will call before entering its work loop.</param>
            <param name="initializationInformation">Data to give the initializer.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.RemoveThread">
            <summary>
            Removes a worker thread from the engine.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.EnqueueTask(System.Action{System.Object},System.Object)">
            <summary>
            Enqueues a task to the thread manager.
            This should be safe to call from multiple threads and from other tasks.
            </summary>
            <param name="taskBody">Method to run.</param>
            <param name="taskInformation">Data to give to the task.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
            <param name="startIndex">Inclusive starting index.</param>
            <param name="endIndex">Exclusive ending index.</param>
            <param name="loopBody">Function that handles an individual iteration of the loop.</param>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.WaitForTaskCompletion">
            <summary>
            Waits until all tasks enqueued using enqueueTask are complete.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.SpecializedThreadManager.Dispose">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.SpecializedThreadManager.LoopManager">
            <summary>
            Gets or sets the loop manager used by this threading system.
            The loop manager is used to specifically parallelize forloops.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.SpecializedThreadManager.TaskManager">
            <summary>
            Gets or sets the task manager used by this threading system.
            The task manager is used for anything that isn't strictly a 
            for loop.
            </summary>
        </member>
        <member name="P:BEPUphysics.Threading.SpecializedThreadManager.ThreadCount">
            <summary>
            Gets the number of threads in use by the manager.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.Spring">
            <summary>
            Position based distance constraint between two entities.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.CompressionBreakLimit">
            <summary>
            Highest force that the spring can apply to resist compression before breaking, which removes the constraint from the space and simulation.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.ConnectionA">
            <summary>
            First body connected to the spring.
            If initialized to null during construction, refers to a special case sphere connection.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.ConnectionB">
            <summary>
            Second body connected to the spring.
            If initialized to null during construction, refers to a special case sphere connection.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.Damping">
            <summary>
            Resistance to motion and reduction in oscillation to apply along the spring.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.ExpansionBreakLimit">
            <summary>
            Highest force that the spring can apply to resist stretching before breaking, which removes the constraint from the space and simulation.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.LocalAnchorA">
            <summary>
            Connection to the spring in the local space of the first connected body.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.LocalAnchorB">
            <summary>
            Connection to the spring in the local space of the second connected body.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.MaximumForce">
            <summary>
            Highest force that the spring can apply.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.RestLength">
            <summary>
            Length of the spring when at rest.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.Strength">
            <summary>
            Spring constant to use.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.Spring.UseVelocityBasedSpring">
            <summary>
            Whether to consider the spring's strength in terms of correcting velocity (velocity change = spring constant * compression) or, if false, as a traditional force based spring (force = spring constant * compression).
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.Spring.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new spring.
            </summary>
            <param name="connectionA">First body connected to the spring.
            Set to null to connect with the space.</param>
            <param name="connectionB">Second body connected to the spring.
            Set to null to connect with the space.</param>
            <param name="anchorA">Connection to the spring from the first connected body in world space.</param>
            <param name="anchorB"> Connection to the spring from the second connected body in world space.</param>
            <param name="strength">Spring constant to use.</param>
            <param name="damping">Resistance to motion and reduction in oscillation to apply along the spring.</param>
            <param name="maximumForce">Highest force that the spring can apply.</param>
            <param name="expansionBreakLimit">Highest force that the spring can apply to resist stretching before breaking, which removes the constraint from the space and simulation.</param>
            <param name="compressionBreakLimit">Highest force that the spring can apply to resist compression before breaking, which removes the constraint from the space and simulation.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.Spring.UpdateDuringForces(System.Single)">
            <summary>
            Updates the spring and applies forces.
            Called automatically by the owning space.
            </summary>
            <param name="dt">Time since last frame in simulation seconds.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.Spring.WorldAnchorA">
            <summary>
            Connection to the spring from the first connected body in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.Spring.WorldAnchorB">
            <summary>
            Connection to the spring from the second connected body in world space.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.TwistJoint">
            <summary>
            Prevents the connected entities from twisting relative to each other.
            Acts like the angular part of a universal joint.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="axisA">Twist axis attached to the first connected entity.</param>
            <param name="axisB">Twist axis attached to the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistJoint.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistJoint.ApplyImpulse(System.Single)">
            <summary>
            Solves for velocity.
            </summary>
            <param name="dt">Simulation time to next frame.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.TwistJoint.PreStep(System.Single)">
            <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
            <param name="dt">Simulation step length.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistJoint.LocalAxisA">
            <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistJoint.LocalAxisB">
            <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistJoint.WorldAxisA">
            <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistJoint.WorldAxisB">
            <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.TwistJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopWorker.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:BEPUphysics.Threading.ParallelLoopWorker.Dispose">
            <summary>
            Disposes the worker.
            </summary>
        </member>
        <member name="T:BEPUphysics.BroadPhases.PersistentUniformGrid">
            <summary>
            Broadphase based on splitting the world into an infinite number of cubes, or 'cells.'  An entity within a cell is checked against other entities within that cell.
            This type of grid is not rebuilt each update; instead, entries are added and removed only as necessary.  This is good for scenes with lots of static geometry or slow objects.
            Different broadphases can be used by using the (Space).broadPhase property.
            </summary>
        </member>
        <member name="M:BEPUphysics.BroadPhases.PersistentUniformGrid.#ctor(System.Single)">
            <summary>
            Constructs an infinite grid with cells of the specified width.
            </summary>
            <param name="width">Width of each cell.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.PersistentUniformGrid.AddEntity(BEPUphysics.Entities.Entity)">
            <summary>
            Notifies the broadphase to consider the entity.
            </summary>
            <param name="e">Entity to add.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.PersistentUniformGrid.GetEntities(Microsoft.Xna.Framework.BoundingBox,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns entities intersecting or contained within the bounding shape.
            </summary>
            <param name="box">Bounding box to check.</param>
            <param name="entities">List of entities to be filled with entities within the bounding shape.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.PersistentUniformGrid.GetEntities(Microsoft.Xna.Framework.BoundingFrustum,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns entities intersecting or contained within the bounding shape.
            </summary>
            <param name="frustum">Bounding frustum to check.</param>
            <param name="entities">List of entities to be filled with entities within the bounding shape.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.PersistentUniformGrid.GetEntities(Microsoft.Xna.Framework.BoundingSphere,System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns entities intersecting or contained within the bounding shape.
            </summary>
            <param name="sphere">Bounding sphere to check.</param>
            <param name="entities">List of entities to be filled with entities within the bounding shape.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.PersistentUniformGrid.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance the ray will travel in units of the direction's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around entities.</param>
            <param name="hitEntity">Entity hit by the ray.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="toi">The time of impact for the hit.</param>
            <returns>Whether or not the ray intersected the target.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhases.PersistentUniformGrid.RayCast(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Gets all intersections between the ray and the container.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum length the ray will travel in units of the direction's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around entities.</param>
            <param name="hitEntities">List to add entities hit by the ray to.</param>
            <param name="hitLocations">List to add locations hit by the ray to.</param>
            <param name="hitNormals">List to add normals at locations hit by the ray to.</param>
            <param name="tois">List to add the time of impact for each ray to.</param>
            <returns>Whether or not the ray intersected the target.</returns>
        </member>
        <member name="M:BEPUphysics.BroadPhases.PersistentUniformGrid.RemoveEntity(BEPUphysics.Entities.Entity)">
            <summary>
            Removes the entity from any local broadphase storage.
            </summary>
            <param name="e">Entity to remove.</param>
        </member>
        <member name="M:BEPUphysics.BroadPhases.PersistentUniformGrid.UpdateCollisionPairs(System.Single)">
            <summary>
            Updates the collision pairs of the system.
            Called automatically when used by a Space.
            </summary>
            <param name="dt">Time elapsed in seconds since the last update for physics logic.</param>
        </member>
        <member name="P:BEPUphysics.BroadPhases.PersistentUniformGrid.GridSize">
            <summary>
            Gets and sets the size of each cell within the grid.
            </summary>
        </member>
        <member name="T:BEPUphysics.DataStructures.MotionState">
            <summary>
            Describes the position and movement of an entity.
            </summary>
        </member>
        <member name="F:BEPUphysics.DataStructures.MotionState.DefaultState">
            <summary>
            Specifies a motionless, identity rotation state centered on the origin.
            </summary>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="centerPosition">Location of the center of the collision shape of an entity.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="centerPosition">Location of the center of the collision shape of an entity.</param>
            <param name="centerOfMass">Location around which the entity associated with this MotionState rotates.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="centerPosition">Location of the center of the collision shape of an entity.</param>
            <param name="orientationQuaternion">Orientation, represented by a quaternion, of an entity.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="centerPosition">Location of the center of the collision shape of an entity.</param>
            <param name="orientationMatrix">Orientation, represented by a matrix, of an entity.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="centerPosition">Location of the center of the collision shape of an entity.</param>
            <param name="centerOfMass">Location around which the entity associated with this MotionState rotates.</param>
            <param name="orientationQuaternion">Orientation, represented by a quaternion, of an entity.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="centerPosition">Location of the center of the collision shape of an entity.</param>
            <param name="centerOfMass">Location around which the entity associated with this MotionState rotates.</param>
            <param name="orientationMatrix">Orientation, represented by a matrix, of an entity.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="centerPosition">Location of the center of the collision shape of an entity.</param>
            <param name="orientationQuaternion">Orientation, represented by a quaternion, of an entity.</param>
            <param name="linearVelocity">Linear velocity of an entity.</param>
            <param name="angularVelocity">Angular velocity of an entity.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="centerPosition">Location of the center of the collision shape of an entity.</param>
            <param name="orientationMatrix">Orientation, represented by a matrix, of an entity.</param>
            <param name="linearVelocity">Linear velocity of an entity.</param>
            <param name="angularVelocity">Angular velocity of an entity.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="centerPosition">Location of the center of the collision shape of an entity.</param>
            <param name="centerOfMass">Location around which the entity associated with this MotionState rotates.</param>
            <param name="orientationQuaternion">Orientation, represented by a quaternion, of an entity.</param>
            <param name="linearVelocity">Linear velocity of an entity.</param>
            <param name="angularVelocity">Angular velocity of an entity.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="centerPosition">Location of the center of the collision shape of an entity.</param>
            <param name="centerOfMass">Location around which the entity associated with this MotionState rotates.</param>
            <param name="orientationMatrix">Orientation, represented by a matrix, of an entity.</param>
            <param name="linearVelocity">Linear velocity of an entity.</param>
            <param name="angularVelocity">Angular velocity of an entity.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(BEPUphysics.Entities.Entity,System.Boolean)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="e">Entity to base the motion state on.</param>
            <param name="useBufferedStates">Whether to use the entity's buffered or unbuffered states to create the new MotionState.
            If the entity does not yet belong to a space, the entity's unbuffered states are accessed.</param>
        </member>
        <member name="M:BEPUphysics.DataStructures.MotionState.#ctor(BEPUphysics.Entities.Entity)">
            <summary>
            Creates a motion state.
            </summary>
            <param name="e">Entity to base the motion state on.
            If the entity does not yet belong to a space, the entity's unbuffered states are accessed.</param>
        </member>
        <member name="P:BEPUphysics.DataStructures.MotionState.AngularMomentum">
            <summary>
            Gets the angular momentum of the entity associated with this MotionState.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MotionState.AngularVelocity">
            <summary>
            Gets the angular velocity of the entity associated with this MotionState.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MotionState.CenterOfMass">
            <summary>
            Gets the location around which the entity associated with this MotionState rotates.
            When an entity's allowInterpolation flag and the space's simulationSetting.useInternalTimeStepping flag are true,
            this property includes an extra component to blend the previous and current frame's results together to allow smooth animation.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MotionState.CenterPosition">
            <summary>
            Gets the location of the center of the collision shape of the entity associated with this MotionState.
            When an entity's allowInterpolation flag and the space's simulationSetting.useInternalTimeStepping flag are true,
            this property includes an extra component to blend the previous and current frame's results together to allow smooth animation.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MotionState.LinearMomentum">
            <summary>
            Gets the linear momentum of the entity associated with this MotionState.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MotionState.LinearVelocity">
            <summary>
            Gets the linear velocity of the entity associated with this MotionState.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MotionState.OrientationMatrix">
            <summary>
            Gets the orientation, represented by a matrix, of the entity associated with this MotionState.
            When an entity's allowInterpolation flag and the space's simulationSetting.useInternalTimeStepping flag are true,
            this property includes an extra component to blend the previous and current frame's results together to allow smooth animation.
            </summary>
        </member>
        <member name="P:BEPUphysics.DataStructures.MotionState.OrientationQuaternion">
            <summary>
            Gets the orientation, represented by a quaternion, of the entity associated with this MotionState.
            When an entity's allowInterpolation flag and the space's simulationSetting.useInternalTimeStepping flag are true,
            this property includes an extra component to blend the previous and current frame's results together to allow smooth animation.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.RevoluteLimit">
            <summary>
            Constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.RevoluteLimit.maximumAngle">
            <summary>
            Naximum angle that entities can twist.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.RevoluteLimit.minimumAngle">
            <summary>
            Minimum angle that entities can twist.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            Constructs a new constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
            <param name="limitedAxis">Axis of rotation to be limited.</param>
            <param name="testAxis">Axis attached to connectionB that is tested to determine the current angle.
            Will also be used as the base rotation axis representing 0 degrees.</param>
            <param name="minimumAngle">Minimum twist angle allowed.</param>
            <param name="maximumAngle">Maximum twist angle allowed.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
            <summary>
            Constructs a new constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            Using this constructor will leave the limit uninitialized.  Before using the limit in a simulation, be sure to set the basis axes using
            limit.basis.setLocalAxes or limit.basis.setWorldAxes and the test axis using the localTestAxis or testAxis properties.
            </summary>
            <param name="connectionA">First connection of the pair.</param>
            <param name="connectionB">Second connection of the pair.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
            <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.RevoluteLimit.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
            <summary>
            Gets the mass matrix of the revolute limit.
            The revolute limit is special; in terms of solving, it is
            actually sometimes TWO constraints; a minimum plane, and a
            maximum plane.  The M11 field represents the minimum plane mass matrix
            and the M22 field represents the maximum plane mass matrix.
            </summary>
            <param name="massMatrix">Mass matrix of the constraint.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteLimit.Basis">
            <summary>
            Gets the basis attached to entity A.
            The primary axis represents the limited axis of rotation.
            The x axis defines the 'base' direction corresponding to 0 degrees of relative rotation.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteLimit.LocalTestAxis">
            <summary>
            Gets or sets the axis attached to entity B in its local space that will be tested against the limits.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteLimit.MaximumAngle">
            <summary>
            Gets or sets the maximum angle that entities can twist.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteLimit.MinimumAngle">
            <summary>
            Gets or sets the minimum angle that entities can twist.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteLimit.TestAxis">
            <summary>
            Gets or sets the axis attached to entity B in world space that will be tested against the limits.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteLimit.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            The revolute limit is special; internally, it is sometimes two constraints.
            The X value of the vector is the "minimum" plane of the limit, and the Y value is the "maximum" plane.
            If a plane isn't active, its error is zero.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteLimit.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            The x component corresponds to the minimum plane limit,
            while the y component corresponds to the maximum plane limit.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.RevoluteLimit.Error">
            <summary>
            Gets the current constraint error.
            The x component corresponds to the minimum plane limit,
            while the y component corresponds to the maximum plane limit.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SingleEntityLinearMotor">
            <summary>
            Constraint which tries to push an entity to a desired location.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SingleEntityLinearMotor.accumulatedImpulse">
            <summary>
            Sum of forces applied to the constraint in the past.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SingleEntityLinearMotor.maxForceDt">
            <summary>
            Maximum impulse that can be applied in a single frame.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SingleEntityLinearMotor.maxForceDtSquared">
            <summary>
            Maximum impulse that can be applied in a single frame, squared.
            This is computed in the prestep to avoid doing extra multiplies in the more-often called applyImpulse method.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityLinearMotor.#ctor(BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new single body linear motor.  This motor will try to move a single entity to a goal velocity or to a goal position.
            </summary>
            <param name="entity">Entity to affect.</param>
            <param name="point">Point in world space attached to the entity that will be motorized.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityLinearMotor.#ctor">
            <summary>
            Constructs a new single body linear motor.  This motor will try to move a single entity to a goal velocity or to a goal position.
            This constructor will start the motor with isActive = false.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SingleEntityLinearMotor.ComputeMaxForces(System.Single,System.Single)">
            <summary>
            Computes the maxForceDt and maxForceDtSquared fields.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityLinearMotor.LocalPoint">
            <summary>
            Point attached to the entity in its local space that is motorized.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityLinearMotor.Point">
            <summary>
            Point attached to the entity in world space that is motorized.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityLinearMotor.Settings">
            <summary>
            Gets the motor's velocity and servo settings.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityLinearMotor.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityLinearMotor.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SingleEntityLinearMotor.Error">
            <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, error is zero.
            </summary>
        </member>
        <member name="T:BEPUphysics.ForceFields.BoundingBoxForceFieldShape">
            <summary>
            Defines the area in which a force field works using an entity's shape.
            </summary>
        </member>
        <member name="M:BEPUphysics.ForceFields.BoundingBoxForceFieldShape.#ctor(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Constructs a new force field shape using a bounding box.
            </summary>
            <param name="box">Bounding box to use.</param>
        </member>
        <member name="M:BEPUphysics.ForceFields.BoundingBoxForceFieldShape.GetPossiblyAffectedEntities">
            <summary>
            Determines the possibly involved entities.
            </summary>
            <returns>Possibly involved entities.</returns>
        </member>
        <member name="M:BEPUphysics.ForceFields.BoundingBoxForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
            <summary>
            Determines if the entity is affected by the force field.
            </summary>
            <param name="testEntity">Entity to test.</param>
            <returns>Whether the entity is affected.</returns>
        </member>
        <member name="P:BEPUphysics.ForceFields.BoundingBoxForceFieldShape.BoundingBox">
            <summary>
            Gets or sets the bounding box used by the shape.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SolverSettings">
            <summary>
            Contains information about how a wheel solves its constraints.
            </summary>
        </member>
        <member name="F:BEPUphysics.Constraints.SolverSettings.currentIterations">
            <summary>
            Used to count how many iterations have taken place so far.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverSettings.MaximumIterations">
            <summary>
            Gets or sets the maximum iterations that the wheel constraint can undergo.
            If the space's iteration count is lower than this, the solver will only attempt
            as many iterations as the space iteration count.
            Lower iteration counts are less accurate, but can improve performance.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverSettings.MaximumIterationsAtZeroImpulse">
            <summary>
            Gets or sets the maximum number of iterations to wait at very low impulse values before
            no longer attempting to solve a wheel constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SolverSettings.MinimumImpulse">
            <summary>
            Gets or sets the minimum impulse that a wheel constraint can apply before being considered a 'small' impulse.
            Higher values will allow the system to give up earlier, but can harm accuracy.
            </summary>
        </member>
        <member name="T:BEPUphysics.Entities.ConvexHull">
            <summary>
            Shape that can collide and move based on the convex 'outer layer' of a list of points.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="F:BEPUphysics.Entities.ConvexHull.BodyPoints">
            <summary>
            List of the points composing the surface of the convex hull in local space.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3},System.Single)">
            <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
            <param name="points">List of points in the object.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Constructs a nondynamic convex hull of points.
            </summary>
            <param name="points">List of points in the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.#ctor(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3},System.Single)">
            <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
            <param name="position">Position to place the convex hull.</param>
            <param name="points">List of points in the object.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.#ctor(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Constructs a nondynamic convex hull of points.
            </summary>
            <param name="position">Position to place the convex hull.</param>
            <param name="points">List of points in the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.#ctor(BEPUphysics.DataStructures.MotionState,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3},System.Single)">
            <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="points">List of points in the object.</param>
            <param name="m">Mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.#ctor(BEPUphysics.DataStructures.MotionState,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
            <summary>
            Constructs a nondynamic convex hull of points.
            </summary>
            <param name="motionState">Motion state specifying the entity's initial state.</param>
            <param name="points">List of points in the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.BecomeDynamic(System.Single)">
            <summary>
            Converts the entity into a physical object.
            If it is already a physically simulated entity, its mass and associated inertia tensor will be updated accordingly.
            </summary>
            <param name="m">New mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.BecomeKinematic">
            <summary>
            Converts the entity into a nondynamic object.
            If the entity is already not physically simulated, this will do nothing.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.ConvexHull.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="T:BEPUphysics.Entities.CompoundBody">
            <summary>
            Acts as a grouping of multiple other objects.  Can be used to form physically simulated concave shapes.
            Can be nested within other compound bodies.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.#ctor(System.Boolean)">
            <summary>
            Creates a new empty CompoundBody.
            </summary>
            <param name="isDynamic">Whether or not the compound is to be physically simulated.</param>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.#ctor">
            <summary>
            Creates a new empty dynamic CompoundBody.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.#ctor(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Creates a new CompoundBody with the given subbodies.
            If all of the bodies are dynamic, the compound body is dynamic; if all of the bodies are kinematic, the compound body is kinematic.
            </summary>
            <param name="bodies">List of entities to use as subbodies of the compound body.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the bodies list is empty or there is a mix of kinematic and dynamic entities in the body list.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.BecomeDynamic(System.Single)">
            <summary>
            Converts the entity into a physical object.
            If it is already a physically simulated entity, its mass and associated inertia tensor will be updated accordingly.
            Distributes mass amongst subbodies evenly.  If a different distribution is desired, it will have to be done manually (removing a subbody from the compound, calling its makePhysical method, and re-adding it to the compound).
            </summary>
            <param name="m">New mass of the object.</param>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.BecomeKinematic">
            <summary>
            Converts the entity into a nondynamic object.
            If the entity is already not physically simulated, this will do nothing.
            </summary>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.GetExtremePoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Retrieves the most extreme point along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="margin">Extra space around the entity.</param>
            <param name="extremePoint">Most extreme point along axis.</param>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="positionToUse">Geometric center position of the entity to use in lieu of of the object's current position for the extreme point calculation.</param>
            <param name="orientationToUse">Orientation of the entity to use in lieu of the object's current orientation for the extreme point calculation.</param>
            <param name="min">Most extreme point along -d.</param>
            <param name="max">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.GetExtremePoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Retrieves the most extreme points along direction d.
            </summary>
            <param name="d">Axis for comparison.</param>
            <param name="minPoint">Most extreme point along -d.</param>
            <param name="maxPoint">Most extreme point along d.</param>
            <param name="margin">Extra space around the entity.</param>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.AddBody(BEPUphysics.Entities.Entity,System.Boolean)">
            <summary>
            Adds the given entity to the compound body if it doesn't already belong to another compound body.
            </summary>
            <param name="body">Body to be added.</param>
            <param name="inheritParentCollisionRules">Whether or not the new subbody should inherit the collision rules of this compound body.
            If true, then the collisionRules reference of the subBody will be set directly to the parent's collisionRules object.
            If false, this compound body's collisionRule.group is inherited by the body if the body's collisionRule.group is null and this compound body's collisionRule.group is not null.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity to add already belongs to a space or another compound body, or it is kinematic with a dynamic compound body, or it is dynamic with a kinematic compound body.</exception>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.AddBody(BEPUphysics.Entities.Entity)">
            <summary>
            Adds the given entity to the compound body if it doesn't already belong to another compound body.
            The subbody will inherit the collision group of the parent if it has no collision group of its own.
            </summary>
            <param name="body">Body to be added.</param>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.GetAllRealChildren(System.Collections.Generic.List{BEPUphysics.Entities.Entity})">
            <summary>
            Returns all children of the compound body, excluding other compound bodies.
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.GetCollisionPairs(System.Collections.Generic.List{BEPUphysics.CollisionPair})">
            <summary>
            Returns all collision pairs of all children of the compound body.
            </summary>
            <param name="outputCollisionPairs">List of collision pairs to be modified.</param>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.IsEntityWithin(BEPUphysics.Entities.Entity)">
            <summary>
            Determines if the given entity is a part of the compound body or its subbodies.
            </summary>
            <param name="e">Entity to check.</param>
            <returns>Whether or not the entity is a part of this compound body or its subbodies.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.RayTest(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,System.Collections.Generic.List{BEPUphysics.Entities.Entity},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Single})">
            <summary>
            Gets the intersection between the ray and the entity.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margin around the entity.</param>
            <param name="hitEntities">Subbodies hit by the ray.</param>
            <param name="hitLocations">Hit locations of the ray.</param>
            <param name="hitNormals">Normals at the hit locations.</param>
            <param name="tois">Distances, in units of the length of the direction vector, to the hit locations.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.RemoveBody(BEPUphysics.Entities.Entity)">
            <summary>
            Removes the given body from the compound object.
            </summary>
            <param name="body">Body to be removed.</param>
            <returns>Whether or not the body was present.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.CountEntities">
            <summary>
            Determines how many entities are involved with this compound body.  Count includes itself, children, grandchildren, and so on.
            </summary>
            <returns>Number of children.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.FindNextState(System.Single,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Calculates the translation allowed by checking the collision pairs of all subbodies.
            </summary>
            <param name="dt">Time since last frame in physical logic.</param>
            <param name="nextPosition">Next position to use.</param>
            <returns>Whether or not the object was constrained by a collision during the frame.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.FindNextState(System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Calculates the minimum translation and rotation allowed by the collision pairs of all subbodies.
            </summary>
            <param name="dt">Time since last frame in physical logic.</param>
            <param name="nextPosition">Next position to use.</param>
            <param name="nextOrientation">Next orientation to use.</param>
            <returns>Whether or not the object was constrained by a collision during the frame.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.RayTest(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the compound body.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="withMargin">Whether or not to include the collision margin of the body.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="t">Distance, in units of the length of the direction vector, to the hit location.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.RayTest(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the compound body.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
            <param name="margin">The collision margin of the body.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="t">Distance, in units of the length of the direction vector, to the hit location.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.RayTestInfinite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Boolean,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Gets the first intersection between the ray and the compound body.
            </summary>
            <param name="origin">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
            <param name="withMargin">Whether or not to include the collision margin of the body.</param>
            <param name="hitLocation">Hit location of the ray.</param>
            <param name="hitNormal">Normal at the hit location.</param>
            <param name="t">Distance, in units of the length of the direction vector, to the hit location.</param>
            <returns>Whether or not the ray hit the target.</returns>
        </member>
        <member name="M:BEPUphysics.Entities.CompoundBody.Initialize(System.Boolean)">
            <summary>
            Sets up the initial values of the object.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.CompoundBody.SubBodies">
            <summary>
            Gets a list of the entities which are direct children of this compound body.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.CompoundBody.SubBodyLocalOffsets">
            <summary>
            Gets a list of offsets from the center of the compound body to the subbodies in the compound body's local space.
            Changing the local offset of a subbody will not automatically recalculate related physical properties.
            To force a recalculation, the subbody can be removed and re-added.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.CompoundBody.SubBodyLocalRotations">
            <summary>
            Gets a list of the rotational differences between the compound body and the subbodies.
            Changing the local rotation of a subbody will not automatically recalculate related physical properties.
            To force a recalculation, the subbody can be removed and re-added.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.CompoundBody.NumberOfCollidableChildren">
            <summary>
            Gets the total number of non-compound body children of this compound body.
            </summary>
        </member>
        <member name="P:BEPUphysics.Entities.CompoundBody.NumberOfEntities">
            <summary>
            Gets the total number of entities associated with this compound, including itself and any compound children.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.PointOnPlaneJoint">
            <summary>
            Constrains a point on one body to be on a plane defined by another body.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnPlaneJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new point on plane constraint.
            </summary>
            <param name="connectionA">Entity to which the constraint's plane is attached.</param>
            <param name="connectionB">Entity to which the constraint's point is attached.</param>
            <param name="planeAnchor">A point on the plane.</param>
            <param name="normal">Direction, attached to the first connected entity, defining the plane's normal</param>
            <param name="pointAnchor">The point to constrain to the plane, attached to the second connected object.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnPlaneJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnPlaneJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnPlaneJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnPlaneJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
            <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
        </member>
        <member name="M:BEPUphysics.Constraints.PointOnPlaneJoint.GetMassMatrix(System.Single@)">
            <summary>
            Gets the mass matrix of the constraint.
            </summary>
            <param name="outputMassMatrix">Constraint's mass matrix.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.LocalPlaneAnchor">
            <summary>
            Gets or sets the plane's anchor in entity A's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.LocalPlaneNormal">
            <summary>
            Gets or sets the plane's normal in entity A's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.LocalPointAnchor">
            <summary>
            Gets or sets the point anchor in entity B's local space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.OffsetA">
            <summary>
            Gets the offset from A to the connection point between the entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.OffsetB">
            <summary>
            Gets the offset from B to the connection point between the entities.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.PlaneAnchor">
            <summary>
            Gets or sets the plane anchor in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.PlaneNormal">
            <summary>
            Gets or sets the plane's normal in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.PointAnchor">
            <summary>
            Gets or sets the point anchor in world space.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.RelativeVelocity">
            <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.TotalImpulse">
            <summary>
            Gets the total impulse applied by this constraint.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PointOnPlaneJoint.Error">
            <summary>
            Gets the current constraint error.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.PlaneSliderJoint">
            <summary>
            Restricts one linear degree of freedom.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.PlaneSliderJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new constraint which restricts one linear degree of freedom between two entities.
            </summary>
            <param name="connectionA">First entity of the constraint pair.</param>
            <param name="connectionB">Second entity of the constraint pair.</param>
            <param name="planeAnchor">Location of the anchor for the plane to be attached to connectionA in world space.</param>
            <param name="planeNormal">Normal of the plane constraint in world space.</param>
            <param name="xAxis">Direction in world space along which the X axis LinearAxisLimit and LinearAxisMotor work.
            This is usually chosen to be perpendicular to the planeNormal and the yAxis.</param>
            <param name="yAxis">Direction in world space along which the Y axis LinearAxisLimit and LinearAxisMotor work.
            This is usually chosen to be perpendicular to the planeNormal and the xAxis.</param>
            <param name="pointAnchor">Location of the anchor for the point to be attached to connectionB in world space.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.PlaneSliderJoint.LimitX">
            <summary>
            Gets the distance limit for the slider along plane's X axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PlaneSliderJoint.LimitY">
            <summary>
            Gets the distance limit for the slider along plane's Y axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PlaneSliderJoint.MotorX">
            <summary>
            Gets the slider motor for the plane's X axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PlaneSliderJoint.MotorY">
            <summary>
            Gets the slider motor for the plane's Y axis.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.PlaneSliderJoint.PointOnPlaneJoint">
            <summary>
            Gets the plane joint that restricts one linear degree of freedom.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SpringAdvancedSettings">
            <summary>
            Contains the error reduction factor and softness of a constraint.
            These can be used to make the same behaviors as the stiffness and damping constants,
            but may provide a more intuitive representation for rigid constraints.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringAdvancedSettings.ErrorReductionFactor">
            <summary>
            Gets or sets the error reduction parameter of the spring.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringAdvancedSettings.Softness">
            <summary>
            Gets or sets the softness of the joint.  Higher values allow the constraint to be violated more.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringAdvancedSettings.UseAdvancedSettings">
            <summary>
            Gets or sets whether or not to use the advanced settings.
            If this is set to true, the errorReductionFactor and softness will be used instead
            of the stiffness constant and damping constant.
            </summary>
        </member>
        <member name="T:BEPUphysics.Constraints.SpringSettings">
            <summary>
            Specifies the way in which a constraint's spring component behaves.
            </summary>
        </member>
        <member name="M:BEPUphysics.Constraints.SpringSettings.ComputeErrorReductionAndSoftness(System.Single,System.Single@,System.Single@)">
            <summary>
            Computes the error reduction parameter and softness of a constraint based on its constants.
            Automatically called by constraint presteps to compute their per-frame values.
            </summary>
            <param name="dt">Simulation timestep.</param>
            <param name="errorReduction">Error reduction factor to use this frame.</param>
            <param name="softness">Adjusted softness of the constraint for this frame.</param>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringSettings.Advanced">
            <summary>
            Gets an object containing the solver's direct view of the spring behavior.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringSettings.DampingConstant">
            <summary>
            Gets or sets the damping constant of this spring.  Higher values reduce oscillation more.
            </summary>
        </member>
        <member name="P:BEPUphysics.Constraints.SpringSettings.StiffnessConstant">
            <summary>
            Gets or sets the spring constant of this spring.  Higher values make the spring stiffer.
            </summary>
        </member>
    </members>
</doc>
